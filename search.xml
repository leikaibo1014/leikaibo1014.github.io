<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>堆排序-快排-冒泡</title>
    <url>/2021/05/10/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序：堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
<p>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。</p>
 <a id="more"></a>



<p><strong>堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了</strong></p>
<p>java代码实现堆排序的过程</p>
<p>首先，我们需要先交换每一个非叶子结点和他们的左右孩子节点，构造这三个节点为一个大顶堆.</p>
<p>以下代码的思想就是，交换结点以及他们左右孩子节点，找到最大值并交换位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 参数说明   arr 表示待构建数组</span></span><br><span class="line"><span class="comment">    * n：表示堆的元素个数</span></span><br><span class="line"><span class="comment">    * i: 表示每一个小堆的父节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heap_step</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> c1 = <span class="number">2</span> * i + <span class="number">1</span>;    <span class="comment">//i结点的左孩子</span></span><br><span class="line">       <span class="keyword">int</span> c2 = <span class="number">2</span> * i + <span class="number">2</span>;   <span class="comment">//i结点的右孩子</span></span><br><span class="line">       <span class="keyword">int</span> max = i;   <span class="comment">//这三个元素最大值的下标指向</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//定义递归出口</span></span><br><span class="line">       <span class="keyword">if</span> (i &gt; n) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (c1 &lt; n &amp;&amp; arr[c1] &gt; arr[max])&#123;</span><br><span class="line">           max = c1;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (c2 &lt; n &amp;&amp; arr[c2] &gt; arr[max]) &#123;</span><br><span class="line">           max = c2;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (max != i) &#123;</span><br><span class="line">           swap(arr, max, i);<span class="comment">//交换两个位置的元素</span></span><br><span class="line">           heap_step(arr, n, max);<span class="comment">//继续进行递归判断，确保每一次构建完任意一个小堆都是大顶堆</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">       两个元素交换位置的函数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">       arr[i] = arr[j];</span><br><span class="line">       arr[j] = temp;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p>上面的方法是构建结点以及孩子节点元素的交换步骤</p>
<p>下面我们需要，对数组中也就是完全二叉树中所有的非叶子结点，逐次遍历，对每一个非叶子结点都需要进行构造大顶堆的过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们需要对每一个非叶子结点以及他们的左右孩子构建大顶堆</span></span><br><span class="line"><span class="comment">     * 从最后一个非叶子结点开始</span></span><br><span class="line"><span class="comment">     * 最后一个叶子结点数组下标为：  last_node = arr.length-1</span></span><br><span class="line"><span class="comment">     * 则最后一个非叶子结点为   last_parent = (last_node-1)/2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build_heap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> last_node = n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> last_parent = (last_node-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//对每一个非叶子结点，依次从后向前遍历，每一个都做heap_step的大顶堆构建</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = last_parent; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            heap_step(arr,n,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>以上方法执行完，我们的数组完全二叉树就完全变成了一个大顶堆。每一个根节点都大于他们的左右孩子节点</p>
<p>构造完大顶堆之后，我们需要把大顶堆的根元素与最后一个位置的元素进行位置的交换。</p>
<p>交换代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建完大顶堆之后，需要进行大顶堆的第一个元素与最后元素进行交换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    build_heap(arr, arr.length);   <span class="comment">//把数组先构造成为一个大顶堆</span></span><br><span class="line">    <span class="comment">// 这个时候数组已经是一个大顶堆了</span></span><br><span class="line">    <span class="comment">//交换数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        swap(arr, i, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            因为这个时候完全二叉树已经是一个大顶堆了，</span></span><br><span class="line"><span class="comment">            所以我们只需要使用heap_step交换最顶层的三个数字就可以,也就是最根节点以及它们的左右孩子节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        heap_step(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是对排序中的各个步骤逐一的记录，下面是完整代码：</p>
<p>完整的堆排序算法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">heapSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">12</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">18</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">16</span>&#125;;</span><br><span class="line">        heap_sort(array, array.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.print(array[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数说明   arr 表示待构建数组</span></span><br><span class="line"><span class="comment">     * n：表示堆的元素个数</span></span><br><span class="line"><span class="comment">     * i: 表示每一个小堆的父节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heap_step</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c1 = <span class="number">2</span> * i + <span class="number">1</span>;    <span class="comment">//i结点的左孩子</span></span><br><span class="line">        <span class="keyword">int</span> c2 = <span class="number">2</span> * i + <span class="number">2</span>;   <span class="comment">//i结点的右孩子</span></span><br><span class="line">        <span class="keyword">int</span> max = i;   <span class="comment">//这三个元素最大值的下标指向</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义递归出口</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c1 &lt; n &amp;&amp; arr[c1] &gt; arr[max])&#123;</span><br><span class="line">            max = c1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c2 &lt; n &amp;&amp; arr[c2] &gt; arr[max]) &#123;</span><br><span class="line">            max = c2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (max != i) &#123;</span><br><span class="line">            swap(arr, max, i);<span class="comment">//交换两个位置的元素</span></span><br><span class="line">            heap_step(arr, n, max);<span class="comment">//继续进行递归判断，确保每一次构建完任意一个小堆都是大顶堆</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们需要对每一个非叶子结点以及他们的左右孩子构建大顶堆</span></span><br><span class="line"><span class="comment">     * 从最后一个非叶子结点开始</span></span><br><span class="line"><span class="comment">     * 最后一个叶子结点数组下标为：  last_node = arr.length-1</span></span><br><span class="line"><span class="comment">     * 则最后一个非叶子结点为   last_parent = (last_node-1)/2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build_heap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> last_node = n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> last_parent = (last_node-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//对每一个非叶子结点，依次从后向前遍历，每一个都做heap_step的大顶堆构建</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = last_parent; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            heap_step(arr,n,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建完大顶堆之后，需要进行大顶堆的第一个元素与最后元素进行交换</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        build_heap(arr, arr.length);   <span class="comment">//把数组先构造成为一个大顶堆</span></span><br><span class="line">        <span class="comment">// 这个时候数组已经是一个大顶堆了</span></span><br><span class="line">        <span class="comment">//交换数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            swap(arr, i, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                因为这个时候完全二叉树已经是一个大顶堆了，</span></span><br><span class="line"><span class="comment">                所以我们只需要使用heap_step交换最顶层的三个数字就可以,也就是最根节点以及它们的左右孩子节点</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            heap_step(arr, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个元素交换位置的函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> study.Sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">quickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortArray</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> low,<span class="keyword">int</span> hight)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i,j,temp,t;</span><br><span class="line">        <span class="keyword">if</span> (low &gt; hight) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i = low;</span><br><span class="line">        j = hight;</span><br><span class="line">        temp = array[low];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (temp&lt;=array[j] &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (temp&gt;=array[i] &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                t = array[j];</span><br><span class="line">                array[j] = array[i];</span><br><span class="line">                array[i] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        array[low] = array[i];</span><br><span class="line">        array[i] = temp;</span><br><span class="line">        quickSortArray(array,low,j-<span class="number">1</span>);</span><br><span class="line">        quickSortArray(array,j+<span class="number">1</span>,hight);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array =&#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">25</span>,<span class="number">15</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        quickSortArray(array,<span class="number">0</span>,array.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.print(array[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSortArr</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = array[j];</span><br><span class="line">                array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] =temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> min = array[i];</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; array[j]) &#123;</span><br><span class="line">                min = array[j];</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minIndex != i) &#123;</span><br><span class="line">            array[minIndex] = array[i];</span><br><span class="line">            array[i] = min;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树操作</title>
    <url>/2020/06/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="1-给定一个字符串求字符串中所有字符组成的全排列即所有字符的组合的情况"><a href="#1-给定一个字符串求字符串中所有字符组成的全排列即所有字符的组合的情况" class="headerlink" title="1. 给定一个字符串求字符串中所有字符组成的全排列即所有字符的组合的情况"></a>1. 给定一个字符串求字符串中所有字符组成的全排列即所有字符的组合的情况</h3><p>例如 abcd 这个字符串，求这四个字符的全排列我们可以这样的进行思考，首先固定第一位的字符，然后把后序的字符依次与第一个位置的字符进行数据位置交换，依次，对于后序的字符我们采用这样方法依次进行交换。按照这种规律，我们可以想到递归的思想。</p>
<a id="more"></a>

<p>递归求全排列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String array = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="keyword">char</span>[] chars = array.toCharArray();</span><br><span class="line">    allSort(chars,<span class="number">0</span>,array.length());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allSort</span><span class="params">(<span class="keyword">char</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (end &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            System.out.println(array);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">                swap(array, start, i);</span><br><span class="line">                allSort(array,start+<span class="number">1</span>,end);</span><br><span class="line">                swap(array, i, start);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> temp = array[start];</span><br><span class="line">        array[start] = array[i];</span><br><span class="line">        array[i] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>除了这种方法外，这个题的递归代码还可以这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String array = <span class="string">"abc"</span>;</span><br><span class="line">    allZuHe(<span class="string">""</span>, array);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allZuHe</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.length() == <span class="number">3</span>) &#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length(); i++) &#123;</span><br><span class="line">        String atemp = a;</span><br><span class="line">        String btemp = b;</span><br><span class="line">        StringBuffer temp = <span class="keyword">new</span> StringBuffer(b);</span><br><span class="line">        allZuHe(a+temp.charAt(i),temp.deleteCharAt(i).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-求一个连续整数数组中的连续子序列和的最大值"><a href="#2-求一个连续整数数组中的连续子序列和的最大值" class="headerlink" title="2.求一个连续整数数组中的连续子序列和的最大值"></a>2.求一个连续整数数组中的连续子序列和的最大值</h3><p>例如在 {-2,-1,6,-3,-2,7,-15,1,2,2} 中连续子序列的最大是8 即是由数组中的  6 -3 -2 7 构成的连续子序列的和最大</p>
<p>我们可以采用 前i项和与第i项进行比较，取前i项和与第i项的最大值。由于我们每一步的最大值都会变，所以我们需要使用一个变量并记录当前计算或者上一步计算中的最大值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;-<span class="number">2</span>,-<span class="number">1</span>,<span class="number">6</span>,-<span class="number">3</span>,-<span class="number">2</span>,<span class="number">7</span>,-<span class="number">15</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> i = FindGreatestSumOfSubArray(array);</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//max就是上面的dp[i]</span></span><br><span class="line">        <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//因为这个dp[i]老是变，所以比如你dp[4]是8 dp[5]就变成-7了，所以需要res保存一下</span></span><br><span class="line">        <span class="keyword">int</span> res = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            max = Math.max(max + array[i], array[i]);</span><br><span class="line">            res = Math.max(res, max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-二叉树"><a href="#3-二叉树" class="headerlink" title="3. 二叉树"></a>3. 二叉树</h3><h5 id="给定数组构建二叉树"><a href="#给定数组构建二叉树" class="headerlink" title="给定数组构建二叉树"></a>给定数组构建二叉树</h5><p>由数组构建二叉树，主要是按照数组中的数据顺序，把数组中的数据插入到二叉树中。</p>
<p>最重要的就是先找出非叶子节点的节点序号，需要为每个序号建立他们的左右孩子节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">creatTreeByArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    List&lt;TreeNode&gt; treeNodeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        treeNodeList.add(<span class="keyword">new</span> TreeNode(array[i]));<span class="comment">//把数组转换为树中的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> countNode = array.length; <span class="comment">//节点个数</span></span><br><span class="line">    <span class="comment">//为每个父节点添加左右孩子节点</span></span><br><span class="line">    <span class="comment">//父节点的个数为countNode/2   父节点的下标为 countNode - 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countNode / <span class="number">2</span> - <span class="number">1</span> ; i++) &#123;</span><br><span class="line">        treeNodeList.get(i).left = treeNodeList.get(i * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        treeNodeList.get(i).right = treeNodeList.get(i * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> lastTreeNode = countNode / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//如果节点数量为奇数则最后一个父节点有右孩子</span></span><br><span class="line">    treeNodeList.get(lastTreeNode).left = treeNodeList.get(lastTreeNode * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (countNode % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        treeNodeList.get(lastTreeNode).right = treeNodeList.get(lastTreeNode * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> treeNodeList.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="前序遍历的递归与非递归"><a href="#前序遍历的递归与非递归" class="headerlink" title="前序遍历的递归与非递归"></a>前序遍历的递归与非递归</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//前序的非递归与递归</span><br><span class="line">    public static void preePrintNode(TreeNode treeNode) &#123;</span><br><span class="line">        TreeNode node = treeNode;</span><br><span class="line">        if (node == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = new Stack();</span><br><span class="line">        while(node!=null || !stack.empty())&#123;</span><br><span class="line">            if (node != null) &#123;</span><br><span class="line">                System.out.print(node.value+&quot;-&gt;&quot;);</span><br><span class="line">                stack.push(node);</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                TreeNode pop = stack.pop();</span><br><span class="line">                node = pop.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void prePrintNodeDiGui(TreeNode treeNode) &#123;</span><br><span class="line">        if (treeNode == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(treeNode.value+&quot;-&gt;&quot;);</span><br><span class="line">        preePrintNode(treeNode.left);</span><br><span class="line">        preePrintNode(treeNode.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="把-前序遍历的结果存放在集合中"><a href="#把-前序遍历的结果存放在集合中" class="headerlink" title="把 前序遍历的结果存放在集合中"></a>把 前序遍历的结果存放在集合中</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//前序遍历存集合中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    preorderTree(root,result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorderTree</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    list.add(root.value);</span><br><span class="line">    preorderTree(root.left,list);</span><br><span class="line">    preorderTree(root.right,list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历非递归集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderList</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    TreeNode node = root;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span> || !stack.empty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            result.add(node.value);</span><br><span class="line">            stack.push(node);</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode pop = stack.pop();</span><br><span class="line">            node = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="中序遍历的递归与非递归"><a href="#中序遍历的递归与非递归" class="headerlink" title="中序遍历的递归与非递归"></a>中序遍历的递归与非递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//中序的非递归与递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">middlePrintNode</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">    TreeNode node = treeNode;</span><br><span class="line">    <span class="keyword">if</span> (treeNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span> || !stack.empty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode pop = stack.pop();</span><br><span class="line">            System.out.print(pop.value+<span class="string">"-&gt;"</span>);</span><br><span class="line">            node = pop.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">middlePrintNodeDiGui</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (treeNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    middlePrintNodeDiGui(treeNode.left);</span><br><span class="line">    System.out.print(treeNode.value+<span class="string">"-&gt;"</span>);</span><br><span class="line">    middlePrintNodeDiGui(treeNode.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="后序遍历的递归与非递归"><a href="#后序遍历的递归与非递归" class="headerlink" title="后序遍历的递归与非递归"></a>后序遍历的递归与非递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//后序遍历的非递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">houPrintNode</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">    TreeNode node = treeNode;</span><br><span class="line">    TreeNode curnode = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (treeNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack1.push(node);</span><br><span class="line">    <span class="comment">//stack2 按照根右左的顺序进栈</span></span><br><span class="line">    <span class="keyword">while</span> (!stack1.empty()) &#123;</span><br><span class="line">        curnode = stack1.pop();</span><br><span class="line">        stack2.push(curnode);</span><br><span class="line">        <span class="keyword">if</span> (curnode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack1.push(curnode.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (curnode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack1.push(curnode.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!stack2.empty()) &#123;</span><br><span class="line">        System.out.print(stack2.pop().value+<span class="string">"-&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//后序非递归集合---把结果存放在集合中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">houPrintTreeList</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">    TreeNode node = treeNode;</span><br><span class="line">    List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack&lt;TreeNode&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack1.push(node);</span><br><span class="line">    <span class="keyword">while</span> (!stack1.empty()) &#123;</span><br><span class="line">        TreeNode curNode = stack1.pop();</span><br><span class="line">        stack2.push(curNode);</span><br><span class="line">        <span class="keyword">if</span> (curNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack1.push(curNode.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (curNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack1.push(curNode.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!stack2.empty()) &#123;</span><br><span class="line">        result.add(stack2.pop().value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">houPrintNodeDiGui</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (treeNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    houPrintNodeDiGui(treeNode.left);</span><br><span class="line">    houPrintNodeDiGui(treeNode.right);</span><br><span class="line">    System.out.print(treeNode.value+<span class="string">"-&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="给定二叉树，返回层次遍历得到的节点"><a href="#给定二叉树，返回层次遍历得到的节点" class="headerlink" title="给定二叉树，返回层次遍历得到的节点"></a>给定二叉树，返回层次遍历得到的节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//层次[[],[],[]]</span></span><br><span class="line"><span class="comment">//给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; cengciPrintNode(TreeNode treeNode) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (treeNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    <span class="comment">//Queue&lt;TreeNode&gt; queue2 = new ArrayDeque&lt;&gt;();</span></span><br><span class="line">    queue.offer(treeNode);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        count = queue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            TreeNode poll = queue.poll();</span><br><span class="line">            list.add(poll.value);</span><br><span class="line">            <span class="keyword">if</span> (poll.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(poll.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (poll.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(poll.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="二叉树，从最底层向上，依次层次遍历"><a href="#二叉树，从最底层向上，依次层次遍历" class="headerlink" title="二叉树，从最底层向上，依次层次遍历"></a>二叉树，从最底层向上，依次层次遍历</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//从底向上遍历</span></span><br><span class="line"><span class="comment">//给定一个二叉树，返回其节点值自底向上的层次遍历。</span></span><br><span class="line"><span class="comment">// （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; downToUpCengCiPrint(TreeNode root)&#123;</span><br><span class="line">    LinkedList&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        count = queue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            TreeNode temp = queue.poll();</span><br><span class="line">            list.add(temp.value);</span><br><span class="line">            <span class="keyword">if</span> (temp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(temp.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(temp.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.addFirst(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="求树的路径的和"><a href="#求树的路径的和" class="headerlink" title="求树的路径的和"></a>求树的路径的和</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSumPath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeDemo treeDemo = <span class="keyword">new</span> TreeDemo();</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">12</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">16</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">18</span>&#125;;</span><br><span class="line">        TreeNode treeNode = treeDemo.creatBinTree(array);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; path = findPath(treeNode, <span class="number">36</span>);</span><br><span class="line">        System.out.println(path.toString());</span><br><span class="line">        <span class="keyword">int</span> pathSum = findPathSum(treeNode);</span><br><span class="line">        System.out.println(pathSum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找二叉树中存在目标值得节点，并打印出路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">treesumPath</span><span class="params">(TreeNode treeNode,<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (treeNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        printPath(treeNode, target, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPath</span><span class="params">(TreeNode treeNode, <span class="keyword">int</span> target, ArrayList list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (treeNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(treeNode.value);</span><br><span class="line">        target = target - treeNode.value;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span> &amp;&amp; treeNode.left == <span class="keyword">null</span> &amp;&amp; treeNode.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object integer : list) &#123;</span><br><span class="line">                System.out.print(integer + <span class="string">" -&gt;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printPath(treeNode.left, target, list);</span><br><span class="line">            printPath(treeNode.right, target, list);</span><br><span class="line">        &#125;</span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，"><a href="#给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，" class="headerlink" title="给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，"></a>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，</span></span><br><span class="line"><span class="comment">// 这条路径上所有节点值相加等于目标和。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = sum - root.value;</span><br><span class="line">    <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> sum == <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.left,sum) || hasPathSum(root.right,sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="这条路径上所有节点值相加等于目标的目标路径-返回List-lt-List-gt"><a href="#这条路径上所有节点值相加等于目标的目标路径-返回List-lt-List-gt" class="headerlink" title="这条路径上所有节点值相加等于目标的目标路径 返回List&lt;List&gt;"></a>这条路径上所有节点值相加等于目标的目标路径 返回List&lt;List<Integer>&gt;</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，</span></span><br><span class="line"><span class="comment">// 这条路径上所有节点值相加等于目标的目标路径 返回List&lt;List&lt;Integer&gt;。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; findPath(TreeNode root,<span class="keyword">int</span> target)&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    getPath(root, target, result, temp);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getPath</span><span class="params">(TreeNode treeNode, <span class="keyword">int</span> target, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; temp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (treeNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    target = target - treeNode.value;</span><br><span class="line">    <span class="keyword">if</span> (treeNode.left == <span class="keyword">null</span> &amp;&amp; treeNode.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            temp.add(treeNode.value);</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));</span><br><span class="line">            temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (treeNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp.add(treeNode.value);</span><br><span class="line">            getPath(treeNode.left,target,result,temp);</span><br><span class="line">            temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (treeNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp.add(treeNode.value);</span><br><span class="line">            getPath(treeNode.right, target, result, temp);</span><br><span class="line">            temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="给定一个二叉树，它的每个结点都存放一个-0-9-的数字，每条从根到叶子节点的路径都代表一个数字。"><a href="#给定一个二叉树，它的每个结点都存放一个-0-9-的数字，每条从根到叶子节点的路径都代表一个数字。" class="headerlink" title="给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。"></a>给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。</span></span><br><span class="line">    <span class="comment">//首先找出所有的从根节点带叶子节点的所有路径</span></span><br><span class="line">    <span class="comment">//求所有路径组成的数字并求和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findPathSum</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        findPathList(treeNode, resultList, temp);</span><br><span class="line">        System.out.println(resultList.toString());</span><br><span class="line">        <span class="keyword">for</span> (List list: resultList) &#123;</span><br><span class="line">            StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                stringBuffer.append(list.get(i).toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> t = Integer.parseInt(stringBuffer.toString());</span><br><span class="line">            result += t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findPathList</span><span class="params">(TreeNode treeNode, List&lt;List&lt;Integer&gt;&gt; resultList, List&lt;Integer&gt; temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (treeNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (treeNode.left == <span class="keyword">null</span> &amp;&amp; treeNode.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp.add(treeNode.value);</span><br><span class="line">            resultList.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));</span><br><span class="line">            temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                temp.add(treeNode.value);</span><br><span class="line">                findPathList(treeNode.left, resultList, temp);</span><br><span class="line">                temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                temp.add(treeNode.value);</span><br><span class="line">                findPathList(treeNode.right, resultList, temp);</span><br><span class="line">                temp.remove(temp.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。"><a href="#将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。" class="headerlink" title="将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。"></a>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.data.treeDemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.data.TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 本题中，一个高度平衡二叉树是指一个二叉树每个节点的左右两个子树的高度差的绝对值不超过 1。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉搜索树的中序遍历就是升序排列的</span></span><br><span class="line"><span class="comment"> * 所以升序数组是树的中序遍历</span></span><br><span class="line"><span class="comment"> * 用二分法加递归就可以构建二叉树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 从定义我们知道，二叉搜索树的中序遍历为一个递增序列，给定的数组其实就是中序遍历结果</span></span><br><span class="line"><span class="comment"> * 取有序数组的中间值做根，左边部分做左树，右边部分做右树如此循环迭代去二分就可还原这棵BST树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">tranSearchTree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;-<span class="number">10</span>,-<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">createSearchTree</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算中间节点</span></span><br><span class="line">        <span class="keyword">int</span> middle = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(array[middle]);</span><br><span class="line">        root.left = createSearchTree(array, start, middle);</span><br><span class="line">        root.right = createSearchTree(array, middle, end);</span><br><span class="line">        <span class="keyword">return</span>  root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯问题</title>
    <url>/2020/06/12/%E5%9B%9E%E6%BA%AF%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="回溯问题"><a href="#回溯问题" class="headerlink" title="回溯问题"></a>回溯问题</h3><p>从网格中寻找单词</p>
<a id="more"></a>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.data.stringDemo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个二维网格和一个单词，找出该单词是否存在于网格中。</span></span><br><span class="line"><span class="comment"> * 单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。</span></span><br><span class="line"><span class="comment"> * 同一个单元格内的字母不允许被重复使用。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * board =</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *   ['A','B','C','E'],</span></span><br><span class="line"><span class="comment"> *   ['S','F','C','S'],</span></span><br><span class="line"><span class="comment"> *   ['A','D','E','E']</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 给定 word = "ABCCED", 返回 true</span></span><br><span class="line"><span class="comment"> * 给定 word = "SEE", 返回 true</span></span><br><span class="line"><span class="comment"> * 给定 word = "ABCB", 返回 false</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 思路使用递归回溯的方法</span></span><br><span class="line"><span class="comment"> * 需要定义一个二维boolean类型的数组，用来存储当前位置是否能走通</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">searchWord</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[][] array = &#123;&#123;<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'E'</span>&#125;,&#123;<span class="string">'S'</span>,<span class="string">'F'</span>,<span class="string">'C'</span>,<span class="string">'S'</span>&#125;,&#123;<span class="string">'A'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'E'</span>&#125;&#125;;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">boolean</span> result = solution.exist(array, <span class="string">"ABCCED"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[board.length][board[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word.charAt(<span class="number">0</span>) == board[i][j] &amp;&amp; backtrack2(i, j, <span class="number">0</span>, word, visited, board))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">backtrack2</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> idx, String word, <span class="keyword">boolean</span>[][] visited, <span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idx == word.length()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= board.length || i &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || j &lt; <span class="number">0</span> || board[i][j] != word.charAt(idx) || visited[i][j])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向下找</span></span><br><span class="line">        <span class="keyword">if</span> (backtrack2(i + <span class="number">1</span>, j, idx + <span class="number">1</span>, word, visited, board)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向上找</span></span><br><span class="line">        <span class="keyword">if</span> (backtrack2(i - <span class="number">1</span>, j, idx + <span class="number">1</span>, word, visited, board)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向右</span></span><br><span class="line">        <span class="keyword">if</span> (backtrack2(i, j + <span class="number">1</span>, idx + <span class="number">1</span>, word, visited, board)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向左</span></span><br><span class="line">        <span class="keyword">if</span> (backtrack2(i, j - <span class="number">1</span>, idx + <span class="number">1</span>, word, visited, board)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        visited[i][j] = <span class="keyword">false</span>; <span class="comment">// 回溯</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>递归回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>链表操作</title>
    <url>/2020/06/12/%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="链表操作"><a href="#链表操作" class="headerlink" title="链表操作"></a>链表操作</h2><h3 id="判断单链表是否有环"><a href="#判断单链表是否有环" class="headerlink" title="判断单链表是否有环"></a>判断单链表是否有环</h3><p>第一种方式，我们可以使用快慢指针的形式</p>
<a id="more"></a>



<pre><code>* 开始，快慢指针都指向头结点，快指针每次都两步，慢指针每次走一步
     * 如果存在环，则在运行中，无论运行了几圈，快慢指针肯定会相等，也就是指向同一个位置
     * 除此之外，还有另一种解题方式</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.data.LinkListDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断一个单链表中是否有环</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一种方式，我们可以使用快慢指针的形式</span></span><br><span class="line"><span class="comment">     * 开始，快慢指针都指向头结点，快指针每次都两步，慢指针每次走一步</span></span><br><span class="line"><span class="comment">     * 如果存在环，则在运行中，无论运行了几圈，快慢指针肯定会相等，也就是指向同一个位置</span></span><br><span class="line"><span class="comment">     * 除此之外，还有另一种解题方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode first = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span> (first != <span class="keyword">null</span> &amp;&amp; first.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            first = first.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (first == slow) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以使用一个set集合，存放遍历过的节点，如果下次遍历时存在同样的节点，则证明该单链表中存在环</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle2</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        Set&lt;ListNode&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(temp))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断链表有环，并找出入环的第一个节点"><a href="#判断链表有环，并找出入环的第一个节点" class="headerlink" title="判断链表有环，并找出入环的第一个节点"></a>判断链表有环，并找出入环的第一个节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//判断链表有环，并找出入环的第一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</span></span><br><span class="line"><span class="comment">     * 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。</span></span><br><span class="line"><span class="comment">     * 如果 pos 是 -1，则在该链表中没有环。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 输入：head = [3,2,0,-4], pos = 1</span></span><br><span class="line"><span class="comment">     * 输出：tail connects to node index 1</span></span><br><span class="line"><span class="comment">     * 解释：链表中有一个环，其尾部连接到第二个节点。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 主要解题思路</span></span><br><span class="line"><span class="comment">     * 1，首先是使用快慢指针找出链表中存在环的指针位置</span></span><br><span class="line"><span class="comment">     * 2，指针执行当前快慢指针相交的位置  cur</span></span><br><span class="line"><span class="comment">     * 3. 另一个mo指针从头结点开始向后遍历  mo</span></span><br><span class="line"><span class="comment">     * 4. 当 cur与mo相等，即当前位置为入环的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">hasCyclePlace</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ListNode first = listNode;</span><br><span class="line">        ListNode slow = listNode;</span><br><span class="line">        ListNode cur = <span class="keyword">null</span>;</span><br><span class="line">        ListNode mo = listNode;</span><br><span class="line">        <span class="keyword">while</span> (first != <span class="keyword">null</span> &amp;&amp; first.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = first.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (first == slow) &#123;</span><br><span class="line">                cur = slow;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (cur != mo) &#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                mo = mo.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="判断一个数组是不是二叉树的后序遍历"><a href="#判断一个数组是不是二叉树的后序遍历" class="headerlink" title="判断一个数组是不是二叉树的后序遍历"></a>判断一个数组是不是二叉树的后序遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">verifySquenceBST</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[]  array = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> b = verfySequenceofBST(array, array.length);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给定一个数组，判断这个数组是不是二叉搜索树的后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verfySequenceofBST</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || length &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> root = array[length - <span class="number">1</span>];<span class="comment">//树的根节点</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] &gt; root) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; length-<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &lt; root) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> left =<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            left = verfySequenceofBST(array, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> right = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i&lt;length-<span class="number">1</span>)&#123;</span><br><span class="line">            right = verfySequenceofBST(array, length - i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left&amp;&amp;right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.data.sheji;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance singleInstance = <span class="keyword">new</span> SingleInstance();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SingleInstance <span class="title">getSingleInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.data.sheji;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance2 singleInstance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SingleInstance2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SingleInstance2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双重验证"><a href="#双重验证" class="headerlink" title="双重验证"></a>双重验证</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.data.sheji;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双重验证</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance3 singleInstance3 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SingleInstance3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance3 <span class="title">getInstance3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleInstance3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingleInstance3<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleInstance3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> SingleInstance3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleInstance3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleInastance4</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SingleInastance4</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SingleInastance4 singleInastance = <span class="keyword">new</span> SingleInastance4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInastance4 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingleHolder.singleInastance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/06/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h5 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式"></a>单例模式</h5><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><a id="more"></a>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.data.sheji;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance singleInstance = <span class="keyword">new</span> SingleInstance();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SingleInstance <span class="title">getSingleInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.data.sheji;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance2 singleInstance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SingleInstance2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SingleInstance2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双重验证"><a href="#双重验证" class="headerlink" title="双重验证"></a>双重验证</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.data.sheji;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双重验证</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance3 singleInstance3 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SingleInstance3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance3 <span class="title">getInstance3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleInstance3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingleInstance3<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleInstance3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> SingleInstance3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleInstance3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleInastance4</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SingleInastance4</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SingleInastance4 singleInastance = <span class="keyword">new</span> SingleInastance4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInastance4 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingleHolder.singleInastance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>作业帮面试整理</title>
    <url>/2020/06/09/%E4%BD%9C%E4%B8%9A%E5%B8%AE%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2>  <a id="more"></a>



<h2 id="一面："><a href="#一面：" class="headerlink" title="一面："></a>一面：</h2><ul>
<li><p>1.自我介绍 </p>
</li>
<li><p>2.讲讲之前实习是做了什么工作 </p>
</li>
<li><p>3.项目做了什么，为什么做这个项目，有什么困难，如何解决，结果是什么。 </p>
</li>
<li><p>看你项目中遇到的困难在缓存和数据库，那你项目的后端框架用的是什么，数据库的底层数据结构是什么，磁盘的数据结构是什么？ </p>
</li>
<li><p>. B+树的结构是什么，和B树有什么区别，红黑树结构是什么？</p>
</li>
<li><p>红黑树的应用有哪些？AVL树是什么，平衡二叉树的条件是什么？ </p>
</li>
</ul>
<h4 id="一、B树的应用"><a href="#一、B树的应用" class="headerlink" title="一、B树的应用"></a>一、B树的应用</h4><h3 id="1、B树大量应用在数据库和文件系统当中。"><a href="#1、B树大量应用在数据库和文件系统当中。" class="headerlink" title="1、B树大量应用在数据库和文件系统当中。"></a>1、B树大量应用在数据库和文件系统当中。</h3><p>它的设计思想是，将相关数据尽量集中在一起，以便一次读取多个数据，减少硬盘操作次数。B树算法减少定位记录时所经历的中间过程，从而加快存取速度。</p>
<p>假定一个节点可以容纳100个值，那么3层的B树可以容纳100万个数据，如果换成二叉查找树，则需要20层！假定操作系统一次读取一个节点，并且根节点保留在内存中，那么B树在100万个数据中查找目标值，只需要读取两次硬盘。</p>
<p>如mongoDB数据库使用，单次查询平均快于Mysql（但侧面来看Mysql至少平均查询耗时差不多）</p>
<h4 id="二、B-树的应用"><a href="#二、B-树的应用" class="headerlink" title="二、B+树的应用"></a>二、B+树的应用</h4><p>mysql使用B+树作为索引：</p>
<p>B+树相对B树的优点：</p>
<p>①B+树的所有Data域在叶子节点，一般来说都会进行一个优化，就是将所有的叶子节点用指针串联起来，遍历叶子节点就能获取全部数据，这样就能进行区间访问了。</p>
<p>②IO一次读数据是从磁盘上读的，磁盘容量是固定的，取数据量大小是固定的，非叶子节点不存储数据，节点小，磁盘IO次数就少。</p>
<p>InnoDB索引和MyISAM最大的区别是它只有一个数据文件，在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点数据域保存了完整的数据记录。所以我们又把它的主索引叫做聚集索引。而它的辅助索引和MyISAM也会有所不同，它的辅助索引都是将主键作为数据域。所以，这样当我们查找的时候通过辅助索引要先找到主键，然后通过主索引再找到对于的主键，得到信息。</p>
<p>MyISAM表索引在处理文本索引时更具优势，而INNODB表索引在其它类型上更具效率优势，同时MySQL高并发需要事务场景时，只能使用INNODB表</p>
<h3 id="三、红黑树"><a href="#三、红黑树" class="headerlink" title="三、红黑树"></a>三、红黑树</h3><p>红黑树往往出现由于树的深度过大而造成磁盘IO读写过于频繁，进而导致效率低下的情况在数据较小，可以完全放到内存中时，红黑树的时间复杂度比B树低。</p>
<p>如linux中进程的调度用的是红黑树。</p>
<p>反之，数据量较大，外存中占主要部分时，B树因其读磁盘次数少，而具有更快的速度。</p>
<h3 id="哈希表用什么解决冲突的？"><a href="#哈希表用什么解决冲突的？" class="headerlink" title="哈希表用什么解决冲突的？"></a>哈希表用什么解决冲突的？</h3><p>拉链法</p>
<ol start="8">
<li><ul>
<li>拉链法解决冲突可以，但是如果链表变长，如何优化呢？</li>
</ul>
</li>
</ol>
<p>HashMap采用位桶+链表+红黑树实现，当链表长度超过阈值（8）,时，将链表转换为红黑树，这样大大减少了查找时间。</p>
<p>一直到JDK7为止，HashMap的结构都是这么简单，基于一个数组以及多个链表的实现，hash值冲突的时候，就将对应节点以链表的形式存储。</p>
<p>这样子的HashMap性能上就抱有一定疑问，如果说成百上千个节点在hash时发生碰撞，存储一个链表中，那么如果要查找其中一个节点，那就不可避免的花费O(N)的查找时间，这将是多么大的性能损失。这个问题终于在JDK8中得到了解决。再最坏的情况下，链表查找的时间复杂度为O(n),而红黑树一直是O(logn),这样会提高HashMap的效率。</p>
<h2 id="如果优化为树结构，数据量依旧很大，如何进一步优化？"><a href="#如果优化为树结构，数据量依旧很大，如何进一步优化？" class="headerlink" title="如果优化为树结构，数据量依旧很大，如何进一步优化？"></a>如果优化为树结构，数据量依旧很大，如何进一步优化？</h2><h3 id="10-数据库读写分离机制，如何做分库分表的？用的什么中间件去分库分表？"><a href="#10-数据库读写分离机制，如何做分库分表的？用的什么中间件去分库分表？" class="headerlink" title="10 数据库读写分离机制，如何做分库分表的？用的什么中间件去分库分表？"></a>10 数据库读写分离机制，如何做分库分表的？用的什么中间件去分库分表？</h3><p>11.如何确保数据库的稳定性 </p>
<p>12.算法：链表反转 </p>
<p>13.有什么要问我的？</p>
<h3 id="1-自我介绍"><a href="#1-自我介绍" class="headerlink" title="1.自我介绍"></a>1.自我介绍</h3><h3 id="2-做过哪些项目，给自己印象最深的项目是什么"><a href="#2-做过哪些项目，给自己印象最深的项目是什么" class="headerlink" title="2.做过哪些项目，给自己印象最深的项目是什么"></a>2.做过哪些项目，给自己印象最深的项目是什么</h3><h3 id="3-用redis做二级缓存的时候如何确保高并发数据的一致性，如果有一张订单表，我要你找到对应用户所拥有的订单，怎么找？"><a href="#3-用redis做二级缓存的时候如何确保高并发数据的一致性，如果有一张订单表，我要你找到对应用户所拥有的订单，怎么找？" class="headerlink" title="3.用redis做二级缓存的时候如何确保高并发数据的一致性，如果有一张订单表，我要你找到对应用户所拥有的订单，怎么找？"></a>3.用redis做二级缓存的时候如何确保高并发数据的一致性，如果有一张订单表，我要你找到对应用户所拥有的订单，怎么找？</h3><p>数据库的几种事务隔离机制是什么，有哪些？有什么用？ </p>
<p>mysql支持事务的常用引擎是InnoDB</p>
<p>第一种：读未提交（read uncommitted）</p>
<p>　　　　　　第一个事务未提交更新的数据，第二个事务可以读到，这是读未提                交。</p>
<p>　　　　　　第一个事务未提交更新的数据回滚，第二个事务读到回滚的数据，                这是脏读。故读未提交，可能会出现脏读。</p>
<p>第二种：读已提交（read committed），也称不可重复读</p>
<p>　　　　　　第一个事务未提交更新的数据，第二个事务读不到；</p>
<p>　　　　　　第一个事务提交更新的数据，第二个事务可以读到；这是读已提交。</p>
<p>　　　　　　第一个事务提交更新小明同学年龄12岁，第二个事务读到小明12                岁；</p>
<p>第三个事务再次提交更新小明同学年龄14岁，第二个事务再读到小明14岁；这是不可重复读（同一个事务内读取的数据结果不一致）。</p>
<p>　　　　　　故读已提交，会出现不可重复读（同一个事务内读取的数据结果不            一致），不可重复读也会造成幻读（同一个事务内读取的数据结果            不一致）。</p>
<p>第三种：可重复读（repeatable read），mysql默认事务隔离级别</p>
<p>第一个事务提交更新小明同学年龄12岁，第二个事务读到小明12岁；</p>
<p>第三个事务再次提交更新小明同学年龄14岁，第二个事务再读到小明12岁；这是可重复读（同一个事务内读取的数据结果一致）。</p>
<p>第四个事务提交插入同学小马数据记录，第二个事务再读不仅读到小明12    岁数据，还会读到小马同学数据，这是幻读。</p>
<p>故可重复读，会出现幻读（同一个事务内读取的数据结果不一致）。</p>
<p>第四种：串行化（serializable）</p>
<p>隔离级别最高，解决了脏读、不可重复无、幻读问题。</p>
<p>　　　　　　同一个事务内，不管读取多少次，结果集永远一致。</p>
<h3 id="Str1-“a”-str2-new-string-“a”-区别，虚拟机内存空间上如何体现这两个区别，这区别具体在开发中会造成什么问题，如何解决？"><a href="#Str1-“a”-str2-new-string-“a”-区别，虚拟机内存空间上如何体现这两个区别，这区别具体在开发中会造成什么问题，如何解决？" class="headerlink" title="Str1=“a” str2=new string(“a”)区别，虚拟机内存空间上如何体现这两个区别，这区别具体在开发中会造成什么问题，如何解决？"></a>Str1=“a” str2=new string(“a”)区别，虚拟机内存空间上如何体现这两个区别，这区别具体在开发中会造成什么问题，如何解决？</h3><ul>
<li><p>==:比较引用类型比较的是地址值是否相同</p>
</li>
<li><p>equals:比较引用类型默认也是比较地址值是否相同，注意:<strong><em>\</em>String类重写了equals()方法**</strong>，比较的是内容是否相同。</p>
</li>
</ul>
<p>String A = “ABC”;内存会去查找永久代(常量池) ，如果没有的话，在永久代中中开辟一块儿内存空间，把地址付给栈指针，如果已经有了”ABC”的内存，直接把地址赋给栈指针；****</p>
<p><strong><em>\</em>而String str = new String(“a”);是根据”a”这个String对象再次构造一个String对象;在堆中从新new一块儿内存，把指针赋给栈，**</strong></p>
<p>堆  栈  变量的存放位置</p>
<h3 id="Java和C-在内存处理上有什么区别？虚拟机的常用垃圾回收机制有什么？"><a href="#Java和C-在内存处理上有什么区别？虚拟机的常用垃圾回收机制有什么？" class="headerlink" title="Java和C++在内存处理上有什么区别？虚拟机的常用垃圾回收机制有什么？"></a>Java和C++在内存处理上有什么区别？虚拟机的常用垃圾回收机制有什么？</h3><h3 id="什么时候会发生OOM错误（内存溢出错误）"><a href="#什么时候会发生OOM错误（内存溢出错误）" class="headerlink" title="什么时候会发生OOM错误（内存溢出错误）"></a>什么时候会发生OOM错误（内存溢出错误）</h3><p>栈溢出，堆溢出</p>
<p>栈是线程私有的，他的生命周期与线程相同，每个方法在执行的时候都会创建一个栈帧，用来存储局部变量表，操作数栈，动态链接，方法出口灯信息。局部变量表又包含基本数据类型，对象引用类型（局部变量表编译器完成，运行期间不会变化）</p>
<p>所以我们可以理解为栈溢出就是方法执行是创建的栈帧超过了栈的深度。那么最有可能的就是方法递归调用产生这种结果。</p>
<p>heap space表示堆空间，堆中主要存储的是对象。如果不断的new对象则会导致堆中的空间溢出</p>
<h3 id="Redis的基本数据结构是什么？"><a href="#Redis的基本数据结构是什么？" class="headerlink" title="Redis的基本数据结构是什么？"></a>Redis的基本数据结构是什么？</h3><h3 id="redis如何做持久化的？"><a href="#redis如何做持久化的？" class="headerlink" title="redis如何做持久化的？"></a>redis如何做持久化的？</h3><h3 id="给你一个场景，设计秒杀系统，假设有10件商品，-先用redis去get数量，数量-1，然后用set更新redis的数据，如果get数据为0就表示商品卖完了，这种情况安全么，有问题的话如何解决"><a href="#给你一个场景，设计秒杀系统，假设有10件商品，-先用redis去get数量，数量-1，然后用set更新redis的数据，如果get数据为0就表示商品卖完了，这种情况安全么，有问题的话如何解决" class="headerlink" title="给你一个场景，设计秒杀系统，假设有10件商品， 先用redis去get数量，数量-1，然后用set更新redis的数据，如果get数据为0就表示商品卖完了，这种情况安全么，有问题的话如何解决"></a>给你一个场景，设计秒杀系统，假设有10件商品， 先用redis去get数量，数量-1，然后用set更新redis的数据，如果get数据为0就表示商品卖完了，这种情况安全么，有问题的话如何解决</h3><h3 id="redis加锁上锁的命令是什么"><a href="#redis加锁上锁的命令是什么" class="headerlink" title="redis加锁上锁的命令是什么"></a>redis加锁上锁的命令是什么</h3><h4 id="Linux-awk-grep命令是什么，如何用正则表达式匹配AxxxxAxxx？（正则还是用的比较少-生疏了。。。）"><a href="#Linux-awk-grep命令是什么，如何用正则表达式匹配AxxxxAxxx？（正则还是用的比较少-生疏了。。。）" class="headerlink" title="Linux awk grep命令是什么，如何用正则表达式匹配AxxxxAxxx？（正则还是用的比较少 生疏了。。。）"></a>Linux awk grep命令是什么，如何用正则表达式匹配AxxxxAxxx？（正则还是用的比较少 生疏了。。。）</h4><h3 id="讲一下在浏览器输入URL之后到浏览器出现界面的全过程，系统后面用了哪些协议"><a href="#讲一下在浏览器输入URL之后到浏览器出现界面的全过程，系统后面用了哪些协议" class="headerlink" title="讲一下在浏览器输入URL之后到浏览器出现界面的全过程，系统后面用了哪些协议"></a>讲一下在浏览器输入URL之后到浏览器出现界面的全过程，系统后面用了哪些协议</h3><ul>
<li><p>首先进行域名解析，域名解析具体过程讲一下：</p>
</li>
<li><p>浏览器搜索自己的DNS缓存，缓存中维护一张域名与IP地址的对应表；操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</p>
</li>
<li><p>如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</p>
</li>
<li><p>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，则操作系统将域名发送至本地域名服务器（递归查询方式），本地域名服务器查询自己的DNS缓存，查找成功则返回结果，否则，通过以下方式迭代查找：</p>
</li>
<li><p>本地域名服务器向根域名服务器发起请求，根域名服务器返回com域的顶级域名服务器的地址；</p>
</li>
<li><p>本地域名服务器向com域的顶级域名服务器发起请求，返回权限域名服务器地址；</p>
</li>
<li><p>本地域名服务器向权限域名服务器发起请求，得到IP地址；</p>
</li>
</ul>
<ul>
<li><p>本地域名服务器将得到的IP地址返回给操作系统，同时自己将IP地址缓存起来；</p>
</li>
<li><p>操作系统将IP地址返回给浏览器，同时自己也将IP地址缓存起来；</p>
</li>
<li><p>至此，浏览器已经得到了域名对应的IP地址。</p>
</li>
</ul>
<ol start="2">
<li>浏览器发起HTTP请求；</li>
</ol>
<ol start="3">
<li><p>接下来到了传输层，选择传输协议，TCP或者UDP，TCP是可靠的传输控制协议，对HTTP请求进行封装，加入了端口号等信息–三次握手建立连接–四次挥手断开连接；</p>
</li>
<li><p>然后到了网络层，通过IP协议将IP地址封装为IP数据报；然后此时会用到ARP协议，主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址，找到目的MAC地址；</p>
</li>
<li><p>接下来到了数据链路层，把网络层交下来的IP数据报添加首部和尾部，封装为MAC帧，现在根据目的mac开始建立TCP连接，三次握手，接收端在收到物理层上交的比特流后，根据首尾的标记，识别帧的开始和结束，将中间的数据部分上交给网络层，然后层层向上传递到应用层；</p>
</li>
<li><p>服务器响应请求并请求客户端要的资源，传回给客户端；</p>
</li>
<li><p>断开TCP连接，浏览器对页面进行渲染呈现给客户端。</p>
</li>
</ol>
<h4 id="如果你有很多IP地址，如何找到出现次数最多的前三个IP地址？（hashMap-heap）"><a href="#如果你有很多IP地址，如何找到出现次数最多的前三个IP地址？（hashMap-heap）" class="headerlink" title="如果你有很多IP地址，如何找到出现次数最多的前三个IP地址？（hashMap + heap）"></a>如果你有很多IP地址，如何找到出现次数最多的前三个IP地址？（hashMap + heap）</h4><ul>
<li><p>1.直接排序</p>
</li>
<li><p>2.使用hashTable  我们的算法就有了：维护一个Key为Query字串，Value为该Query出现次数的HashTable，每次读取一个Query，如果该字串不在Table中，那么加入该字串，并且将Value值设为1；如果该字串在Table中，那么将该字串的计数加一即可。最终我们在O(N)的时间复杂度内完成了对该海量数据的处理。</p>
</li>
<li><p>本方法相比算法1：在时间复杂度上提高了一个数量级，为O（N），但不仅仅是时间复杂度上的优化，该方法只需要IO数据文件一次，而算法1的IO次数较多的，因此该算法2比算法1在工程上有更好的可操作性。</p>
</li>
</ul>
<h3 id="如果你有一个100G的IP地址文件，你的机器只有5G存储空间，如何找到出现次数最多的前三IP地址？"><a href="#如果你有一个100G的IP地址文件，你的机器只有5G存储空间，如何找到出现次数最多的前三IP地址？" class="headerlink" title="如果你有一个100G的IP地址文件，你的机器只有5G存储空间，如何找到出现次数最多的前三IP地址？"></a>如果你有一个100G的IP地址文件，你的机器只有5G存储空间，如何找到出现次数最多的前三IP地址？</h3><h3 id="如果一张订单表特别大，你会如何处理这个表格，如何优化它？"><a href="#如果一张订单表特别大，你会如何处理这个表格，如何优化它？" class="headerlink" title="如果一张订单表特别大，你会如何处理这个表格，如何优化它？"></a>如果一张订单表特别大，你会如何处理这个表格，如何优化它？</h3><h3 id="我们一般都是把历史数据定期转存其他表（一样的表名后加年月例如TABLE201205）归档"><a href="#我们一般都是把历史数据定期转存其他表（一样的表名后加年月例如TABLE201205）归档" class="headerlink" title="我们一般都是把历史数据定期转存其他表（一样的表名后加年月例如TABLE201205）归档~"></a>我们一般都是把历史数据定期转存其他表（一样的表名后加年月例如TABLE201205）归档~</h3><p>这样该表本年度的查询的压力也小点（90%查询量集中在本年度）,即使查询历史数据也不影响性能，强力推荐！</p>
<h4 id="算法题：字符串切分-反转"><a href="#算法题：字符串切分-反转" class="headerlink" title="算法题：字符串切分+反转"></a>算法题：字符串切分+反转</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reverseString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// i am a student</span></span><br><span class="line">        String string = <span class="string">"i am a student"</span>;</span><br><span class="line">        String s = reverseDemo(string);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseDemo</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">        String[] strArr = string.split(<span class="string">" "</span>);</span><br><span class="line">        String[] resultArr = <span class="keyword">new</span> String[strArr.length];</span><br><span class="line"></span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strArr.length;i++)&#123;</span><br><span class="line">            resultArr[i] = strArr[strArr.length - i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (i != strArr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                stringBuffer.append(resultArr[i]);</span><br><span class="line">                stringBuffer.append(<span class="string">" "</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                stringBuffer.append(resultArr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="16-盲人有10双袜子，两双黑的，8双白的，如何在没人帮助下找出黑的（在太阳下晒一晒黑色更吸热）"><a href="#16-盲人有10双袜子，两双黑的，8双白的，如何在没人帮助下找出黑的（在太阳下晒一晒黑色更吸热）" class="headerlink" title="16.盲人有10双袜子，两双黑的，8双白的，如何在没人帮助下找出黑的（在太阳下晒一晒黑色更吸热）"></a>16.盲人有10双袜子，两双黑的，8双白的，如何在没人帮助下找出黑的（在太阳下晒一晒黑色更吸热）</h3><h3 id="17-你有什么问题想问我的？"><a href="#17-你有什么问题想问我的？" class="headerlink" title="17.你有什么问题想问我的？"></a>17.你有什么问题想问我的？</h3><h3 id="MYSQL日志分为几种"><a href="#MYSQL日志分为几种" class="headerlink" title="MYSQL日志分为几种"></a>MYSQL日志分为几种</h3><p><a href="https://blog.csdn.net/xiamiflying/article/details/80960598" target="_blank" rel="noopener">https://blog.csdn.net/xiamiflying/article/details/80960598</a></p>
<p>如何保证回滚</p>
<p>数据库中事务到底是mvcc回滚还是日志回滚</p>
<h3 id="socket有几种状态"><a href="#socket有几种状态" class="headerlink" title="socket有几种状态"></a>socket有几种状态</h3><h5 id="Socket-11种状态"><a href="#Socket-11种状态" class="headerlink" title="Socket 11种状态"></a>Socket 11种状态</h5><ul>
<li>1、SOCKET状态介绍</li>
</ul>
<p>socket本质是编程接口(API)，对TCP/IP的封装，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口;HTTP是轿车，提供了封装或者显示数据的具体形式;Socket是发动机，提供了网络通信的能力。</p>
<p>  1、客户端独有的：（1）SYN_SENT （2）FIN_WAIT1 （3）FIN_WAIT2 （4）CLOSING （5）TIME_WAIT 。</p>
<p>  2、服务器独有的：（1）LISTEN （2）SYN_RCVD （3）CLOSE_WAIT （4）LAST_ACK 。</p>
<p>  3、共有的：（1）CLOSED （2）ESTABLISHED 。</p>
<h5 id="mysql更新了数据日志文件有什么改变"><a href="#mysql更新了数据日志文件有什么改变" class="headerlink" title="mysql更新了数据日志文件有什么改变"></a>mysql更新了数据日志文件有什么改变</h5><h5 id="它的意思是服务器崩了，你访问服务器应该是什么样"><a href="#它的意思是服务器崩了，你访问服务器应该是什么样" class="headerlink" title="它的意思是服务器崩了，你访问服务器应该是什么样"></a>它的意思是服务器崩了，你访问服务器应该是什么样</h5><p>服务器崩了发送什么错误码，崩了情况下500是谁发的<br>开发环境和生产环境不一样，配置环境应该有什么不同配置数据库<br>ACID<br>死锁以及解决措施</p>
<p>rabbitmq中各种模式<br>堆栈区别<br>GC回收算法<br>点击按钮这个过程详解一下</p>
<h3 id="算法题："><a href="#算法题：" class="headerlink" title="算法题："></a>算法题：</h3><p>长字符串相加<br>nums[] = {1,-1,0,2,-2,1,3} 找到所有不重复a + b + c = 0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">暴力解法，而且重复</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zifuJia</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,-<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        List list = stringSum(array);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">stringSum</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(array);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; array[i] == array[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; array.length; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (array[i] + array[j] + array[k] == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                       list.add(Arrays.asList(array[i], array[j], array[k]));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size()-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list.get(i).equals(list.get(i+<span class="number">1</span>)))&#123;</span><br><span class="line">                list.remove(list.get(i + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="堆排序："><a href="#堆排序：" class="headerlink" title="堆排序："></a>堆排序：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">heapSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">12</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">18</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">16</span>&#125;;</span><br><span class="line">        heap_sort(array, array.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.print(array[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数说明   arr 表示待构建数组</span></span><br><span class="line"><span class="comment">     * n：表示堆的元素个数</span></span><br><span class="line"><span class="comment">     * i: 表示每一个小堆的父节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heap_step</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c1 = <span class="number">2</span> * i + <span class="number">1</span>;    <span class="comment">//i结点的左孩子</span></span><br><span class="line">        <span class="keyword">int</span> c2 = <span class="number">2</span> * i + <span class="number">2</span>;   <span class="comment">//i结点的右孩子</span></span><br><span class="line">        <span class="keyword">int</span> max = i;   <span class="comment">//这三个元素最大值的下标指向</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义递归出口</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c1 &lt; n &amp;&amp; arr[c1] &gt; arr[max])&#123;</span><br><span class="line">            max = c1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c2 &lt; n &amp;&amp; arr[c2] &gt; arr[max]) &#123;</span><br><span class="line">            max = c2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (max != i) &#123;</span><br><span class="line">            swap(arr, max, i);<span class="comment">//交换两个位置的元素</span></span><br><span class="line">            heap_step(arr, n, max);<span class="comment">//继续进行递归判断，确保每一次构建完任意一个小堆都是大顶堆</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们需要对每一个非叶子结点以及他们的左右孩子构建大顶堆</span></span><br><span class="line"><span class="comment">     * 从最后一个非叶子结点开始</span></span><br><span class="line"><span class="comment">     * 最后一个叶子结点数组下标为：  last_node = arr.length-1</span></span><br><span class="line"><span class="comment">     * 则最后一个非叶子结点为   last_parent = (last_node-1)/2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build_heap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> last_node = n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> last_parent = (last_node-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//对每一个非叶子结点，依次从后向前遍历，每一个都做heap_step的大顶堆构建</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = last_parent; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            heap_step(arr,n,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建完大顶堆之后，需要进行大顶堆的第一个元素与最后元素进行交换</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        build_heap(arr, arr.length);   <span class="comment">//把数组先构造成为一个大顶堆</span></span><br><span class="line">        <span class="comment">// 这个时候数组已经是一个大顶堆了</span></span><br><span class="line">        <span class="comment">//交换数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            swap(arr, i, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                因为这个时候完全二叉树已经是一个大顶堆了，</span></span><br><span class="line"><span class="comment">                所以我们只需要使用heap_step交换最顶层的三个数字就可以,也就是最根节点以及它们的左右孩子节点</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            heap_step(arr, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个元素交换位置的函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序;"></a>快速排序;</h5><p>问了项目，单点登录实现 </p>
<p>如何解决分布式session </p>
<p>redis集群怎么做的，主从复制流程 </p>
<p>RDB和AOF，如果AOF文件很大怎么办，AOF重做，还是特别大怎么办，分片复制 </p>
<h4 id="TCP三次握手四次挥手"><a href="#TCP三次握手四次挥手" class="headerlink" title="TCP三次握手四次挥手"></a>TCP三次握手四次挥手</h4><p>三次挥手行不行，为什么 </p>
<h4 id="状态码301与302的区别"><a href="#状态码301与302的区别" class="headerlink" title="状态码301与302的区别"></a>状态码301与302的区别</h4><p>详细来说，301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了）</p>
<p>301 redirect: 301 代表永久性转移(Permanently Moved)</p>
<p>302 redirect: 302 代表暂时性转移(Temporarily Moved )</p>
<h4 id="Linux找到文件夹下包含某个字符的所有记录"><a href="#Linux找到文件夹下包含某个字符的所有记录" class="headerlink" title="Linux找到文件夹下包含某个字符的所有记录"></a>Linux找到文件夹下包含某个字符的所有记录</h4><p>grep -r message ./</p>
<p>示例解释：在当前目录下递归查找含有字符串message的文件</p>
<p>-r 是递归查找</p>
<p>-n 是显示行号</p>
<p>-R 查找所有文件包含子目录</p>
<p>-i 忽略大小写</p>
<h3 id="分页查询页数很大效率低怎么办，join-连接主键优化"><a href="#分页查询页数很大效率低怎么办，join-连接主键优化" class="headerlink" title="分页查询页数很大效率低怎么办，join 连接主键优化"></a>分页查询页数很大效率低怎么办，join 连接主键优化</h3><p>select * from orders_history where type=8 limit 100000,100;</p>
<p><strong><em>\</em>这种分页查询方式会从数据库第一条记录开始扫描，所以越往后，查询速度越慢，而且查询的数据越多，也会拖慢总查询速度。**</strong></p>
<p><strong>(1)</strong> <strong><em>\</em>使用子查询优化–**</strong>这种方式先定位偏移位置的 id，然后往后查询，这种方式适用于 id 递增的情况。</p>
<p><strong>(2)</strong> <strong><em>\</em>使用 id 限定优化*****</strong>*—****这种方式假设数据表的id是连续递增的，则我们根据查询的页数和查询的记录数可以算出查询的id的范围，可以使用 id between and 来查询</p>
<p>(3) 当然还可以使用 in 的方式来进行查询，这种方式经常用在多表关联的时候进行查询，使用其他表查询的id集合，来进行查询</p>
<h3 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h3><p>聚簇索引的叶子节点就是数据节点，而非聚簇索引的叶子节点仍然是索引节点，只不过有指向对应数据块的指针。</p>
<h3 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h3><p>(1) 就是select的数据列只用从索引中就能够取得，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。</p>
<p>(2) 索引是高效找到行的一个方法，当能通过检索索引就可以读取想要的数据，那就不需要再到数据表中读取行了。如果一个索引包含了（或覆盖了）满足查询语句中字段与条件的数据就叫做覆盖索引。</p>
<p>一个包含查询所需字段的索引称为“覆盖索引”</p>
<p>MySQL只需要通过索引就可以返回查询所需要的数据，而不必在查到索引之后进行回表操作，减少IO，提高了效率</p>
<h3 id="算法：下一个排列"><a href="#算法：下一个排列" class="headerlink" title="算法：下一个排列"></a>算法：下一个排列</h3><p>solr怎么用的，zookeeper怎么用的 </p>
<p>如何保证solr与数据库一致性 </p>
<h3 id="DNS递归和迭代"><a href="#DNS递归和迭代" class="headerlink" title="DNS递归和迭代"></a>DNS递归和迭代</h3><p>一、主机向本地域名服务器的查询一般都是采用递归查询。</p>
<p>​    所谓递归查询就是：如果主机所询问的本地域名服务器不知道被查询的域名的IP地址，那么本地域名服务器就以DNS客户的身份，</p>
<p>​    向其它根域名服务器继续发出查询请求报文(即替主机继续查询)，而不是让主机自己进行下一步查询。</p>
<p>​    因此，递归查询返回的查询结果或者是所要查询的IP地址，或者是报错，表示无法查询到所需的IP地址。</p>
<h4 id="二、本地域名服务器向根域名服务器的查询的迭代查询。"><a href="#二、本地域名服务器向根域名服务器的查询的迭代查询。" class="headerlink" title="二、本地域名服务器向根域名服务器的查询的迭代查询。"></a>二、本地域名服务器向根域名服务器的查询的迭代查询。</h4><p>​    迭代查询的特点：当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地服务器：“你下一步应当向哪一个域名服务器进行查询”。</p>
<p>​    然后让本地服务器进行后续的查询。根域名服务器通常是把自己知道的顶级域名服务器的IP地址告诉本地域名服务器，让本地域名服务器再向顶级域名服务器查询。</p>
<p>​    顶级域名服务器在收到本地域名服务器的查询请求后，要么给出所要查询的IP地址，要么告诉本地服务器下一步应当向哪一个权限域名服务器进行查询。</p>
<p>​    最后，知道了所要解析的IP地址或报错，然后把这个结果返回给发起查询的主机</p>
<h2 id="CAS原理，ABA问题，解决方法"><a href="#CAS原理，ABA问题，解决方法" class="headerlink" title="CAS原理，ABA问题，解决方法"></a>CAS原理，ABA问题，解决方法</h2><p>volatile只能保证可见性，不能保证原子性。</p>
<p>但原子类（AtomicInteger等可以保证原子性），原子类利用volatile+CAS来保证原子性</p>
<p>CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>
<h4 id="CAS原理"><a href="#CAS原理" class="headerlink" title="CAS原理"></a>CAS原理</h4><p>独占锁是一种悲观锁，synchronized就是一种独占锁，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。而另一个更加有效的锁就是乐观锁。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁用到的机制就是CAS，Compare and Swap。</p>
<p>CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。 如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值 。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该 位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前 值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。</p>
<h3 id="CAS存在的问题"><a href="#CAS存在的问题" class="headerlink" title="CAS存在的问题"></a>CAS存在的问题</h3><h5 id="CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作"><a href="#CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作" class="headerlink" title="CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作"></a>CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作</h5><ol>
<li>ABA问题。因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。</li>
</ol>
<p>从Java1.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法作用是首先检查当前引用是否等于预期引用，并且当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p>
<ol start="2">
<li>循环时间长开销大。自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率</li>
</ol>
<ol start="3">
<li>只能保证一个共享变量的原子操作。当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁，或者有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如有两个共享变量i＝2,j=a，合并一下ij=2a，然后用CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</li>
</ol>
<h3 id="Dubbo原理"><a href="#Dubbo原理" class="headerlink" title="Dubbo原理"></a>Dubbo原理</h3><h4 id="注册中心宕机怎么办"><a href="#注册中心宕机怎么办" class="headerlink" title="注册中心宕机怎么办"></a>注册中心宕机怎么办</h4><h3 id="RPC分为哪几部分"><a href="#RPC分为哪几部分" class="headerlink" title="RPC分为哪几部分"></a>RPC分为哪几部分</h3><h4 id="Linux常用命令，让我按要求查日志，就是grep，cut，啥的"><a href="#Linux常用命令，让我按要求查日志，就是grep，cut，啥的" class="headerlink" title="Linux常用命令，让我按要求查日志，就是grep，cut，啥的"></a>Linux常用命令，让我按要求查日志，就是grep，cut，啥的</h4><p>cat 查看文件  cat 文件名 ——一次显示整个文件的内容</p>
<p>将几个文件合并为一个文件</p>
<p>$cat file1 file2 &gt; file</p>
<p>grep 搜索</p>
<p>用于过滤/搜索的特定字符。可使用正则表达式能多种命令配合使用，使用上十分灵活。</p>
<p>ps -ef | grep redis   查找指定进程</p>
<p>从文件中查找关键词</p>
<p>Grep “cat” 文件名</p>
<p>搜索log目录下卡号为：“4563513600036385540”,在哪个文件的具体位置及行数</p>
<p>grep -rin “4563513600036385540” log/</p>
<p>Cut 剪切文件</p>
<p>cut命令是一个选取命令，其功能是将文件中的每一行”字节” ”字符” ”字段” 进行剪切，选取我们需要的，并将这些选取好的数据输出至标准输出</p>
<p>Cut  -c 文件名  以字符为单位进行分割</p>
<p>Cut -d 文件名   默认制表符分割</p>
<p>ES倒排索引 </p>
<p>算法： </p>
<p>\1. 一个字符串数组，按长度大小，相同长度按字典顺序 </p>
<p>字符数组排序</p>
<p>public static void sortString(String[] arr) {<br>  for (int i = 0; i &lt; arr.length - 1; i++) {<br>    for (int j = i + 1; j &lt; arr.length; j++) {<br>      if (arr[i].compareTo(arr[j]) &gt; 0)  //字符串比较  arr[i].compareTo(arr[j])<br>      <strong>swap</strong>(arr, i, j);<br>    }<br>  }<br>}</p>
<p>2.EXCEL数字转字母</p>
<p>生活中你是怎样的人</p>
<p>举个例子</p>
<p>了解作业帮吗</p>
<p>说说你的缺点</p>
<p>说说你觉得经历过比较困难的时间</p>
<p>有看非技术的书吗，推荐下，</p>
<p>介绍下*本书讲了什么</p>
<p>对未来的规划</p>
<p>想来北京发展吗等等</p>
<p>一面： </p>
<h3 id="一棵m阶的B-tree-m叉树-：树中每个结点至多-个孩子，除根结点和叶子结点外，其它每个结点至少有-个孩子-B-树又叫平衡多路查找树。一棵m阶的B-树-m叉树-的特性如下："><a href="#一棵m阶的B-tree-m叉树-：树中每个结点至多-个孩子，除根结点和叶子结点外，其它每个结点至少有-个孩子-B-树又叫平衡多路查找树。一棵m阶的B-树-m叉树-的特性如下：" class="headerlink" title="一棵m阶的B-tree(m叉树)：树中每个结点至多()个孩子，除根结点和叶子结点外，其它每个结点至少有()个孩子 B 树又叫平衡多路查找树。一棵m阶的B 树 (m叉树)的特性如下："></a>一棵m阶的B-tree(m叉树)：树中每个结点至多()个孩子，除根结点和叶子结点外，其它每个结点至少有()个孩子 B 树又叫平衡多路查找树。一棵m阶的B 树 (m叉树)的特性如下：</h3><ol>
<li><p>树中每个结点最多含有m个孩子（m&gt;=2）；</p>
</li>
<li><p>除根结点和叶子结点外，其它每个结点至少有[ceil(m / 2)]个孩子（其中ceil(x)是一个取上限的函数）；</p>
</li>
<li><p>若根结点不是叶子结点，则至少有2个孩子（特殊情况：没有孩子的根结点，即根结点为叶子结点，整棵树只有一个根节点）；</p>
</li>
<li><p>所有叶子结点都出现在同一层，叶子结点不包含任何关键字信息(可以看做是外部接点或查询失败的接点，实际上这些结点不存在，指向这些结点的指针都为null)；</p>
</li>
<li><p>每个非终端结点中包含有n个关键字信息： (P1，K1，P2，K2，P3，……，Kn，Pn+1)。其中：</p>
</li>
</ol>
<p>​    a)  Ki (i=1…n)为关键字，且关键字按顺序升序排序K(i-1)&lt; Ki。 </p>
<p>​    b)  Pi为指向子树根的接点，且指针P(i)指向子树种所有结点的关键字均小于Ki，但都大于K(i-1)。 </p>
<p>​    c)  关键字的个数n必须满足： [ceil(m / 2)-1]&lt;= n &lt;= m-1。</p>
<h3 id="二进制1101-01转化成十进制"><a href="#二进制1101-01转化成十进制" class="headerlink" title="二进制1101.01转化成十进制"></a>二进制1101.01转化成十进制</h3><h2 id="快速排序的平均时间复杂度和最坏时间复杂度是多少"><a href="#快速排序的平均时间复杂度和最坏时间复杂度是多少" class="headerlink" title="快速排序的平均时间复杂度和最坏时间复杂度是多少"></a>快速排序的平均时间复杂度和最坏时间复杂度是多少</h2><h3 id="排序算法的时间复杂度"><a href="#排序算法的时间复杂度" class="headerlink" title="排序算法的时间复杂度"></a>排序算法的时间复杂度</h3><h3 id="7-lt-lt-1-amp-15运算后的结果是"><a href="#7-lt-lt-1-amp-15运算后的结果是" class="headerlink" title="(7&lt;&lt;1)&amp;15运算后的结果是"></a>(7&lt;&lt;1)&amp;15运算后的结果是</h3><h3 id="TCP-IP协议栈-说的越多越好"><a href="#TCP-IP协议栈-说的越多越好" class="headerlink" title="TCP/IP协议栈(说的越多越好)"></a>TCP/IP协议栈(说的越多越好)</h3><p>那为什么要叫TCP/IP协议栈内，这些协议和栈有什么关系呢，大家应该都知道栈是一种先进后出的数据结构，那这和TCP/IP协议有什么关系呢？我们就拿一个HTTP报文来说吧，HTTP报文属于应用层协议的报文，我们输入网址，首先会调用到DNS协议（域名协议，后面会讲到），然后把我们输入的网址转换为IP地址，这个IP地址大致就相当于现实生活中每个人的身份证一样，是每个网页唯一的标识，关于IP地址，后续我会详细介绍，IP协议属于网络层的协议。我们先将HTTP报文压入一个栈中（就好像是在分装报文），然后是IP，不对，我们貌似漏了一个传输层啊，别急别介，HTTP报文在传输层用的是TCP协议，好，我们把TCP压入栈中，再讲IP层也压入栈中，至于链路层的话，就用最常见的以太网就OK了，好了，现在我们的栈里面从头至尾依次是以太帧头-IP协议-TCP协议-HTTP协议，然后我们先忽略最底层的物理层，假设这个封装好的栈一样的报文漂洋过海，来到了它的目的地（至于怎么过来的，我们后续也会讲到），当对端收到这个报文以后，也就是我们封装好的这个栈一样的东西以后该怎么办呢？会不会也是先拿HTTP呢？因为这个报文是我们构造的一个栈，所以说它的顺序肯定也是栈，因此拿取的顺序就是以太帧头-IP协议-TCP协议-HTTP协议，发现没，最先被封装入的HTTP报文是最后才被拿出来的，这中间的细节如果能全部掌握，那基本商就算是入门了，关于这部分东西，我会在后面详细介绍，现在有这个概念就可以了。</p>
<h3 id="二面："><a href="#二面：" class="headerlink" title="二面："></a>二面：</h3><h4 id="说一下你项目中遇到的最大的问题，如何解决的（再次把我毫不相关的科研项目扯了一通）"><a href="#说一下你项目中遇到的最大的问题，如何解决的（再次把我毫不相关的科研项目扯了一通）" class="headerlink" title="说一下你项目中遇到的最大的问题，如何解决的（再次把我毫不相关的科研项目扯了一通）"></a>说一下你项目中遇到的最大的问题，如何解决的（再次把我毫不相关的科研项目扯了一通）</h4><p>堆和栈 </p>
<h3 id="const和define的区别"><a href="#const和define的区别" class="headerlink" title="const和define的区别"></a>const和define的区别</h3><h3 id="Linux用过吗"><a href="#Linux用过吗" class="headerlink" title="Linux用过吗"></a>Linux用过吗</h3><h4 id="一个文件里面有很多ip地址，如何用grep命令查看出现次数最多的三个？用awk呢？"><a href="#一个文件里面有很多ip地址，如何用grep命令查看出现次数最多的三个？用awk呢？" class="headerlink" title="一个文件里面有很多ip地址，如何用grep命令查看出现次数最多的三个？用awk呢？"></a>一个文件里面有很多ip地址，如何用grep命令查看出现次数最多的三个？用awk呢？</h4><p>awk  wk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>
<p>awk ‘BEGIN{ commands } pattern{ commands } END{ commands }’</p>
<ul>
<li><p>第一步：运行BEGIN{ commands }语句块中的语句。</p>
</li>
<li><p>第二步：从文件或标准输入(stdin)读取一行。然后运行pattern{ commands }语句块，它逐行扫描文件，从第一行到最后一行反复这个过程。直到文件所有被读取完成。</p>
</li>
<li><p>第三步：当读至输入流末尾时，运行END{ commands }语句块。</p>
</li>
</ul>
<p>BEGIN语句块在awk開始从输入流中读取行之前被运行，这是一个可选的语句块，比方变量初始化、打印输出表格的表头等语句通常能够写在BEGIN语句块中。</p>
<p>END语句块在awk从输入流中读取全然部的行之后即被运行。比方打印全部行的分析结果这类信息汇总都是在END语句块中完毕，它也是一个可选语句块。</p>
<p>可用awk来统计固定格式日志里的一些数据，如日志中出现过所有不同的IP</p>
<p>awk ‘{i=$1;count[i]++}END{for(i in count)print(i,count[i])}’ /var/log/httpd/access_log</p>
<p>awk对文件进行流处理，每次读取一行。$1就是IP，count[i]++是将IP作为一个数组的下标，并且使得统计这个IP所对应的数组元素自增</p>
<p>也可以用来找出访问次数最多的ip。</p>
<p>awk ‘{a[$1] += 1;} END {for (i in a) printf(“%d %s\n”, a[i], i);}’ 日志文件 | sort -n | tail -n 10 <strong>#用tail显示最后10行</strong></p>
<p>有一个文件ip.txt，每行一条ip记录，共若干行，下面哪个命令可以实现“统计出现次数最多的前3个ip及其次数”？</p>
<p>sort ip.txt | uniq -c | sort -rn | head -n 3</p>
<p>root用户如何修改文件的所属人？谈到了chmod命令 </p>
<p>chmod作用：修改文件、目录的权限</p>
<p>有两种方式修改权限</p>
<p>（1）+ 、-、= 变更权限 </p>
<p> u：所有者 g:所在组 o：其他组 a：所有人(u、g、o的总和) </p>
<p>① chmod  u=rwx, g=rx, o=x  文件目录名 </p>
<p>② chmod  o+w  文件目录名 给其他组的用户增加写的权限</p>
<p>③ chmod  a-x   文件目录名 给所有人去掉可执行文件的权限</p>
<h3 id="算法题：-1"><a href="#算法题：-1" class="headerlink" title="算法题："></a>算法题：</h3><p>面试官说有一道简单的，一道难一点的，让我自己选择，因为前面linux命令那块答得不太好，就选了难的那道 </p>
<p>给出一个字符串S，牛牛想知道这个字符串有多少个子序列等于”niuniu”<br>子序列可以通过在原串上删除任意个字符(包括0个字符和全部字符)得到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">niuniuString</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给出一个字符串S，牛牛想知道这个字符串有多少个子序列等于"niuniu"</span></span><br><span class="line"><span class="comment">     * 子序列可以通过在原串上删除任意个字符(包括0个字符和全部字符)得到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"yrabbbit"</span>;</span><br><span class="line">        String str2 = <span class="string">"rabbit"</span>;</span><br><span class="line">        <span class="keyword">int</span> i = numDistinct(str, str2);</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numDistinct</span><span class="params">(String S, String T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(S==<span class="keyword">null</span>&amp;&amp;T==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(S==<span class="keyword">null</span>&amp;&amp;T!=<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(S!=<span class="keyword">null</span>&amp;&amp;T==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[][]dp=<span class="keyword">new</span> <span class="keyword">int</span>[S.length()+<span class="number">1</span>][T.length()+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=S.length();i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T.length();i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=S.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=T.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(S.charAt(i-<span class="number">1</span>)!=T.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j]+dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;dp.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dp[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                System.out.print(dp[i][j]+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[S.length()][T.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="求子串的长度算法"><a href="#求子串的长度算法" class="headerlink" title="求子串的长度算法"></a>求子串的长度算法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"vrabbbit"</span>;</span><br><span class="line">        String str2 = <span class="string">"rabbit"</span>;</span><br><span class="line">        <span class="keyword">int</span> i = childString(str, str2);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">childString</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1 == <span class="keyword">null</span> &amp;&amp; s2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s1 == <span class="keyword">null</span> &amp;&amp; s2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[s1.length()+<span class="number">1</span>][s2.length()+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; result[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                System.out.print(result[i][j]+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; result[<span class="number">1</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s1.charAt(i-<span class="number">1</span>) == s2.charAt(j-<span class="number">1</span>)) &#123;</span><br><span class="line">                    result[i][j] = result[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (result[i][j - <span class="number">1</span>] &gt;= result[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                        result[i][j] = result[i][j-<span class="number">1</span>];</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        result[i][j] = result[i-<span class="number">1</span>][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result[s1.length()][s2.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="3、linux命令（我平时不太用linux就只知道哪些情况用什么命令但是具体参数不太知道；问了查找文件里关键词最多的怎么查，还有查找进程名为live的进程等等"><a href="#3、linux命令（我平时不太用linux就只知道哪些情况用什么命令但是具体参数不太知道；问了查找文件里关键词最多的怎么查，还有查找进程名为live的进程等等" class="headerlink" title="3、linux命令（我平时不太用linux就只知道哪些情况用什么命令但是具体参数不太知道；问了查找文件里关键词最多的怎么查，还有查找进程名为live的进程等等"></a>3、linux命令（我平时不太用linux就只知道哪些情况用什么命令但是具体参数不太知道；问了查找文件里关键词最多的怎么查，还有查找进程名为live的进程等等</h3><p>grep -count 文件名称   | tail 10</p>
<h3 id="4、数据库查找stu表内名字为lily，住址包含北京的信息，按年龄降序排序；我开始是select-然后要求只查住址列怎么办？然后问我修改包含北京的列里北京两个字为上海怎么办（replace我没用过…"><a href="#4、数据库查找stu表内名字为lily，住址包含北京的信息，按年龄降序排序；我开始是select-然后要求只查住址列怎么办？然后问我修改包含北京的列里北京两个字为上海怎么办（replace我没用过…" class="headerlink" title="4、数据库查找stu表内名字为lily，住址包含北京的信息，按年龄降序排序；我开始是select *然后要求只查住址列怎么办？然后问我修改包含北京的列里北京两个字为上海怎么办（replace我没用过…"></a>4、数据库查找stu表内名字为lily，住址包含北京的信息，按年龄降序排序；我开始是select *然后要求只查住址列怎么办？然后问我修改包含北京的列里北京两个字为上海怎么办（replace我没用过…</h3><h3 id="int和Integer的区别，为什么有了int还需要Integer"><a href="#int和Integer的区别，为什么有了int还需要Integer" class="headerlink" title="int和Integer的区别，为什么有了int还需要Integer"></a>int和Integer的区别，为什么有了int还需要Integer</h3><h3 id="ArrayList和LinkedList区别，各有什么特点"><a href="#ArrayList和LinkedList区别，各有什么特点" class="headerlink" title="ArrayList和LinkedList区别，各有什么特点"></a>ArrayList和LinkedList区别，各有什么特点</h3><h3 id="进程和线程的区别，联系"><a href="#进程和线程的区别，联系" class="headerlink" title="进程和线程的区别，联系"></a>进程和线程的区别，联系</h3><h3 id="多线程编程，死锁检测与预防，死锁的检测手段，怎样避免死锁"><a href="#多线程编程，死锁检测与预防，死锁的检测手段，怎样避免死锁" class="headerlink" title="多线程编程，死锁检测与预防，死锁的检测手段，怎样避免死锁"></a>多线程编程，死锁检测与预防，死锁的检测手段，怎样避免死锁</h3><h3 id="讲一讲线程池，讲讲为什么很多公司对于线程池的使用非常谨慎"><a href="#讲一讲线程池，讲讲为什么很多公司对于线程池的使用非常谨慎" class="headerlink" title="讲一讲线程池，讲讲为什么很多公司对于线程池的使用非常谨慎"></a>讲一讲线程池，讲讲为什么很多公司对于线程池的使用非常谨慎</h3><h3 id="SQL代码书写：有一个学生信息表包含id，学号，选修课程和该课程的成绩，写一个SQL语句来查找总分最高的前十名同学。"><a href="#SQL代码书写：有一个学生信息表包含id，学号，选修课程和该课程的成绩，写一个SQL语句来查找总分最高的前十名同学。" class="headerlink" title="SQL代码书写：有一个学生信息表包含id，学号，选修课程和该课程的成绩，写一个SQL语句来查找总分最高的前十名同学。"></a>SQL代码书写：有一个学生信息表包含id，学号，选修课程和该课程的成绩，写一个SQL语句来查找总分最高的前十名同学。</h3><h3 id="建表过程中索引添加的规范"><a href="#建表过程中索引添加的规范" class="headerlink" title="建表过程中索引添加的规范"></a>建表过程中索引添加的规范</h3><h3 id="InnoDB的4种事务隔离级别"><a href="#InnoDB的4种事务隔离级别" class="headerlink" title="InnoDB的4种事务隔离级别"></a>InnoDB的4种事务隔离级别</h3><h3 id="SSM和Spring-Boot的比较，Spring-Boot的缺点-没答上来，面试官的解释是Spring-Boot封装层数过多导致的性能问题"><a href="#SSM和Spring-Boot的比较，Spring-Boot的缺点-没答上来，面试官的解释是Spring-Boot封装层数过多导致的性能问题" class="headerlink" title="SSM和Spring Boot的比较，Spring Boot的缺点(没答上来，面试官的解释是Spring Boot封装层数过多导致的性能问题)"></a>SSM和Spring Boot的比较，Spring Boot的缺点(没答上来，面试官的解释是Spring Boot封装层数过多导致的性能问题)</h3><h3 id="假如有10亿个手机号，怎么样快速判断一个手机号是否在其中-一开始没什么好的思路，面试官一步一步从hash，二分，布隆过滤器引导到位图"><a href="#假如有10亿个手机号，怎么样快速判断一个手机号是否在其中-一开始没什么好的思路，面试官一步一步从hash，二分，布隆过滤器引导到位图" class="headerlink" title="假如有10亿个手机号，怎么样快速判断一个手机号是否在其中(一开始没什么好的思路，面试官一步一步从hash，二分，布隆过滤器引导到位图)"></a>假如有10亿个手机号，怎么样快速判断一个手机号是否在其中(一开始没什么好的思路，面试官一步一步从hash，二分，布隆过滤器引导到位图)</h3><h3 id="机智题：烧完一整根香需要30分钟，怎么样得到15分钟的计时，怎么样得到7-5分钟的计时"><a href="#机智题：烧完一整根香需要30分钟，怎么样得到15分钟的计时，怎么样得到7-5分钟的计时" class="headerlink" title="机智题：烧完一整根香需要30分钟，怎么样得到15分钟的计时，怎么样得到7.5分钟的计时"></a>机智题：烧完一整根香需要30分钟，怎么样得到15分钟的计时，怎么样得到7.5分钟的计时</h3><h3 id="算法题：把数组中奇数放在前面，偶数放在后面，并且奇数偶数都要保证从小到大，要求空间复杂度O-1"><a href="#算法题：把数组中奇数放在前面，偶数放在后面，并且奇数偶数都要保证从小到大，要求空间复杂度O-1" class="headerlink" title="算法题：把数组中奇数放在前面，偶数放在后面，并且奇数偶数都要保证从小到大，要求空间复杂度O(1)"></a>算法题：把数组中奇数放在前面，偶数放在后面，并且奇数偶数都要保证从小到大，要求空间复杂度O(1)</h3><h3 id="MySQL索引结构，说说B树和B-树的区别"><a href="#MySQL索引结构，说说B树和B-树的区别" class="headerlink" title="MySQL索引结构，说说B树和B+树的区别"></a>MySQL索引结构，说说B树和B+树的区别</h3><h3 id="MySQL索引什么时候失效，联合索引，聚集索引"><a href="#MySQL索引什么时候失效，联合索引，聚集索引" class="headerlink" title="MySQL索引什么时候失效，联合索引，聚集索引"></a>MySQL索引什么时候失效，联合索引，聚集索引</h3><h3 id="聚集索引："><a href="#聚集索引：" class="headerlink" title="聚集索引："></a>聚集索引：</h3><p>聚集索引就是按照每张表的主键构造一棵B+树，同时叶子节点中存放的即为整张表的行记录数据。聚集索引的叶子节点称为数据页，每个数据页通过一个双向链表来进行链接，而且数据页按照主键的顺序进行排列。</p>
<h2 id="辅助索引："><a href="#辅助索引：" class="headerlink" title="辅助索引："></a>辅助索引：</h2><p>辅助索引(二级索引)：叶子节点中存储主键值，每次查找数据时，根据索引找到叶子节点中的主键值，根据主键值再到聚簇索引中得到完整的一行记录。</p>
<p>覆盖索引：</p>
<p>当能通过检索索引就可以读取想要的数据，那就不需要再到数据表中读取行了。如果一个索引包含了（或覆盖了）满足查询语句中字段与条件的数据就叫 做覆盖索引。</p>
<h4 id="写一个单例模式"><a href="#写一个单例模式" class="headerlink" title="写一个单例模式"></a>写一个单例模式</h4><p>Redis数据结构，场景题</p>
<p>讲讲Java的堆内存、GC</p>
<p>Java把内存分成两种，一种叫做栈内存，一种叫做堆内存，有着不同的作用。栈内存用来存储局部变量和方法调用。<br>栈内存归属于单个线程，每个线程都会有一个栈内存，其存储的变量只能在其所属线程中可见，即栈内存可以理解成线程的私有内存。<br>而堆内存中的对象对所有线程可见。堆内存中的对象可以被所有线程访问。而堆内存用来存储Java中的对象。无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆内存中。</p>
<p>引用变量是普通变量，定义时在栈中分配内存，引用变量在程序运行到作用域外释放。而数组＆对象本身在堆中分配，即使程序运行到使用new产生数组和对象的语句所在地代码块之外，数组和对象本身占用的堆内存也不会被释放，<strong><em>\</em>数**</strong>组和对象在没有引用变量指向它的时候，才变成垃圾，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间被垃圾回收器释放掉。这个也是java比较占内存的主要原因，实际上，栈中的变量指向堆内存中的变量，这就是 Java 中的指针!</p>
<h3 id="说说抽象类和接口的区别"><a href="#说说抽象类和接口的区别" class="headerlink" title="说说抽象类和接口的区别"></a>说说抽象类和接口的区别</h3><ul>
<li><p>相同点：都不能被实例化</p>
</li>
<li><p>区别一，两者表达的概念不一样。抽象类是一类事物的高度聚合，那么对于继承抽象类的子类来说，对于抽象类来说，属于“是”的关系；而接口是定义行为规范，因此对于实现接口的子类来说，相对于接口来说，是“行为需要按照接口来完成”。</p>
</li>
</ul>
<ul>
<li>区别二，抽象类在定义类型方法的时候，可以给出方法的实现部分，也可以不给出；而对于接口来说，其中所定义的方法都不能给出实现部分。</li>
</ul>
<ul>
<li>区别三，继承类对于两者所涉及方法的实现是不同的。继承类对于抽象类所定义的抽象方法，可以不用重写，也就是说，可以延用抽象类的方法；而对于接口类所定义的方法或者属性来说，在继承类中必须要给出相应的方法和属性实现。</li>
</ul>
<ul>
<li>区别四，在抽象类中，新增一个方法的话，继承类中可以不用作任何处理；而对于接口来说，则需要修改继承类，提供新定义的方法。</li>
</ul>
<p>写程序。排序。要求奇数放到前面，偶数放到后面(空间复杂度o(1)) </p>
<p>一次http请求过程发生了什么 </p>
<p>springmvc处理过程(http请求服务端发生了那些) </p>
<p>（1）我们应该都知道在启动一个Spring MVC项目的时候，我们要在web.xml配置文件中声明DispatcherServlet。如下图的web.xml所示，这个Servlet监听的URL是*模式，这意味着所有的请求都能通过DispatcherServlet。</p>
<p>URL匹配模式是非常重要的，如果请求符合DispatcherServlet配置的URL模式,那么这个请求就会被处理，否则就不会。DispatcherServlet根据URL请求的地址把请求传给指定的controller。那么DispatcherServlet是如何知道请求要传给哪个controller的呢？ </p>
<p>使用@RequestMapping注解或者Spring MVC配置文件，可以找到URL请求的controller。当然也可以用特定的请求注解，比如@GetMapping或PostMapping。controller文件必须使用@Controller或@RestController(Restful风格)注解进行标记。</p>
<p>最后，总结一下Spring MVC处理HTTP请求的过程 </p>
<p>1.客户端发送HTTP请求到指定的URL。 </p>
<p>2.Spring MVC的DispatcherServlet接收到请求 </p>
<p>3.DispatcherServlet把请求传到用@Controller和@RequestMapping注解的controller </p>
<p>4.Spring MVC返回逻辑视图的名称和模型给DispatcherServlet </p>
<p>5.DispatcherServlet咨询视图处理器直到有实际的视图来展示数据为止 </p>
<p>6.DispatcherServlet使用模型数据联系所选的视图，例如Thymeleaf,Freemarker,JSP,并根据数据模型呈现输出。 </p>
<p>7.呈现的输出作为响应返回给客户端 </p>
<p>以上就是Spring MVC的工作流程或者说Spring MVC处理HTTP请求的过程。</p>
<p>mybatis执行过程，原理 </p>
<p>怎么转换成html了。(没怎么写过前端，都是传json数据) </p>
<p>为什么握手是三次 </p>
<p>数据库索引用的什么结构。b 树比b树有什么优势 </p>
<p>最左前缀(数据库自己的优化) </p>
<p>单例模式 </p>
<p>session和cookie </p>
<p>JAVA垃圾回收 </p>
<p>二面 </p>
<p>分享一个你觉得比较有的讲得实习经历(五分钟) </p>
<p>怼项目(十分钟) </p>
<p>JAVA是自学的还是开的课程 </p>
<p>学习JAVA你怎么学习的 </p>
<p>JAVA虚拟机内存模型 </p>
<p>syn和lock </p>
<p>可重入锁实现原理</p>
<p>事务用来做什么 </p>
<p>lru </p>
<p>网络方面TCP断开time_wait(什么时候进入这种状态，为什么要有这种状态) </p>
<p>快排 </p>
<p>对工作的方向对语言有要求吗 </p>
<p>看你学JAVA很多，是因为这方面需求比较大吗 </p>
<p>平时得工作环境在Linux吗</p>
<p>统计某个字符串的行数统计用什么命令 </p>
<p>Grep -count “字符串” 文件名称</p>
<p>统计某个文件的行数</p>
<p>Wc 文件名   显示行数  字数  字节数</p>
<p>有什么要问我的吗？</p>
<p>MYSQL日志分为几种</p>
<p>如何保证回滚</p>
<p>数据库中事务到底是mvcc回滚还是日志回滚<br>socket有几种状态<br>mysql更新了数据日志文件有什么改变<br>它的意思是服务器崩了，你访问服务器应该是什么样<br>服务器崩了发送什么错误码，崩了情况下500是谁发的<br>开发环境和生产环境不一样，配置环境应该有什么不同配置数据库<br>ACID<br>死锁以及解决措施<br>rabbitmq中各种模式<br>堆栈区别<br>GC回收算法<br>点击按钮这个过程详解一下</p>
<p>算法题：<br>长字符串相加<br>nums[] = {1,-1,0,2,-2,1,3} 找到所有不重复a + b + c = 0</p>
]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试，作业帮</tag>
      </tags>
  </entry>
  <entry>
    <title>Java常见面试题整理</title>
    <url>/2020/06/09/Java%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>java常见面试题整理</p>
<a id="more"></a>

<!-- more-->

<h2 id="java相关："><a href="#java相关：" class="headerlink" title="java相关："></a>java相关：</h2><h3 id="Java中线程安全的集合类？"><a href="#Java中线程安全的集合类？" class="headerlink" title="Java中线程安全的集合类？"></a>Java中线程安全的集合类？</h3><p>java中的线程安全是什么：</p>
<p>就是线程同步的意思，就是当一个程序对一个线程安全的方法或者语句进行访问的时候，其他的不能再对他进行操作了，必须等到这次访问结束以后才能对这个线程安全的方法进行访问</p>
<p>什么叫线程安全：</p>
<p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。 </p>
<p>或者说:一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不用考虑同步的问题。</p>
<p>线程安全问题都是由全局变量及静态变量引起的。</p>
<p>若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则就可能影响线程安全。</p>
<p>看过vector源码的同学就会知道他的许多操作都是加了synchronized修饰的比如他的添加元素。</p>
<p>而HashMap的所有操作都没有加synchronized修饰 </p>
<h3 id="HashMap和hashtable的区别？"><a href="#HashMap和hashtable的区别？" class="headerlink" title="HashMap和hashtable的区别？"></a>HashMap和hashtable的区别？</h3><p>（1）HashMap是基于哈希表实现的，每一个元素是一个key-value对，其内部通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。</p>
<p> HashMap是非线程安全的，只是用于单线程环境下，多线程环境下可以采用concurrent并发包下的concurrentHashMap。</p>
<h5 id="HashMap存数据的过程是："><a href="#HashMap存数据的过程是：" class="headerlink" title="HashMap存数据的过程是："></a>HashMap存数据的过程是：</h5><p>   HashMap内部维护了一个存储数据的Entry数组，HashMap采用链表解决冲突，每一个Entry本质上是一个单向链表。当准备添加一个key-value对时，首先通过hash(key)方法计算hash值，然后通过indexFor(hash,length)求该key-value对的存储位置，计算方法是先用hash&amp;0x7FFFFFFF后，再对length取模，这就保证每一个key-value对都能存入HashMap中，当计算出的位置相同时，由于存入位置是一个链表，则把这个key-value对插入链表头。</p>
<p>   HashMap中key和value都允许为null。key为null的键值对永远都放在以table[0]为头结点的链表中。</p>
<p> Hashtable同样是基于哈希表实现的，同样每个元素是一个key-value对，其内部也是通过单链表解决冲突问题，容量不足（超过了阀值）时，同样会自动增长。</p>
<p>Hashtable也是JDK1.0引入的类，是线程安全的，能用于多线程环境中。</p>
<p>   Hashtable同样实现了Serializable接口，它支持序列化，实现了Cloneable接口，能被克隆。</p>
<h6 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h6><p>hashtable是线程安全的，hashMap是非线程安全的集合类</p>
<p>Hashtable中，key和value都不允许出现null值。但是如果在Hashtable中有类似put(null,null)的操作，编译同样可以通过，因为key和value都是Object类型，但运行时会抛出NullPointerException异常，这是JDK的规范规定的。</p>
<p>HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，可能是 HashMap中没有该键，也可能使该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键， 而应该用containsKey()方法来判断。</p>
<h3 id="3-Java继承中子类父类函数的调用问题？"><a href="#3-Java继承中子类父类函数的调用问题？" class="headerlink" title="3.Java继承中子类父类函数的调用问题？"></a>3.Java继承中子类父类函数的调用问题？</h3><p>在调用子类构造器之前，会先调用父类构造器，当子类构造器中没有使用”super(参数或无参数)”指定调用父类构造器时，是默认调用父类的无参构造器，如果父类中包含有参构造器，却没有无参构造器，则在子类构造器中一定要使用“super(参数)”指定调用父类的有参构造器，不然就会报错。</p>
<h3 id="4-类和对象的区别-？-请说明类和对象的区别"><a href="#4-类和对象的区别-？-请说明类和对象的区别" class="headerlink" title="4. 类和对象的区别**  **？****请说明类和对象的区别****"></a>4. 类和对象的区别*<strong>*  *</strong>*？*<strong>**</strong>*请说明类和对象的区别****</h3><p>类是现实世界或思维世界中的实体在计算机中的反映，它将数据以及这些数据上的操作封装在一起。</p>
<p>对象是具有类类型的变量。类和对象是面向对象编程技术中的最基本的概念。</p>
<p>类是一个静态的概念，类本身不携带任何数据。当没有为类创建任何数据时，类本身不存在于内存空间  </p>
<p>对象是一个动e68a847a6431333366306464态的概念，每一个对象都存在着有别于其它对象的属于自己的独特的属性和行为，属性可以随着它自己的行为而发生改变。</p>
<h3 id="5-Overload和Override的区别。Overloaded的方法是否可…"><a href="#5-Overload和Override的区别。Overloaded的方法是否可…" class="headerlink" title="5. Overload和Override的区别。Overloaded的方法是否可…"></a>5. Overload和Override的区别。Overloaded的方法是否可…</h3><p><strong><em>\</em>请说明Overload和Override的区别，Overloaded的方法是否可以改变返回值的类型?**</strong></p>
<p>Overload是重载的意思，Override是覆盖的意思，也就是重写。</p>
<p>重载Overload表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同（即参数个数或类型不同）。</p>
<p>重写Override表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。</p>
<h3 id="6-用两个栈实现队列-？-用两个栈来实现一个队列，完成队列的Push和Pop操作。-队列中的元素为int类型。"><a href="#6-用两个栈实现队列-？-用两个栈来实现一个队列，完成队列的Push和Pop操作。-队列中的元素为int类型。" class="headerlink" title="6. 用两个栈实现队列****？****用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。"></a>6. 用两个栈实现队列*<strong>**</strong>*？*<strong>**</strong>*用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> niu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">doubleStack</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先写入栈函数，如果想往栈中放入什么函数，直接调用放入函数就可以了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        stack1.push(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写出栈函数，因为是两个栈，所以入栈stack1之后，如果要出栈，就需要借助stack2,</span></span><br><span class="line">    <span class="comment">//先把数值从stack1中出栈放入stack2中</span></span><br><span class="line">    <span class="keyword">int</span> result =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stack2.empty()) &#123;</span><br><span class="line">            result = stack2.pop();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果栈2为空，就需要把数据一个一个取出来先放入栈2中</span></span><br><span class="line">            <span class="keyword">while</span>(!stack1.empty())&#123;</span><br><span class="line">                temp = stack1.pop();</span><br><span class="line">                stack2.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//重新取出栈2中的值</span></span><br><span class="line">            <span class="keyword">if</span> (!stack2.empty()) &#123;</span><br><span class="line">                result = stack2.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="7-介绍一下volatile？请你介绍一下volatile？"><a href="#7-介绍一下volatile？请你介绍一下volatile？" class="headerlink" title="# 7. 介绍一下volatile？请你介绍一下volatile？"></a># 7. 介绍一下volatile？请你介绍一下volatile？</h2><p>volatile作为java中的关键词之一，用以声明变量的值可能随时会别的线程修改，使用volatile修饰的变量会强制将修改的值立即写入主存，主存中值的更新会使缓存中的值失效(非volatile变量不具备这样的特性，非volatile变量的值会被缓存，线程A更新了这个值，线程B读取这个变量的值时可能读到的并不是是线程A更新后的值)。volatile会禁止指令重排 volatile具有可见性、有序性，不具备原子性。 注意，volatile不具备原子性，这是volatile与java中的synchronized、java.util.concurrent.locks.Lock最大的功能差异</p>
<h3 id="8-编程题"><a href="#8-编程题" class="headerlink" title="8. 编程题"></a>8. 编程题</h3><p>栈的压入、弹出序列</p>
<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p>
<h3 id="9-GCRoot可以是哪些-请问GC-Root可以是哪些？"><a href="#9-GCRoot可以是哪些-请问GC-Root可以是哪些？" class="headerlink" title="9. GCRoot可以是哪些** **请问GC Root可以是哪些？"></a>9. GCRoot可以是哪些*<strong>* *</strong>*请问GC Root可以是哪些？</h3><p>GcRoot是垃圾回收器算法中判断一个对象是否可以回收的一种算法。</p>
<p>就是对象到达GcRoot的路径是否还有可达，即是否有可引用链，如果有，这表明对象还存在着引用，如果没有，则表明该对象没有引用，在下一次垃圾回收时就会被回收</p>
<p>GcRoot的种类</p>
<p>（1）虚拟机栈：栈帧中的本地变量表引用的对象</p>
<p>（2）native方法引用的对象</p>
<p>（3）方法区中的静态变量和常量引用的对象</p>
<h3 id="10-编程题：-二叉树的深度-？-输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。"><a href="#10-编程题：-二叉树的深度-？-输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。" class="headerlink" title="10. 编程题：****二叉树的深度****？****输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。"></a>10. 编程题：*<strong>**</strong>*二叉树的深度*<strong>**</strong>*？*<strong>**</strong>*输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> leftDepth = TreeDepth(root.left);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> rightDepth = TreeDepth(root.right);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">1</span>+((leftDepth&gt;rightDepth)?leftDepth:rightDepth);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="11-springIOC原理？自己实现IOC要怎么做，哪些步骤？"><a href="#11-springIOC原理？自己实现IOC要怎么做，哪些步骤？" class="headerlink" title="11. springIOC原理？自己实现IOC要怎么做，哪些步骤？"></a>11. springIOC原理？自己实现IOC要怎么做，哪些步骤？</h2><p><strong><em>\</em>请说明一下springIOC原理是什么？如果你要实现IOC需要怎么做？请简单描述一下实现步骤？**</strong></p>
<h3 id="12-JDK和JRE有什么区别？"><a href="#12-JDK和JRE有什么区别？" class="headerlink" title="12. JDK和JRE有什么区别？"></a>12. JDK和JRE有什么区别？</h3><p>JDK是Java开发工具包，是Sun Microsystems针对Java开发员的产品。JDK中包含JRE，在JDK的安装目录下有一个名为jre的目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。JDK是整个JAVA的核心，包括了Java运行环境JRE（Java Runtime Envirnment）、一堆Java工具（javac/java/jdb等）和Java基础的类库（即Java API 包括rt.jar）。</p>
<p>JRE,是运行基于Java语言编写的程序所不可缺少的运行环境。也是通过它，Java的开发者才得以将自己开发的程序发布到用户手中，让用户使用。JRE中包含了Java virtual machine（JVM），runtime class libraries和Java application launcher，这些是运行Java程序的必要组件。与大家熟知的JDK不同，JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器），只是针对于使用Java程序的用户。</p>
<p>JVM就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行。</p>
<h3 id="13-和equels有什么区别？"><a href="#13-和equels有什么区别？" class="headerlink" title="13. . ==和equels有什么区别？"></a>13. . ==和equels有什么区别？</h3><p>equals源自于Object类，Object中equals方法默认比较的内容还是==比较的结果。</p>
<p>如果没有重写equals的话，equals和==是一样的。都是比较内存地址。</p>
<h3 id="14-说说final在java中的作用？"><a href="#14-说说final在java中的作用？" class="headerlink" title="14. 说说final在java中的作用？"></a>14. 说说final在java中的作用？</h3><p>final关键字可以用来修饰引用、方法、和类。</p>
<p>（1）如果修饰的引用为基本数据类型，则该引用为常量，该值无法修改</p>
<p>（2）如果修饰的引用为引用数据类型，比如对象、数组、则该对象、数组本身可以修改，但是指向该对象或者数组的地址的引用不能修改。</p>
<p>（3）如果引用是类的成员变量，则必须当场赋值，否则编译会报错。</p>
<p>当用final修饰一个方法的时候，当使用final修饰方法时，这个方法将成为最终方法，无法被子类重写。但是，该方法仍然可以被继承。</p>
<p>当使用final修饰一个类的时候，当用final修改类时，该类成为最终类，无法被继承。简称为“断子绝孙类”。</p>
<h3 id="15-String类的常用方法有哪些"><a href="#15-String类的常用方法有哪些" class="headerlink" title="15.String类的常用方法有哪些?"></a>15.String类的常用方法有哪些?</h3><p>（1）equals：字符串是否相同</p>
<p>（2）indexof：目标字符或者是目标字符串在源字符串中的位置下标</p>
<p>（3）valueOf：其他类型转字符串</p>
<p>（4）isEmpty：字符串的长度是否为零</p>
<p>（5）contains：是否包含目标字符串</p>
<h3 id="16-java中操作字符串的类有哪些？他们之间有什么区别？"><a href="#16-java中操作字符串的类有哪些？他们之间有什么区别？" class="headerlink" title="16. java中操作字符串的类有哪些？他们之间有什么区别？"></a>16. java中操作字符串的类有哪些？他们之间有什么区别？</h3><p>（1）String</p>
<p>（2）StringBuilder</p>
<p>（3）StringBuffer</p>
<p>从类的继承关系上来开的话,String和StringBuffer,StringBuilder是没有任何关系的,但是StringBuffer和StringBuilder的继承关系时一样的。</p>
<p>java中操作字符串的类,我知道的有三个类,分别是String,StringBuffer和StringBuilder.这三个类都是以char[]的形式保存的字符串,但是String类型的字符串是不可变的,对String类型的字符床做修改操作都是相当于重新创建对象.而对StringBuffer和StringBuilder进行增删操作都是对同一个对象做操作.StringBuffer中的方法大部分都使用synchronized关键字修饰,所以StringBuffer是线程安全的,StringBuilder中的方法则没有,线程不安全,但是StringBuilder因为没有使用使用synchronized关键字修饰,所以性能更高,在单线程环境下我会选择使用StringBuilder,多线程环境下使用StringBuffer.如果生命的这个字符串几乎不做修改操作,那么我就直接使用String,因为不调用new关键字声明String类型的变量的话它不会在堆内存中创建对象,直接指向String的常量池,并且可以复用.效率更高</p>
<h3 id="17-如何将字符串反转？"><a href="#17-如何将字符串反转？" class="headerlink" title="17. 如何将字符串反转？"></a>17. 如何将字符串反转？</h3><p>使用StringBuffer或者StringBuilder中的reverse()方法。</p>
<h3 id="18-普通类和抽象类有什么区别？"><a href="#18-普通类和抽象类有什么区别？" class="headerlink" title="18. . 普通类和抽象类有什么区别？"></a>18. . 普通类和抽象类有什么区别？</h3><p>（1）抽象类不能被实例化</p>
<p>（2）抽象类可以有抽象方法，抽象方法只需申明，无需实现</p>
<p>（3）含有抽象方法的类必须申明为抽象类</p>
<p>（4）抽象类的子类必须实现抽象类中所有抽象方法，否则这个子类也是抽象类</p>
<p>（5）抽象方法不能被声明为静态</p>
<p>（6）抽象方法不能用 private 修饰</p>
<p>（7）抽象方法不能用 final 修饰</p>
<h3 id="19-接口和抽象类有什么区别？"><a href="#19-接口和抽象类有什么区别？" class="headerlink" title="19. 接口和抽象类有什么区别？"></a>19. 接口和抽象类有什么区别？</h3><p>他们都不能实例化对象，都可以包含抽象方法，而且抽象方法必须被继承的类全部实现。</p>
<p>区别：</p>
<p>1、抽象类和接口都不能直接实例化，如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。</p>
<p>2、抽象类要被子类继承，接口要被类实现。</p>
<p>3、接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现</p>
<p>4、接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。</p>
<p>5、抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。同样，一个实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。</p>
<p>6、抽象方法只能申明，不能实现，接口是设计的结果 ，抽象类是重构的结果</p>
<p>7、抽象类里可以没有抽象方法</p>
<p>8、如果一个类里有抽象方法，那么这个类只能是抽象类</p>
<p>9、抽象方法要被实现，所以不能是静态的，也不能是私有的。</p>
<p>10、接口可继承接口，并可多继承接口，但类只能单根继承。</p>
<h3 id="20-java中的IO流分为几种？"><a href="#20-java中的IO流分为几种？" class="headerlink" title="20.  java中的IO流分为几种？"></a>20.  java中的IO流分为几种？</h3><p>java 中 IO 流分为几种?</p>
<p>按照流的流向分，可以分为输入流和输出流；</p>
<p>按照操作单元划分，可以划分为字节流和字符流；</p>
<p>按照流的角色划分为节点流和处理流。</p>
<h3 id="21-List-Set-Map-之间有什么区别？"><a href="#21-List-Set-Map-之间有什么区别？" class="headerlink" title="21. List Set  Map 之间有什么区别？"></a>21. List Set  Map 之间有什么区别？</h3><p>List和set是实现了collection接口的</p>
<h4 id="List："><a href="#List：" class="headerlink" title="List："></a>List：</h4><ul>
<li><p>1.可以允许重复的对象。</p>
</li>
<li><p>2.可以插入多个null元素。</p>
</li>
<li><p>3.是一个有序容器，保持了每个元素的插入顺序，输出的顺序就是插入的顺序。</p>
</li>
<li><p>4.常用的实现类有 ArrayList、LinkedList 和 Vector。ArrayList 最为流行，它提供了使用索引的随意访问，而 LinkedList 则对于经常需要从 List 中添加或删除元素的场合更为合适。</p>
</li>
</ul>
<h4 id="Set："><a href="#Set：" class="headerlink" title="Set："></a>Set：</h4><ul>
<li>1.不允许重复对象</li>
<li>无序容器，你无法保证每个元素的存储顺序，TreeSet通过 Comparator  或者 Comparable 维护了一个排序顺序。</li>
<li>只允许一个 null 元素</li>
<li>Set 接口最流行的几个实现类是 HashSet、LinkedHashSet 以及 TreeSet。最流行的是基于 HashMap 实现的 HashSet；TreeSet 还实现了 SortedSet 接口，因此 TreeSet 是一个根据其 compare() 和 compareTo() 的定义进行排序的有序容器。</li>
</ul>
<h4 id="Map："><a href="#Map：" class="headerlink" title="Map："></a>Map：</h4><ul>
<li><ol>
<li>Map不是collection的子接口或者实现类。Map是一个接口。</li>
<li>Map 的 每个 Entry 都持有两个对象，也就是一个键一个值，Map 可能会持有相同的值对象但键对象必须是唯一的。</li>
<li>TreeMap 也通过 Comparator  或者 Comparable 维护了一个排序顺序。</li>
<li>Map 里你可以拥有随意个 null 值但最多只能有一个 null 键。</li>
<li>5.Map 接口最流行的几个实现类是 HashMap、LinkedHashMap、Hashtable 和 TreeMap。（HashMap、TreeMap最常用）</li>
</ol>
</li>
</ul>
<h4 id="什么场景下使用list，set，map呢？"><a href="#什么场景下使用list，set，map呢？" class="headerlink" title="什么场景下使用list，set，map呢？"></a>什么场景下使用list，set，map呢？</h4><p>（为什么这里要用list、或者set、map，这里回答它们的优缺点就可以了）</p>
<ul>
<li><p>（1）如果你经常会使用索引来对容器中的元素进行访问，那么 List 是你的正确的选择。如果你已经知道索引了的话，那么 List 的实现类比如 ArrayList 可以提供更快速的访问,如果经常添加删除元素的，那么肯定要选择LinkedList。</p>
</li>
<li><p>（2）如果你想容器中的元素能够按照它们插入的次序进行有序存储，那么还是 List，因为 List 是一个有序容器，它按照插入顺序进行存储。</p>
</li>
<li><p>（3）如果你想保证插入元素的唯一性，也就是你不想有重复值的出现，那么可以选择一个 Set 的实现类，比如 HashSet、LinkedHashSet 或者 TreeSet。所有 Set 的实现类都遵循了统一约束比如唯一性，而且还提供了额外的特性比如 TreeSet 还是一个 SortedSet，所有存储于 TreeSet 中的元素可以使用 Java 里的 Comparator 或者 Comparable 进行排序。LinkedHashSet 也按照元素的插入顺序对它们进行存储。</p>
</li>
<li><p>（4）如果你以键和值的形式进行数据存储那么 Map 是你正确的选择。你可以根据你的后续需要从 Hashtable、HashMap、TreeMap 中进行选择。</p>
</li>
</ul>
<h3 id="1-JDK和JRE有什么区别？"><a href="#1-JDK和JRE有什么区别？" class="headerlink" title="1.JDK和JRE有什么区别？"></a>1.JDK和JRE有什么区别？</h3><p>JDK是Java开发工具包，是Sun Microsystems针对Java开发员的产品。JDK中包含JRE，在JDK的安装目录下有一个名为jre的目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。JDK是整个JAVA的核心，包括了Java运行环境JRE（Java Runtime Envirnment）、一堆Java工具（javac/java/jdb等）和Java基础的类库（即Java API 包括rt.jar）。</p>
<p>JRE,是运行基于Java语言编写的程序所不可缺少的运行环境。也是通过它，Java的开发者才得以将自己开发的程序发布到用户手中，让用户使用。JRE中包含了Java virtual machine（JVM），runtime class libraries和Java application launcher，这些是运行Java程序的必要组件。与大家熟知的JDK不同，JRE是Java运行环境，并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器），只是针对于使用Java程序的用户。</p>
<p>JVM就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行。</p>
<h3 id="和equels有什么区别？"><a href="#和equels有什么区别？" class="headerlink" title="==和equels有什么区别？****"></a>==和equels有什么区别？****</h3><p>equals源自于Object类，Object中equals方法默认比较的内容还是==比较的结果。</p>
<p>如果没有重写equals的话，equals和==是一样的。都是比较内存地址。</p>
<h3 id="说说final在java中的作用？"><a href="#说说final在java中的作用？" class="headerlink" title="说说final在java中的作用？"></a>说说final在java中的作用？</h3><p>final关键字可以用来修饰引用、方法、和类。</p>
<ul>
<li><p>（1）如果修饰的引用为基本数据类型，则该引用为常量，该值无法修改</p>
</li>
<li><p>（2）如果修饰的引用为引用数据类型，比如对象、数组、则该对象、数组本身可以修改，但是指向该对象或者数组的地址的引用不能修改。</p>
</li>
<li><p>（3）如果引用是类的成员变量，则必须当场赋值，否则编译会报错。</p>
</li>
</ul>
<p>当用final修饰一个方法的时候，当使用final修饰方法时，这个方法将成为最终方法，无法被子类重写。但是，该方法仍然可以被继承。</p>
<ul>
<li>当使用final修饰一个类的时候，当用final修改类时，该类成为最终类，无法被继承。简称为“断子绝孙类”。</li>
</ul>
<h3 id="4-String类的常用方法有哪些"><a href="#4-String类的常用方法有哪些" class="headerlink" title="4. String类的常用方法有哪些?"></a>4. String类的常用方法有哪些?</h3><ul>
<li><p>（1）equals：字符串是否相同</p>
</li>
<li><p>（2）indexof：目标字符或者是目标字符串在源字符串中的位置下标</p>
</li>
<li><p>（3）valueOf：其他类型转字符串</p>
</li>
<li><p>（4）isEmpty：字符串的长度是否为零</p>
</li>
<li><p>（5）contains：是否包含目标字符串</p>
</li>
</ul>
<h3 id="5-java中操作字符串的类有哪些？他们之间有什么区别？"><a href="#5-java中操作字符串的类有哪些？他们之间有什么区别？" class="headerlink" title="5. java中操作字符串的类有哪些？他们之间有什么区别？"></a>5. java中操作字符串的类有哪些？他们之间有什么区别？</h3><p>（1）String</p>
<p>（2）StringBuilder</p>
<p>（3）StringBuffer</p>
<p>从类的继承关系上来开的话,String和StringBuffer,StringBuilder是没有任何关系的,但是StringBuffer和StringBuilder的继承关系时一样的。</p>
<p>java中操作字符串的类,我知道的有三个类,分别是String,StringBuffer和StringBuilder.这三个类都是以char[]的形式保存的字符串,但是String类型的字符串是不可变的,对String类型的字符床做修改操作都是相当于重新创建对象.而对StringBuffer和StringBuilder进行增删操作都是对同一个对象做操作.StringBuffer中的方法大部分都使用synchronized关键字修饰,所以StringBuffer是线程安全的,StringBuilder中的方法则没有,线程不安全,但是StringBuilder因为没有使用使用synchronized关键字修饰,所以性能更高,在单线程环境下我会选择使用StringBuilder,多线程环境下使用StringBuffer.如果生命的这个字符串几乎不做修改操作,那么我就直接使用String,因为不调用new关键字声明String类型的变量的话它不会在堆内存中创建对象,直接指向String的常量池,并且可以复用.效率更高</p>
<h3 id="6-如何将字符串反转？"><a href="#6-如何将字符串反转？" class="headerlink" title="6. 如何将字符串反转？"></a>6. 如何将字符串反转？</h3><p>使用StringBuffer或者StringBuilder中的reverse()方法。</p>
<h3 id="7-普通类和抽象类有什么区别？"><a href="#7-普通类和抽象类有什么区别？" class="headerlink" title="7. 普通类和抽象类有什么区别？"></a>7. 普通类和抽象类有什么区别？</h3><p>（1）抽象类不能被实例化</p>
<p>（2）抽象类可以有抽象方法，抽象方法只需申明，无需实现</p>
<p>（3）含有抽象方法的类必须申明为抽象类</p>
<p>（4）抽象类的子类必须实现抽象类中所有抽象方法，否则这个子类也是抽象类</p>
<p>（5）抽象方法不能被声明为静态</p>
<p>（6）抽象方法不能用 private 修饰</p>
<p>（7）抽象方法不能用 final 修饰</p>
<h3 id="8-接口和抽象类有什么区别？"><a href="#8-接口和抽象类有什么区别？" class="headerlink" title="8. 接口和抽象类有什么区别？"></a>8. 接口和抽象类有什么区别？</h3><h3 id="9-java中的IO流分为几种？"><a href="#9-java中的IO流分为几种？" class="headerlink" title="9. java中的IO流分为几种？"></a>9. java中的IO流分为几种？</h3><h3 id="10-List-Set-Map-之间有什么区别？"><a href="#10-List-Set-Map-之间有什么区别？" class="headerlink" title="10. List Set  Map 之间有什么区别？"></a>10. List Set  Map 之间有什么区别？</h3><h3 id="11-java有8种基本类型，请问byte、int、long、char、float、double、boolean各占多少个字节？"><a href="#11-java有8种基本类型，请问byte、int、long、char、float、double、boolean各占多少个字节？" class="headerlink" title="11. java有8种基本类型，请问byte、int、long、char、float、double、boolean各占多少个字节？\"></a>11. java有8种基本类型，请问byte、int、long、char、float、double、boolean各占多少个字节？\</h3><p>byte：8位 一个字节 </p>
<p>int：32位 四个字节 </p>
<p>long：64位 八个字节 </p>
<p>char：16位 两个字节 </p>
<p>float:32位 四个字节 </p>
<p>double：64位 八个字节 </p>
<p>boolean：8位 一个字节</p>
<h3 id="12-下面哪个不属于HttpServletResponse接口完成的功能？"><a href="#12-下面哪个不属于HttpServletResponse接口完成的功能？" class="headerlink" title="12. 下面哪个不属于HttpServletResponse接口完成的功能？"></a>12. 下面哪个不属于HttpServletResponse接口完成的功能？</h3><p>HttpServletResponse完成：设置http头标，设置cookie，设置返回数据类型，输出返回数据；读取路径信息是HttpServletRequest做的</p>
<p>HttpServletResponse 在Servlet中，当服务器响应客户端的一个请求时，就要用到HttpServletResponse接口。</p>
<p>设置响应的类型可以使用setContentType()方法。发送字符数据，可以使用getWriter()返回一个对象。下表是接口HttpServletResponse的常用方法。 </p>
<p>接口HttpServletResponse的常用方法 方 法 说 明 </p>
<p>addCookie(Cookie cookie) 将指定的Cookie加入到当前的响应中 </p>
<p>addHeader(String name,String value) 将指定的名字和值加入到响应的头信息中 </p>
<p>containsHeader(String name) 返回一个布尔值，判断响应的头部是否被设置 </p>
<p>encodeURL(String url) 编码指定的URL </p>
<p>sendError(int sc) 使用指定状态码发送一个错误到客户端 </p>
<p>sendRedirect(String location) 发送一个临时的响应到客户端 </p>
<p>setDateHeader(String name,long date) 将给出的名字和日期设置响应的头部 </p>
<p>setHeader(String name,String value) 将给出的名字和值设置响应的头部 </p>
<p>setStatus(int sc) 给当前响应设置状态码 </p>
]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis整理</title>
    <url>/2020/06/09/mybatis/</url>
    <content><![CDATA[<h2 id="1-mybatis的入门"><a href="#1-mybatis的入门" class="headerlink" title="1. mybatis的入门"></a>1. mybatis的入门</h2><p>mybatis的环境搭建</p>
<p>​            第一步：创建maven工程并导入坐标</p>
<p>​            第二步：创建实体类和dao的接口</p>
<p>​            第三步：创建Mybatis的主配置文件sqlMapConfig.xml</p>
<p>​            第四步：创建映射配置文件   IUseDao.xml</p>
 <a id="more"></a>



<p>mybatis的文件约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br></pre></td></tr></table></figure>



<p>mybatis的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Mybatis的主配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置MySQL的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源，连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定映射数据源文件的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"config/userDao/userDao.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>我们编写IUserDao的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>编写User的实体类，注意实体类中的属性名称要和数据库中的相同</p>
<p>编写映射器</p>
<p>映射的约束文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"lei.study.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"lei.study.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1590024681000.png" alt="1590024681000"></p>
<p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> lei.study.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> lei.study.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactry工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory sessionFactory = builder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 使用工厂生产SQLSSession对象</span></span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        <span class="comment">//4. 使用sqlsession创建Dao接口的代理对象</span></span><br><span class="line">        IUserDao userDao = sqlSession.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user: users</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        is.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>分析上面的代码，我们发现</p>
<ol>
<li><p>创建工厂的时候，我们使用了建造者模式  SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();</p>
<p>SqlSessionFactory sessionFactory = builder.build(is);</p>
<p>我们只需要往建造者中传入字节流就可以</p>
<p>构建者模式：把对象的创建细节隐藏，使使用者直接调用方法即可以拿到对象</p>
</li>
</ol>
<ol start="2">
<li><p>生产sqlsession使用了工厂模式（解耦）</p>
<p>SqlSession sqlSession = sessionFactory.openSession();</p>
</li>
</ol>
<ol start="3">
<li><p>代理模式</p>
<p> //4. 使用sqlsession创建Dao接口的代理对象</p>
<pre><code>IUserDao userDao = sqlSession.getMapper(IUserDao.class);</code></pre><p>优势：就是在不改变源码的基础上对原有方法增强</p>
</li>
</ol>
<p>除了使用上面的xml文件形式的配置，我们还可以使用注解的方式完成数据库的查询操作</p>
<p>使用注解：</p>
<p>我们需要在接口中的方法上使用@Select() 注解，指定SQL语句，同时需要在sqlMapConfig.xml中的mapper配置时，使用class属性指定dao接口的全限定类名</p>
<p>在主配置文件中指定接口全限定类名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指使用注解的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"lei.study.dao.IUserDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在接口中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意：我们在实际开发中，都是越简便越好，所以都是采用不写dao实现类的方式，不管使用XML还是注解配置，但是mybatis它是支持写dao实现类的。</p>
<h2 id="2-自定义mybatis框架分析"><a href="#2-自定义mybatis框架分析" class="headerlink" title="2. 自定义mybatis框架分析"></a>2. 自定义mybatis框架分析</h2><p>通过快速入门示例，我们发现使用 mybatis 是非常容易的一件事情，因为只需要编写 Dao 接口并且按照 </p>
<p>mybatis 要求编写两个配置文件，就可以实现功能。远比我们之前的 jdbc 方便多了。（我们使用注解之后，将变得 </p>
<p>更为简单，只需要编写一个 mybatis 配置文件就够了。） </p>
<p>但是，这里面包含了许多细节，比如为什么会有工厂对象（SqlSessionFactory）,为什么有了工厂之后还 要有构建者对象（SqlSessionFactoryBuilder），为什么 IUserDao.xml 在创建时有位置和文件名的要求等等。 这些问题我们在自定义 mybatis 框架进行讲解。 </p>
<p>请注意：我们讲解自定义 Mybatis 框架，不是让大家回去自己去写个 mybatis，而是让我们能更好了了解 mybatis 内部是怎么执行的，在以后的开发中能更好的使用 mybatis 框架，同时对它的设计理念（设计模式）有 一个认识。</p>
<h2 id="mybatis中的连接池"><a href="#mybatis中的连接池" class="headerlink" title="mybatis中的连接池"></a>mybatis中的连接池</h2><ol>
<li>连接池，我们在实际开发中都会使用连接池，因为它可以减少我们开发的时间。</li>
</ol>
<ol start="2">
<li>mybatis中的连接池 ：</li>
</ol>
<p>​        mybatis连接池提供了3中方式的配置 ：</p>
<p>​                    配置的位置：主配置文件SqlMapConfig.xml中的dataSource标签，type属性就是表示采用何种连接池方式</p>
<p>​                type属性 的取值：</p>
<p>​                                POOLED：采用传统的javac.sql.DataSource规范中的连接池，mybatis中有针对规范的实现</p>
<p>​                                UNPOOLED：采用传统的获取连接的方式，虽然也实现了javax.sql.DataSource接口，但是并没有使用池的思想</p>
<p>​                                JNDI：采用服务器提供的JNDI技术实现，来获取DataSource对象，不同的服务器所能拿到的DataSource是不一样的。</p>
<p>​                                        注意：如果不是web或者maven的war工程，是不能使用的，我们使用的是Tomcat服务器，采用的连接池就是dbcp连接池</p>
<p>​                            </p>
<h3 id="mybatis中的事务"><a href="#mybatis中的事务" class="headerlink" title="mybatis中的事务"></a>mybatis中的事务</h3><p>什么是事务</p>
<p>事务的四大特性</p>
<p>不考虑隔离性会产生的3个问题</p>
<p>解决办法：四种隔离级别</p>
<p>mybatis中是通过sqlsession对象的commit方法和rollback方法实现事务的提交和回滚</p>
<h2 id="mybatis中的多表查询"><a href="#mybatis中的多表查询" class="headerlink" title="mybatis中的多表查询"></a>mybatis中的多表查询</h2><p>一对一的查询操作</p>
<p>我们使用user表和account表关联</p>
<p>在account表中新建主表属性  private  User  user</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br></pre></td></tr></table></figure>





<p>在account的配置文件中，我们编写映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"lei.study.dao.IAccountDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountMap"</span> <span class="attr">type</span>=<span class="string">"lei.study.domain.Account"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非主键字段的对应--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"lei.study.domain.User"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userAddress"</span> <span class="attr">column</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllAccount"</span> <span class="attr">resultMap</span>=<span class="string">"accountMap"</span>&gt;</span></span><br><span class="line">        SELECT u.*,a.id AS aid,a.uid, a.money from account a, user u WHERE u.id = a.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>一对多的关系</p>
<p>一个用户可能关联多张账户表</p>
<p>在User实体中，新建Account属性集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> Date userBirthday;</span><br><span class="line"><span class="keyword">private</span> String userSex;</span><br><span class="line"><span class="keyword">private</span> String userAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br></pre></td></tr></table></figure>



<p>UserDao的映射文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"lei.study.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询结果的列名和实体类的属性名的对应关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAccountMap"</span> <span class="attr">type</span>=<span class="string">"lei.study.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非主键字段的对应--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userAddress"</span> <span class="attr">column</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">ofType</span>=<span class="string">"lei.study.domain.Account"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userAccountMap"</span>&gt;</span></span><br><span class="line">        SELECT * FROM user u LEFT OUTER JOIN account a on u.id = a.uid;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="多对多的关系"><a href="#多对多的关系" class="headerlink" title="多对多的关系"></a>多对多的关系</h3><p>​    用户可以有多个角色</p>
<p>​    一个角色可以赋予多个用户</p>
<p>​    用户和角色之间是多对多</p>
<h2 id="1-mybatis中的延迟加载"><a href="#1-mybatis中的延迟加载" class="headerlink" title="1. mybatis中的延迟加载"></a>1. mybatis中的延迟加载</h2><p>什么是延迟加载？</p>
<p>问题：在一对多中，当我们有一个用户，它有100个账户</p>
<p>​            在查询用户的时候，要不要把关联的账户查出来</p>
<p>​            在查询账户的时候，要不要把关联的用户查出来？</p>
<p>​            </p>
<p>​        在查询用户时，用户下的账户信息是什么时候使用，什么时候查询的</p>
<p>​        在查询账户时，账户的所属用户信息应该是随着账户查询时一起查询出来。</p>
<p><strong>什么是延迟加载</strong>：在真正使用数据时才发起查询，不用的时候不用查询，，按需加载（懒加载）</p>
<p><strong>什么是立即加载？</strong>：不管用不用，只要一调用方法，马上发起查询</p>
<p>在对应的四种表关系中：一对一，多对一，一对一，多对多</p>
<p><strong>一对多，多对多：</strong>通常情况下我们都是采用延迟加载</p>
<p><strong>多对一，一对一：</strong>通常情况下，我们都是采用立即加载</p>
<p>我们可以在mybatis全部配置中或者是每个映射器中配置相关的属性信息，然后进行配置。</p>
<h2 id="2-mybatis中的缓存"><a href="#2-mybatis中的缓存" class="headerlink" title="2. mybatis中的缓存"></a>2. mybatis中的缓存</h2><p>什么是缓存？</p>
<p>​        存在于内存中的临时数据</p>
<p>为什么使用缓存</p>
<p>​        减少和数据库的交互次数，提高执行效率</p>
<p>什么样的数据使用缓存，什么样的数据不能使用</p>
<p>​            适用于缓存：</p>
<p>​                    经常查询，并且不经常改变的</p>
<p>​                    数据的正确与否对最终结果影响不大的</p>
<p>​            不适用与缓存：</p>
<p>​                    经常改变的数据</p>
<p>​                    数据的正确与否对最终的结果影响很大的</p>
<p><strong>mybatis中一级缓存和二级缓存</strong></p>
<p><strong>一级缓存：</strong></p>
<p>​            它指的是Mybatis中Sqlsession对象的缓存</p>
<p>​            当我们执行查询之后，查询的结果会同时存入到Sqlsession为我们提供的一块区域中，该区域的结构是一个Map，当我们再次查询同样的数据，mybatis会先去sqlsession中查询是否有，有的话直接拿出来用。</p>
<p>​        当SqlSession对象消失的时候，mybatis的一级缓存也就消失了。</p>
<p>一级缓存是sqlsession范围的缓存，当调用sqlsession的修改，添加，删除，commit（） close()等方法时，就会清空一级缓存。</p>
<p><strong>二级缓存：</strong></p>
<p>​        它指的是mybatis中的sqlsessionFacory对象的缓存，由同一个sqlsessFactory对象创建的SqlSession共享其缓存。</p>
<p>​        二级缓存的使用步骤：</p>
<p>​                    第一步：让Mybatis框架支持二级缓存，（在SQlMapConfig.xml中配置）</p>
<p>​                    第二步：让当前的映射文件支持二级缓存（在IUserDao.xml中配置）</p>
<p>​                    第三步：让当前的操作支持二级缓存（在select标签中进行相关类的配置）</p>
]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试，阿里</tag>
      </tags>
  </entry>
  <entry>
    <title>spring整理</title>
    <url>/2020/06/09/spring/</url>
    <content><![CDATA[<h3 id="1-spring两个核心容器对象的区别"><a href="#1-spring两个核心容器对象的区别" class="headerlink" title="1. spring两个核心容器对象的区别"></a>1. spring两个核心容器对象的区别</h3><ol>
<li>ApplicationContext</li>
</ol>
<p>它在构建核心容器的时候，采用的创建对象的策略是立即加载的方式，也就是说，只要一读取配置文件马上就创建配置文件中配置的对象、</p>
 <a id="more"></a>



<ol start="2">
<li>BeanFactory</li>
</ol>
<p>它在构建核心容器时，创建对象采用的策略是采用延迟加载的方式，也就是说，什么时候根据id获取对象了，什么时候才真正的创建对象。</p>
<h3 id="2-spring对bean的管理细节"><a href="#2-spring对bean的管理细节" class="headerlink" title="2. spring对bean的管理细节"></a>2. spring对bean的管理细节</h3><h4 id="创建bean的三种方式"><a href="#创建bean的三种方式" class="headerlink" title="创建bean的三种方式"></a>创建bean的三种方式</h4><ol>
<li><p>第一种方式，使用默认构造函数创建</p>
<p>在spring的配置文件中使用bean标签，配以id 和class属性之后，且没有其他属性和标签时，采用的就是默认构造函数创建bean对象，此类如果类中没有默认构造函数，则对象无法创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--这是第一种方式，直接使用默认构造函数的方式进行创建--&gt;</span><br><span class="line">    &lt;!--&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"lei.study.service.impl.userServiceImpl"</span>&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li>使用普通工厂中的方法创建对象，（使用某个类中的方法创建对象，并存入spring容器中  ）</li>
</ol>
<p>创建需要实例化的工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IUserService <span class="title">getUserServiceInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> userServiceImpl();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>spring 容器中进行配置</p>
  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id="factoryInstance" class="lei.study.factory.factoryInstance"&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id="userService" factory-bean="factoryInstance" factory-method="getUserServiceInstance"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>（工厂中有可能是一个普通方法还可能是一个静态方法，这是时候使用）使用工厂中的静态方法创建对象，使用某个类中的静态方法创建对象，并存入spring容器中</li>
</ol>
<p>静态方法中需要创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">factoryStaticInstance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IUserService <span class="title">getUserServiceInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> userServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--刚才的第二种创建中，可能不是一个普通类，而是一个静态的类--&gt;</span><br><span class="line">    &lt;bean id="userService" class="lei.study.factory.factoryStaticInstance" factory-method="getUserServiceInstance"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>



<h4 id="3-bean对象的作用范围"><a href="#3-bean对象的作用范围" class="headerlink" title="3. bean对象的作用范围"></a>3. bean对象的作用范围</h4><p>&lt;bean标签的作用范围</p>
<p>bean标签的scope属性：</p>
<p>作用：用于指定bean的作用范围</p>
<p>取值：（常用的就是singleton和protopyte）</p>
<p>singleton：为默认值，是单例的</p>
<p>protopyte： 多例的</p>
<p>request：作用于web应用的请求范围</p>
<p>session：作用于web应用的会话范围</p>
<p>global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境是作用就是session</p>
<h4 id="4-bean的生命周期"><a href="#4-bean的生命周期" class="headerlink" title="4. bean的生命周期"></a>4. bean的生命周期</h4><p>当创建对象配置bean标签中的内容的时候，我们 可以指定bean的生命周期，当配置的是单例模式的时候，我们使ApplicationContext创建容器的时候，对象就创建了，当我们关闭对象的时候，对象销毁。</p>
<p>当配置的是单例模式的时候，我们使BeanFactory创建容器的时候，对象不会创建，只有当我们使用的时候，才会创建对象，，什么时候对象销毁呢，针对多例模式，spring容器不提供销毁对象的方法，把对象的销毁交给java的垃圾回收机制进行回收。</p>
<p><strong>单例对象：</strong></p>
<p>出生：当容器创建时，对象出生</p>
<p>活着：当容器还在，对象一直活着</p>
<p>死亡：当容器销毁，对象消亡</p>
<p>总结：单例对象的声明周期和容器相同</p>
<p><strong>多例对象：</strong></p>
<p> 出生：当我们使用对象时，spring对象为我们创建</p>
<p>活着：对象只要是在使用过程中，就一直活着</p>
<p>死亡：当对象长时间不用，且没有别的对象引用时，由java的垃圾回收器进行回收</p>
<h3 id="5-spring的依赖注入"><a href="#5-spring的依赖注入" class="headerlink" title="5. spring的依赖注入"></a>5. spring的依赖注入</h3><p>IOC的作用，就是降低程序间的耦合关系，也叫做依赖关系</p>
<p>依赖关系的管理：以后都交给spring来进行维护</p>
<p>在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中进行说明。</p>
<p>依赖关系的维护就称之为依赖注入</p>
<p>依赖注入：</p>
<p>能注入的数据，有三类</p>
<p>（1） 基本类型和string</p>
<p>（2）其他bean类型（在配置文件中或者是注解中配置过的bean）</p>
<p>（3）其他类型/集合类型</p>
<p><strong>依赖注入的方式有三种：</strong></p>
<p><strong>（1）第一种：使用构造函数提供</strong></p>
<p><strong>（2）第二种：使用set方法提供</strong></p>
<p><strong>（3）第三种：使用注解 提供</strong></p>
<h5 id="1-使用构造函数提供注入"><a href="#1-使用构造函数提供注入" class="headerlink" title="1. 使用构造函数提供注入"></a>1. 使用构造函数提供注入</h5><p>构造函数注入，需要在bean标签内，使用constructor-arg标签，标签出现的位置是bean标签的内部，、</p>
<p>标签中的属性：</p>
<p>​        type：用户指定要注入的数据的数据类型，该数据类型也是构造函数中某个或者是某些参数的类型</p>
<p>​        index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置是从0开始的</p>
<p>​        name：用于指定给构造函数中指定名称的参数赋值</p>
<p>=============最常用的是使用name的方式，给指定的参数进行赋值，=============以上三种都是用于指定给构造函数找那个的那个参数进行赋值</p>
<p>​        value：用户提供基本类型和string类型的数据</p>
<p>​        ref： 用于指定其他的bean类型，指的就是在spring的IOC核心容器中，出现过的bean对象。</p>
<p>构造函数的特点与优势：</p>
<p>​    在获取bean对象时，注入数据是必须的操作，否则对象是无法创建成功的。当我们使用的某个类的时候，就想使用某些数据的时候，我们就可以使用构造函数注入的方式，使用这种方式更简单。</p>
<p>弊端：</p>
<p>​        改变了bean对象的实例化方式，使我们在创建对象的时候，如果用不到这些数据，也必须提供。当我们在开发中除非非要采用这种方式进行创建，一般的时候我们是不使用的。</p>
<p>例如：</p>
<p>我们在userServiceImpl中写生需要注入的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date brithday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">userServiceImpl</span><span class="params">(String name, Integer age, Date brithday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.brithday = brithday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"userServiceImpl中的save方法执行了"</span>+name+<span class="string">","</span>+age+<span class="string">","</span>+brithday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后在spring的配置文件中，进行依赖的注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖注入的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService2"</span> <span class="attr">class</span>=<span class="string">"lei.study.service.impl.userServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"第一个"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"19"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"brithday"</span> <span class="attr">ref</span>=<span class="string">"dataNow"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataNow"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    System.out.println(ac);</span><br><span class="line">    IUserService userService = (IUserService) ac.getBean(<span class="string">"userService2"</span>);</span><br><span class="line">    userService.saveUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>执行结果：</p>
<p>userServiceImpl中的save方法执行了第一个,19,Sun May 17 15:23:41 CST 2020</p>
<p>说明注入成功</p>
<p>引入：</p>
<p>在进行spring配置文件的编写的时候，需要在配置文件中引入约束，spring容器中相对完整的约束如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">       xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/aop/spring-aop.xsd "</span></span><br><span class="line">       <span class="keyword">default</span>-autowire=<span class="string">"byName"</span>&gt;</span><br></pre></td></tr></table></figure>







<h3 id="2-set方法注入-经常使用的方式"><a href="#2-set方法注入-经常使用的方式" class="headerlink" title="2. set方法注入(经常使用的方式)"></a>2. set方法注入(经常使用的方式)</h3><p>set方式注入，设计的标签：property</p>
<p>出现的位置，bean标签的内部</p>
<p>标签的属性：</p>
<p>​        name：用于指定注入时所调用的set方法名称</p>
<p>​        value：用户提供基本类型和string类型的数据</p>
<p>​        ref： 用于指定其他的bean类型，指的就是在spring的IOC核心容器中，出现过的bean对象。</p>
<p><strong>set注入的优点：</strong></p>
<p>​        创建的对象的时候没有明确的限制，可以直接使用默认构造函数，然后通过property 找到对应的set方法名称，进行一些取值的注入即可</p>
<p><strong>set注入的缺点：</strong></p>
<p>​    如果有某个成员必须有值，则获取对象时，有可能set方法没有执行。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date brithday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * setter方式注入的方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrithday</span><span class="params">(Date brithday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brithday = brithday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"userServiceImpl中的save方法执行了"</span>+name+<span class="string">","</span>+age+<span class="string">","</span>+brithday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在spring中的配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--setter方式注入的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService3"</span> <span class="attr">class</span>=<span class="string">"lei.study.service.impl.userServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"哈哈哈"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brithday"</span> <span class="attr">ref</span>=<span class="string">"dataNow"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在测试文件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    System.out.println(ac);</span><br><span class="line">    IUserService userService = (IUserService) ac.getBean(<span class="string">"userService3"</span>);</span><br><span class="line">    userService.saveUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="使用set注入-复杂数据类型-集合类型的数据结构"><a href="#使用set注入-复杂数据类型-集合类型的数据结构" class="headerlink" title="使用set注入 复杂数据类型/集合类型的数据结构"></a>使用set注入 复杂数据类型/集合类型的数据结构</h5><p>用于给List结构集合注入的标签有：list  array    set</p>
<p>用户给Map结构集合注入的标签：map   props</p>
<p>注意：结构相同，可以互换</p>
<h6 id=""><a href="#" class="headerlink" title="========================================================="></a>=========================================================</h6><h2 id="Spring基于注解的IOC以及IOC的案例"><a href="#Spring基于注解的IOC以及IOC的案例" class="headerlink" title="Spring基于注解的IOC以及IOC的案例"></a>Spring基于注解的IOC以及IOC的案例</h2><p>注意： 在本节中我们学习使用注解进行依赖的主注入，在上面的案例中，我们使用的是配置文件的方式进行配置的。</p>
<p>我们学习了———</p>
<p>用于创建对象</p>
<p>用于注入数据</p>
<p>用于改变作用范围的</p>
<p>和生命周期相关</p>
<p>等等相关的配置</p>
<p><strong>当我们使用注解之后，</strong></p>
<p><strong>用户创建对象的注解</strong>：他们的作用就和在XML配置文件中，编写一个&lt;bean 标签实现的功能是一样的</p>
<p><strong>用于注入数据的</strong>：他们的作用就和在xml配置文件中的bean 标签中写一个property标签的作用是一样的</p>
<p><strong>用于改变作用范围的</strong>：他们的作用就和在bean标签中使用scope属性实现的功能是一样的</p>
<p><strong>和生命周期相关</strong>：他们的作用就和在bean标签中使用  init-method 和destory-method的作用是一样的</p>
<p><strong>(1) 创建对象的注解：</strong></p>
<p><strong>①    @Component    作用在类上</strong></p>
<p>作用：就是把当前类对象存入spring容器中</p>
<p>属性：value：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母小写</p>
<p><strong>注意：使用这个注解之前，我们需要在spring的配置文件中，加上一个说明，告知spring在创建容器的时候，需要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为context名称空间和约束中</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--告诉spring容器需要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"lei.study"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"haha"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl2</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"userServiceImpl中的save方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">    IUserService userService = (IUserService) ac.getBean(<span class="string">"haha"</span>);</span><br><span class="line">    userService.saveUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>②   @ Controller        @Service      @Repository   三个注解</strong></p>
<p>以上三个注解他们的作用和属性与Component是一模一样的。他们三个是spring框架，为我们明确提供的三层对象使用的注解，使三层对象更加清晰</p>
<p> <strong>@ Controller</strong>  一般使用在表现层</p>
<p> <strong>@Service</strong>      一般使用的service层</p>
<p><strong>@Repository</strong>  一般使用在持久层</p>
<p> <strong>（2）注入数据的注解</strong></p>
<p><strong>@Autowired :</strong> </p>
<p>出现位置：可以使变量上，也可以是方法上</p>
<p>细节：在使用注解注入数据的时候，set方法就不是必须的了</p>
<p>作用就是，自动按照类型注入（例如   @Autowired   在这上面注解 private  IUserDao  userDao = null，那么就会按照IUserDao  类型 ，去spring容器中进行寻找对象取值），只要容器中有唯一的一个bean 对象类型和要注入的变量类型匹配，就可以注入成功。如果IoC容器中没有任何bean的类型和要注入的变量类型匹配，则报错。</p>
<p>如果有多个类型相互匹配的时候，就会自动按照名称(userDao 这个名称)进行找对象bean对象，如果名称不一致或者是不存在，就会报错。</p>
<p>例如我们定义了两个userDaoImpl方法实现了同一个接口，并在每一个方法上面使用@Component注解生成对象到容器中</p>
<p>第一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"userDao1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userDaoImpl</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"saveUser1方法执行了,保存了用户1111111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"userDao2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userDaoImpl2</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"saveUser1方法执行了,保存了用户222222"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>，当我们在service层取值调用bean的时候</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      userDao.saveUser();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这个时候按照类型IUserDao寻找bean的时候就会找到两个bean（因为@Autowired是按照类型进行寻找的），程序会报错，这个时候我们就可以和@Qualifer注解进行配合使用</p>
<p> <strong>这个时候出现了@Qualifer注解</strong></p>
<p><strong>@Qualifer</strong></p>
<p>作用：在按照类中注入的基础之上再按照名称进行注入，它在给类成员注入时不能单独使用，但是在给方法参数注入时可以单独使用。</p>
<p>属性：value 用于指定注入bean的id</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(value = <span class="string">"userDao2"</span>)</span><br><span class="line"><span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    userDao.saveUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>还有一个注解：</strong></p>
<p><strong>@Resource</strong></p>
<p>@Recource 作用是，直接按照bean的id注入，它可以独立使用</p>
<p>属性：name   ：用于指定bean的id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"userDao2"</span>)</span><br><span class="line"> <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     userDao.saveUser();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p><strong>需要注意的是：以上三种注解都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。另外，集合类型的注入只能通过XML来实现。</strong></p>
<p><strong>@Value注解</strong></p>
<p>作用：用于注入基本类型和String类型的数据</p>
<p>属性：value—用于指定数据的值，它可以使用spring中的spEl（也就是spring中的EL表达式）</p>
<p>​            spEl的写法 ：   ${表达式}</p>
<p><strong>（3）用于改变作用范围的注解</strong></p>
<p>他们的作用就和在bean标签中使用scope属性实现的功能是一样的</p>
<p>Scope：作用—用于指定bean的作用范围</p>
<p>属性：value：指定范围的取值，常用取值  single    prototype   分别对应单例和多例</p>
<p><strong>（4）和生命周期相关的注解</strong></p>
<p> 他们的作用就和在bean标签中使用init-method和destory-method的作用是一样的</p>
<p>@PreDestory   作用：用于指定销毁方法</p>
<p>@PostConstruct    作用：用于指定初始化方法</p>
<h3 id="-1"><a href="#-1" class="headerlink" title="=================================================="></a>==================================================</h3><h1 id="Spring的新注解"><a href="#Spring的新注解" class="headerlink" title="Spring的新注解"></a>Spring的新注解</h1><p>@Configuration   </p>
<pre><code>作用》：指定当前类是一个配置类    </code></pre><p>​                细节：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写</p>
<p>@ComponentScan </p>
<p>​                作用》：用于通过注解指定spring在创建容器时要扫描的包</p>
<p>​                属性：   value：它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包，我们使用这个注解就相当于在spring的配置文件xml中使用了  &lt;context:component-scan base-package=”lei.study”/&gt;  进行了一个包扫描的作用</p>
<p>@Bean注解</p>
<p>​            作用》：用于把当前方法的返回值作为bean对象存入spring的Ioc容器中</p>
<p>​            属性：  name  用于指定bean的id，当不写时，默认值是当前方法的名称</p>
<p>​            细节：当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象</p>
<p>​                        查找的方式和Autowired注解的作用是一样的</p>
<p>@Import<br>                作用》：用于导入其他的配置类</p>
<p>​                属性：value   用于指定其他配置类的字节码            </p>
<p>​                            当我们使用Import的注解之后，有Import注解的类是父配置类，而导入的都是子配置类</p>
<p>@PropertySource   </p>
<p>​                作用：用于指定properties文件的位置</p>
<p>​                            关键字 ： classpath   表示类路径下</p>
<h2 id="-2"><a href="#-2" class="headerlink" title="=========================================="></a>==========================================</h2><h3 id="Spring中的AOP配置"><a href="#Spring中的AOP配置" class="headerlink" title="Spring中的AOP配置"></a>Spring中的AOP配置</h3><p>spring中基于XML的AOP配置步骤：</p>
<ol>
<li><p>把通知Bean也交给spring容器来进行管理</p>
</li>
<li><p>使用aop:config标签表明开始AOP的配置</p>
</li>
<li><p>使用aop：aspect标签表明配置切面</p>
<p>​                    id属性：是给切面提供一个唯一标识</p>
<p>​                    ref属性：是指定通知类bean的id</p>
</li>
<li><p>在aop：aspect标签的内部使用对应标签来配置通知的类型</p>
<p>​                我们现在是让我们定义的切面方法在切入点方法执行之前执行，所以是前置通知</p>
<p>​                aop：before：表示配置前置通知</p>
<p>​                method属性：用于指定Logger类中哪个方法是前置通知</p>
<p>​                pointcut属性：用于指定切入点表达式，改表达式的含义指的是对业务层中哪些方法进行增强</p>
<p>​        切入点表达式的写法：</p>
<p>​                关键字：execution（表达式）</p>
<p>​                表达式：</p>
<p>​                                访问修饰符   返回值    包名.包名.包名…..类名.方法名（参数列表）</p>
<p>​                标准的表达式写法  execution(public void lei.study.service.impl.userServiceImpl.saveUser()</p>
</li>
</ol>
<p>   例如我们建立一个切入方法，就是打印日志信息，建立一个日志类，然后写一些方法</p>
<p>   例如：</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要注入切入点的方法，也就是在切入点之前或者之后需要执行的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLogger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打印日志的方法，开始打印日志。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>   把上面的方法注入到userservice中</p>
<p>   userServiceImpl.java</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"userServiceImpl保存用户的操作执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们想把日志信息注入到saveUser（）方法之前或者是之后执行，我们就可以在spring的配置文件中，进行AOP切面的一些配置，就可以使用AOP完成相关的切面编程</p>
<p>在spring的配置文件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"lei.study.service.impl.userServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"printLogger"</span> <span class="attr">class</span>=<span class="string">"lei.study.utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"printLogger"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--建立切入点方法的关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printLogger"</span> <span class="attr">pointcut</span>=<span class="string">"execution(public void lei.study.service.impl.userServiceImpl.saveUser())"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在这里我们需要注意切入点表达式的写法</p>
<p>表达式：</p>
<p>​            访问修饰符   返回值    包名.包名.包名…..类名.方法名（参数列表）</p>
<p>​            标准的表达式写法  execution(public void lei.study.service.impl.userServiceImpl.saveUser()</p>
<p>全通配写法</p>
<p>​            表达式的全通配写法    </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> 表达式的全通配写法</span><br><span class="line">* *..*.*(..)</span><br></pre></td></tr></table></figure>



<p>解释说明：在上面的方法中，我们只对userService类中一个saveUser（）方法进行了增强，如果我们需要使用这个日之类对所有的userService中的方法都需要增强，我们不需要一个一个方法的进行编写，只需要写一个表达式的全通配写法   表达式的全通配写法           </p>
<p><strong>注意：</strong></p>
<p>​        在标准写法中，</p>
<p><strong>访问修饰符可以省略</strong> ：  public void lei.study.service.impl.userServiceImpl.saveUser() 中的public可以省略，写成  void lei.study.service.impl.userServiceImpl.saveUser()</p>
<p><strong>返回值可以使用通配符</strong>：表示任意返回值类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">* lei.study.service.impl.userServiceImpl.saveUser()</span><br></pre></td></tr></table></figure>



<p><strong>包名可以使用通配符：</strong>表示任意包。但是有几级包，就需要写几个*</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* *.*.*.*.userServiceImpl.saveUser()</span><br></pre></td></tr></table></figure>



<p><strong>包名可以使用..表示当前包及其子包</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* *..userServiceImpl.saveUser()</span><br></pre></td></tr></table></figure>



<p><strong>包名和方法名都可以使用*来实现通配：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* *..*.*()</span><br></pre></td></tr></table></figure>



<p><strong>参数列表：</strong></p>
<p>可以直接写数据类型</p>
<p>​            基本类型直接写名称   int</p>
<p>​            引用类型写包.类名的方式   java.lang.String        </p>
<p>可以使用通配符表示任意类型，但是必须有参数</p>
<p>可以使用..表示有无参数均可，有参数可以使任意类型</p>
<p>全通配写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 表达式的全通配写法</span><br><span class="line">* *..*.*(..)</span><br></pre></td></tr></table></figure>



<p><strong>实际开发中：</strong></p>
<p>​    实际开发中切入点表达式的通常写法：</p>
<p>​            我们可以切到业务层实现类下的所有方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* lei.study.service.impl.*.*(..)</span><br></pre></td></tr></table></figure>





<p>在上面的例子中我们可以使用如下的写法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">    表达式的全通配写法</span><br><span class="line">                * *..*.*(..)</span><br><span class="line">--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:aspect id=<span class="string">"logAdvice"</span> ref=<span class="string">"printLogger"</span>&gt;</span><br><span class="line">        &lt;!--建立切入点方法的关联--&gt;</span><br><span class="line">        &lt;aop:before method="printLogger" pointcut="execution(* *..*.*(..))"&gt;&lt;/aop:before&gt;</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>





<p><strong>通知的类型：</strong></p>
<p><strong>前置通知</strong>：在切入点方法执行之前执行</p>
<p><strong>后置通知</strong>：在切入点方法正常执行之后执行，也和异常通知永远只能执行一个 </p>
<p><strong>异常通知</strong>：在切入点方法执行产生异常之后执行，它和后置通知永远只能执行一个</p>
<p><strong>最终通知</strong>：无论切入点方法是否正常执行它都会在其后面执行。</p>
<p><strong>环绕通知：</strong>当我们配置了环绕通知之后，切入点方法没有执行，而通知方法执行了。</p>
<p>切面的配置：</p>
<p>需要注入切入点的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforePrint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知，打印日志的方法，开始打印日志。。。在切入点方法执行之前执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPrint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知，结束打印日志。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printThrow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"切入点方式产生异常之后，执行的异常通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterLogger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是最终通知， 无论切入点方法是否正常执行都会在切入点之后执行的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"lei.study.service.impl.userServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"printLogger"</span> <span class="attr">class</span>=<span class="string">"lei.study.utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    表达式的全通配写法</span></span><br><span class="line"><span class="comment">                * *..*.*(..)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"printLogger"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--建立切入点方法的关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrint"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* lei.study.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterPrint"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* lei.study.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"printThrow"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* lei.study.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterLogger"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* lei.study.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="spring中的事物控制"><a href="#spring中的事物控制" class="headerlink" title="spring中的事物控制"></a>spring中的事物控制</h2><h3 id="spring基于XML的声明式事务控制"><a href="#spring基于XML的声明式事务控制" class="headerlink" title="spring基于XML的声明式事务控制"></a>spring基于XML的声明式事务控制</h3><p>在spring中我们不用再编写关于事务的一些操作方法，我们可以直接使用xml配置的方式，对数据库连接操作中的方法进行相关事务的配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring中基于XML的声明式事务控制配置步骤 </span><br><span class="line">1. 配置事务管理器 </span><br><span class="line">2. 配置事务的通知           </span><br><span class="line">		此时我们需要导入事务的约束 tx的名称和约束  同时也需要aop的           </span><br><span class="line">		使用 &lt;tx:advice&gt; 配置事务的通知                    </span><br><span class="line">			id :给事务通知起一个唯一标识                    </span><br><span class="line">			transtration-manager：给事务通知提供一个事务管理器引用 </span><br><span class="line">3，配置AOP中的通用切入点表达式 </span><br><span class="line">4. 建立事务通知和切入点表达式的对应关系 </span><br><span class="line">5. 配置事务的属性        </span><br><span class="line">			是在事务的通知  tx:advice 标签的内部进行配置</span><br></pre></td></tr></table></figure>



<ol>
<li><p><strong>在spring中配置事务管理器</strong></p>
<p>DataSourceTransactionManager可以配置JDBC或者是ibatis关于事务的配置</p>
<p>HiberateTransactionManager 可以配置整合Hiberate中关于事务的配置</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>配置事务的通知</strong>  （以及配置事务的属性）</li>
</ol>
<p>在配置事务的通知中，我们需要配置事务的一些属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvicce"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务的属性</span></span><br><span class="line"><span class="comment">            isolation=""  用于指定事务的隔离级别   默认值是default ，表示使用数据库的默认隔离级别</span></span><br><span class="line"><span class="comment">            propagation=""  用于指定事务的传播行为，默认值是REQUIRED 表示一定有事务，增删改的选择，查询方法可以选择SUPPORTS</span></span><br><span class="line"><span class="comment">            read-only=""   用于指定事务是否只读，只有查询方法才能设置为true。默认值是false，表示读写</span></span><br><span class="line"><span class="comment">            rollback-for=""  用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚，没有默认值，表示任何异常都回滚</span></span><br><span class="line"><span class="comment">            no-rollback-for=""  用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常事务回滚，没有默认值，表示任何异常都回滚</span></span><br><span class="line"><span class="comment">            timeout=""     用于指定事务的超时时间，默认值是-1 表示永不超时，如果指定了数值，以秒为单位</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="3">
<li><strong>配置事务的切入点表达式以及建立切入点表达式和事务通知的对应关系</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* lei.study.service.impl.*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--建立切入点表达式和事务通知的对应关系--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvicce"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h3 id="spring基于注解的声明式事务控制"><a href="#spring基于注解的声明式事务控制" class="headerlink" title="spring基于注解的声明式事务控制"></a>spring基于注解的声明式事务控制</h3>]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试，阿里</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯面试整理</title>
    <url>/2020/06/08/%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="java相关："><a href="#java相关：" class="headerlink" title="java相关："></a>java相关：</h2><a id="more"></a>

<!-- more -->


<h3 id="JDK中哪一些是线程安全的集合类？是怎么保证安全的？"><a href="#JDK中哪一些是线程安全的集合类？是怎么保证安全的？" class="headerlink" title="JDK中哪一些是线程安全的集合类？是怎么保证安全的？"></a>JDK中哪一些是线程安全的集合类？是怎么保证安全的？</h3><p>早在jdk的1.1版本中，所有的集合都是线程安全的。但是在1.2以及之后的版本中就出现了一些线程不安全的集合，为什么版本升级会出现一些线程不安全的集合呢？因为线程不安全的集合普遍比线程安全的集合效率高的多。随着业务的发展，特别是在web应用中，为了提高用户体验减少用户的等待时间，页面响应速度(也就是效率)是优先考虑的。而且对线程不安全的集合加锁以后也能达到安全的效果（但是效率会低，因为会有锁的获取以及等待）。其实在jdk源码中相同效果的集合线程安全的比线程不安全的就多了一个同步机制，但是效率上却低了不止一点点，因为效率低，所以已经不太建议使用了。</p>
<p>Vector：就比Arraylist多了个同步化机制（线程安全）。</p>
<p>Hashtable：就比Hashmap多了个线程安全。</p>
<p>hashtable是线程安全的,即hashtable的方法都提供了同步机制；hashmap不是线程安全的,即不提供同步机制 ；hashtable不允许插入空值,hashmap允许!</p>
<p>ConcurrentHashMap:是一种高效但是线程安全的集合。</p>
<p>Stack：栈，也是线程安全的，继承于Vector。</p>
<h3 id="2-什么是线程安全？线程安全问题是由什么引起的？什么是死锁？"><a href="#2-什么是线程安全？线程安全问题是由什么引起的？什么是死锁？" class="headerlink" title="2.什么是线程安全？线程安全问题是由什么引起的？什么是死锁？"></a>2.什么是线程安全？线程安全问题是由什么引起的？什么是死锁？</h3><p>线程安全就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。</p>
<p>  线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据。</p>
<p>线程安全问题都是由全局变量及静态变量引起的。</p>
<p>若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</p>
<p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁。</p>
<p>死锁产生有四个必要条件，打破任意一个，就能打破死锁状态: 1 互斥条件 2 请求与保持 3 不剥夺 4 循环等待</p>
<p>互斥条件：一个资源每次只能被一个进程使用，即在一段时间内某 资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。</p>
<p>请求与保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源 已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。</p>
<p>不可剥夺条件:进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能 由获得该资源的进程自己来释放（只能是主动释放)。</p>
<p>循环等待条件:若干进程间形成首尾相接循环等待资源的关系。</p>
<h3 id="3-你了解哪些数据结构？栈这种数据结构能应用在哪些场景中-举几个例子说明一下栈的实际应用场景？栈的特点是什么？"><a href="#3-你了解哪些数据结构？栈这种数据结构能应用在哪些场景中-举几个例子说明一下栈的实际应用场景？栈的特点是什么？" class="headerlink" title="3.你了解哪些数据结构？栈这种数据结构能应用在哪些场景中?举几个例子说明一下栈的实际应用场景？栈的特点是什么？"></a>3.你了解哪些数据结构？栈这种数据结构能应用在哪些场景中?举几个例子说明一下栈的实际应用场景？栈的特点是什么？</h3><p>栈这种结构的特点：栈只能从表的一端存取数据，另一端是封闭的。在栈中，无论是存数据还是取数据，都必须遵循”先进后出”的原则，即最先进栈的元素最后出栈。</p>
<ol>
<li>使用栈进行符号的逆序输出：栈最大的特点是先进后出，所以逆序输出是栈经常用到的一个应用场景。首先把所有元素依次入栈，然后把所有元素出栈并输出，这样就实现了逆序输出。</li>
</ol>
<ol start="2">
<li>计算后缀表达式，碰见数字就入栈，碰见符号出栈运算运算。遇见数字就入栈，遇见符号就出栈，然后把结果再入栈</li>
</ol>
<ol start="3">
<li>语法检测，匹配括号是否成对出现:凡是遇到括号的前半部分，即把这个元素入栈，凡是遇到括号的后半部分就比对栈顶元素是否该元素相匹配，如果匹配，则前半部分出栈，否则就是匹配出错。</li>
</ol>
<ol start="4">
<li>什么是中缀表达式？</li>
</ol>
<p>​       中缀表达式利于人的理解，但不便于计算机的处理。因此需要将中缀表达式转换成后缀表达式，以方便计算机处理。所谓后缀表达式就是将运算符放在运算数之后。后缀表达式也称为逆波兰表达式。</p>
<h3 id="5-hashMap这种数据结构，假如让你自己去实现一个hashMap这种数据结构你会怎么去设计实现？（hashMap就是散列表，同一种说法）"><a href="#5-hashMap这种数据结构，假如让你自己去实现一个hashMap这种数据结构你会怎么去设计实现？（hashMap就是散列表，同一种说法）" class="headerlink" title="5.hashMap这种数据结构，假如让你自己去实现一个hashMap这种数据结构你会怎么去设计实现？（hashMap就是散列表，同一种说法）"></a>5.hashMap这种数据结构，假如让你自己去实现一个hashMap这种数据结构你会怎么去设计实现？（hashMap就是散列表，同一种说法）</h3><p>主要还是考的是hash表的结构，哈希表综合了数组和链表的优点，是一种寻址容易而且插入也相对容易的数据结构，哈希表既满足了数据查找方便，同时还不占用太多的内存空间，使用十分方便，哈希表有多种不同的实现方法，我们可以使用一种最常用的实现方法—拉链法来实现哈希表，这个哈希表可以理解为链表的数组。</p>
<p>哈希表是由数组+链表组成的，在数组中每个元素存储的是一个链表的头结点，数据存储在链表中，那么是按照怎么样的规则来进行存储的呢?一般的情况下是通过hash（key）%len获得，也就是元素的key的哈希值对数组长度取模得到。</p>
<p>hashMap其实是一个线性的数组实现的，所有可以理解为其存储数据的容器就是一个线性数组。</p>
<h3 id="6-算法方面了解哪些算法？排序算法中，选择排序和冒泡排序算法的区别在哪里？排序算法的稳定性是指什么？选择排序和冒泡排序的时间复杂度是多少？"><a href="#6-算法方面了解哪些算法？排序算法中，选择排序和冒泡排序算法的区别在哪里？排序算法的稳定性是指什么？选择排序和冒泡排序的时间复杂度是多少？" class="headerlink" title="6. 算法方面了解哪些算法？排序算法中，选择排序和冒泡排序算法的区别在哪里？排序算法的稳定性是指什么？选择排序和冒泡排序的时间复杂度是多少？"></a>6. 算法方面了解哪些算法？排序算法中，选择排序和冒泡排序算法的区别在哪里？排序算法的稳定性是指什么？选择排序和冒泡排序的时间复杂度是多少？</h3><p>选择排序：是一种最简单直观的排序算法，它的工作原理是每一次从待排序的数据元素中选出最小或者是最大的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完，选择排序是不稳定的排序方法。</p>
<p>冒泡排序：基本思想是将数组中的每个相邻元素进行两两比较，按照小元素在前（或大元素在前）的原则确定是否进行交换。这样每一轮执行之后，最大（或最小）的元素就会被交换到了最后一位。完成一轮之后，我们可以再从头进行第二轮的比较，直到倒数第二位（因为最后一位已经是被排序好的了）时结束。这样一轮之后，第二大（或第二小）的元素就会被交换到了倒数第二位。同样的过程会依次进行，直到所有元素都被排列成预期的顺序为止。</p>
<p>选择排序和冒泡排序算法的区别主要在于：两种排序比较的次数是相同的，但是交换的次数，选择排序是更少的，但是通常选择排序可能更快一点，冒泡排序是每一次都可能要交换，而选择排序是比较时记下a[i]的位置，最后用来交换的。交换过程是不一样的，但是查找过程是一样的。</p>
<p>时间复杂度：</p>
<p>冒泡排序时间复杂度：</p>
<p>N个数字要排序完成，总共进行N-1趟排序，每i趟的排序次数为(N-i)次，所以可以用双重循环语句，外层控制循环多少趟，内层控制每一趟的循环次数</p>
<p>综上所述：冒泡排序总的平均时间复杂度为：O(n2)</p>
<p>选择排序时间复杂度：</p>
<p>选择排序空间复杂度也是O(1)，是一种原地排序算法。</p>
<p>它的最好情况时间复杂度、最坏情况和平均情况时间复杂度都为 O（n^2）。</p>
<p>选择排序不是稳定的排序算法，因为它每次都要找出剩余未排序元素中的最小值，并和前面的元素交换位置，这样就破坏了稳定性。冒泡排序是一种稳定的排序算法。</p>
<h3 id="7-排序的稳定性是指什么？冒泡排序是稳定的排序算法，你这么证明，就是如果采用数据推导的方式去证明，你会如何证明是稳定的？"><a href="#7-排序的稳定性是指什么？冒泡排序是稳定的排序算法，你这么证明，就是如果采用数据推导的方式去证明，你会如何证明是稳定的？" class="headerlink" title="7. 排序的稳定性是指什么？冒泡排序是稳定的排序算法，你这么证明，就是如果采用数据推导的方式去证明，你会如何证明是稳定的？"></a>7. 排序的稳定性是指什么？冒泡排序是稳定的排序算法，你这么证明，就是如果采用数据推导的方式去证明，你会如何证明是稳定的？</h3><p>稳定排序是指原来相等的两个元素前后相对位置在排序后依然不变。</p>
<p>即在原序列中，r[i] = r[j]，且 r[i] 在 r[j] 之前，而在排序后，r[i] 仍在 r[j] 之前，则称这种排序算法是稳定的，否则称为不稳定的。</p>
<h2 id="操作系统："><a href="#操作系统：" class="headerlink" title="操作系统："></a>操作系统：</h2><h3 id="在操作系统中，实现多进程间通信有哪些方式？信号量是什么-能举几个具体的使用信号量的例子吗"><a href="#在操作系统中，实现多进程间通信有哪些方式？信号量是什么-能举几个具体的使用信号量的例子吗" class="headerlink" title="在操作系统中，实现多进程间通信有哪些方式？信号量是什么? 能举几个具体的使用信号量的例子吗?"></a>在操作系统中，实现多进程间通信有哪些方式？信号量是什么? 能举几个具体的使用信号量的例子吗?</h3><p>进程和线程的关注点是不一样的，进程是资源分配的基本单位，进程间资源是独立的，关注的是进程通信问题，线程间资源是共享的，关注的是安全问题。</p>
<p>操作系统进程间通信的方式有哪些？</p>
<p>管道（pipe）：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用，进程的亲缘关系指的是父子进程关系。</p>
<p>消息队列（message queue）：消息队列是消息的链表，存在在内核中并由消息队列表示符标示，消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限制等缺点。</p>
<p>共享内存：共享内存就是映射一段内被其它进程所访问的内存，共享内存是由一个进程创建，但是多个进程都可以访问，共享内存是最快的进程间通信方式，它是针对其它进程通信方式运行效率低而专门设计的，它往往与其它通信机制，如信号量配置使用，来实现进程间的同步和通信。</p>
<p>套接字（socket）：套接字也是进程间的通信机制，与其它通信机制不同的是，它可以用于不同机器间的进程通信。</p>
<p>信号：信号是一种比较复杂的通信方式，用于通知接受进程某个时间已经发生。</p>
<p>信号量：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁的机制，防止某进程正在访问共享资源时，其他进程也访问该资源，因此它主要作为不同进程或者同一进程之间不同线程之间同步的手段。</p>
<h2 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h2><h3 id="数据库的事务中，事务有原子性、一致性等等，他们都是什么？那么一致性是指什么？如果保证了原子性就一定能保证一致性吗？如果我的每个操作都是原子的那么是不是数据肯定能保证是一致的？不能保证，理由是什么？说出理由"><a href="#数据库的事务中，事务有原子性、一致性等等，他们都是什么？那么一致性是指什么？如果保证了原子性就一定能保证一致性吗？如果我的每个操作都是原子的那么是不是数据肯定能保证是一致的？不能保证，理由是什么？说出理由" class="headerlink" title="数据库的事务中，事务有原子性、一致性等等，他们都是什么？那么一致性是指什么？如果保证了原子性就一定能保证一致性吗？如果我的每个操作都是原子的那么是不是数据肯定能保证是一致的？不能保证，理由是什么？说出理由?"></a>数据库的事务中，事务有原子性、一致性等等，他们都是什么？那么一致性是指什么？如果保证了原子性就一定能保证一致性吗？如果我的每个操作都是原子的那么是不是数据肯定能保证是一致的？不能保证，理由是什么？说出理由?</h3><p>原子性：事务是数据库的逻辑工作单位,事务中的操作要么全做，要么不做。</p>
<p>一致性：事务执行的结果必须是使数据库从一个一致性变到另一个一致性。最常见的例子是转帐。例如从帐户A转一笔钱到帐户B上，如果帐户A上的钱减少了，而帐户B上的钱却没有增加，那么我们认为此时数据处于不一致的状态。</p>
<p>隔离性：一个事务的执行不能干扰其他事物。即一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发执行的各个事务之间不能相互干扰。</p>
<p>持久性：一个事务一旦提交，他对数据库中的数据的改变应该是永久性的。接下来的其它操作或者故障不应该对其执行结果有任何影响。</p>
<h4 id="原子性和一致性的关系是什么？"><a href="#原子性和一致性的关系是什么？" class="headerlink" title="原子性和一致性的关系是什么？"></a>原子性和一致性的关系是什么？</h4><p>在事务处理的ACID属性中，一致性是最基本的属性，其他的三个属性都为了保证一致性而存在的。原子性并不能保证一致性，在多个事务并行进行的情况下，即使保证了每一个事务的原子性，仍然可能导致数据不一致的结果。为了保证并发情况下的一致性引入了隔离性，即保证每一个事务能够看到的数据总是一致的，就好像其他并发事务并不存在一样，用术语来说，就是多个事务并发执行后的状态，和它们串行执行后的状态是等价的。怎么实现隔离性呢？可以通过锁机制，悲观锁和乐观锁。</p>
<h3 id="10-MySQL中有哪些方式可以提高数据的查询速度或者是效率的？"><a href="#10-MySQL中有哪些方式可以提高数据的查询速度或者是效率的？" class="headerlink" title="10. MySQL中有哪些方式可以提高数据的查询速度或者是效率的？"></a>10. MySQL中有哪些方式可以提高数据的查询速度或者是效率的？</h3><p>索引：索引是数据库中重要的数据结构，它的根本目的就是为了提高查询速度，对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>
<p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>
<h3 id="11-Hadoop的架构是怎么样的-Hadoop是怎么保证数据是一致的-是怎么保证数据完整性的？"><a href="#11-Hadoop的架构是怎么样的-Hadoop是怎么保证数据是一致的-是怎么保证数据完整性的？" class="headerlink" title="11.Hadoop的架构是怎么样的? Hadoop是怎么保证数据是一致的,是怎么保证数据完整性的？"></a>11.Hadoop的架构是怎么样的? Hadoop是怎么保证数据是一致的,是怎么保证数据完整性的？</h3><p>Hadoop由HDFS、MapReduce、Yarn(资源调度)、辅助工具（HBase、Hive和ZooKeeper等）成员组成，其中最基础最重要元素为底层用于存储集群中所有存储节点文件的文件系统HDFS（Hadoop Distributed File System）来执行MapReduce程序的MapReduce引擎。</p>
<h3 id="12-你熟悉MapReduce框架吗？"><a href="#12-你熟悉MapReduce框架吗？" class="headerlink" title="12.你熟悉MapReduce框架吗？"></a>12.你熟悉MapReduce框架吗？</h3><h3 id="13-你现在在做哪些工作？是如何存储的？你的优点在哪里？如果我把不同来源的数据导入spark或者是hive中，是不是也可以呢？"><a href="#13-你现在在做哪些工作？是如何存储的？你的优点在哪里？如果我把不同来源的数据导入spark或者是hive中，是不是也可以呢？" class="headerlink" title="13.你现在在做哪些工作？是如何存储的？你的优点在哪里？如果我把不同来源的数据导入spark或者是hive中，是不是也可以呢？"></a>13.你现在在做哪些工作？是如何存储的？你的优点在哪里？如果我把不同来源的数据导入spark或者是hive中，是不是也可以呢？</h3><h3 id="14-网络方面。TCP和UDP的区别是什么？TCP为什么是安全的？三次握手是什么？三次握手之后，我再发如果断了，会怎么办？"><a href="#14-网络方面。TCP和UDP的区别是什么？TCP为什么是安全的？三次握手是什么？三次握手之后，我再发如果断了，会怎么办？" class="headerlink" title="14. 网络方面。TCP和UDP的区别是什么？TCP为什么是安全的？三次握手是什么？三次握手之后，我再发如果断了，会怎么办？"></a>14. 网络方面。TCP和UDP的区别是什么？TCP为什么是安全的？三次握手是什么？三次握手之后，我再发如果断了，会怎么办？</h3><ol>
<li>连接方面区别：TCP是面向连接的，发送数据之前需要建立连接，UDP是无连接的，即发送数据之前不需要建立连接。</li>
</ol>
<ol start="2">
<li>安全方面的区别：TCP提供可靠的服务，通过TCP连接传送的数据，无差错，不丢失，不重复且按序到达，UDP尽最大努力交付，即不保证可靠交付。</li>
</ol>
<ol start="3">
<li>传输效率的区别：TCP传输效率相对较低，UDP传输效率高，适用于对高速传输和实时性有较高要求的通信或者广播通信。</li>
</ol>
<ol start="4">
<li>链接对象数量的区别：TCP链接只能是点到点，一对一的，UDP支持一对一、一对多、多对一和多对多的交互通信。</li>
</ol>
<h3 id="15-什么是滑动窗口，滑动窗口是用来干什么的？"><a href="#15-什么是滑动窗口，滑动窗口是用来干什么的？" class="headerlink" title="15. 什么是滑动窗口，滑动窗口是用来干什么的？"></a>15. 什么是滑动窗口，滑动窗口是用来干什么的？</h3><p>滑动窗口本质上是描述接受方（本地）的TCP数据报缓冲区大小的数据，发送方根据这个数据来计算自己最多能发送多长的数据。如果发送方收到接受方的窗口大小为0的TCP数据报，那么发送方将停止发送数据，等到接受方发送窗口大小不为0的数据报的到来。</p>
<p>滑动窗口协议（Sliding Window Protocol）属于TCP协议的一种应用，用于网络数据传输时的流量控制，以避免拥塞的发生。</p>
<p>tcp采用滑动窗口机制来实现流量控制！</p>
<h3 id="16-操作系统Linux有了解吗？怎么看正在使用CPU的一个线程命令是什么？Linux的常用命令？"><a href="#16-操作系统Linux有了解吗？怎么看正在使用CPU的一个线程命令是什么？Linux的常用命令？" class="headerlink" title="16. 操作系统Linux有了解吗？怎么看正在使用CPU的一个线程命令是什么？Linux的常用命令？"></a>16. 操作系统Linux有了解吗？怎么看正在使用CPU的一个线程命令是什么？Linux的常用命令？</h3><h3 id="17-你看过哪些开源的底层代码？你经常访问的开源的网站是什么？"><a href="#17-你看过哪些开源的底层代码？你经常访问的开源的网站是什么？" class="headerlink" title="17. 你看过哪些开源的底层代码？你经常访问的开源的网站是什么？"></a>17. 你看过哪些开源的底层代码？你经常访问的开源的网站是什么？</h3>]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>springMVC</title>
    <url>/2020/06/07/springMVC/</url>
    <content><![CDATA[<h4 id="springMVC框架时基于组件的方式执行流程"><a href="#springMVC框架时基于组件的方式执行流程" class="headerlink" title="springMVC框架时基于组件的方式执行流程"></a>springMVC框架时基于组件的方式执行流程</h4>  <a id="more"></a>

<h3 id="springMVC的执行流程："><a href="#springMVC的执行流程：" class="headerlink" title="springMVC的执行流程："></a>springMVC的执行流程：</h3><p>（1） 首先是浏览器发出请求，发送到web.xml文件中我们配置过的前端控制器DispatcherServlet响应用户请求，DispatcherServlet根据请求的模式决定是否去找对应的映射器，DispatcherServlet是整个流程控制的中心，由它调用其他组件处理用户的请求，DispatcherServlet的存在降低了组件之间的耦合性。</p>
<p>（2）DispatcherServlet请求查找Handler，然后到达处理器映射器HandlerMapping，HandlerMapping让Controller类中的方法执行。springMVC提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式</p>
<p>（3）我们在对应的Controller方法中执行完对应的逻辑之后，或者把数据封装进Model中之后返回。</p>
<p>在Controller中</p>
<p>@RequesMappding注解中的参数</p>
<p>​        value：用于指定请求的URL，它和path属性的作用是一样的</p>
<p>​        method：用于指定请求的方式</p>
<p>​        params：用于指定限制请求参数的条件，它支持简单的表达式。要么请求参数的key和value必须和配置的一模一样</p>
<p>​            例如：  param  ={“accountName”}  表示请求参数必须有accountName</p>
<p>​                          param={“money！=100”}  表示请求参数money不能是100</p>
<p>​                            param={“money=100”} 表示请求参数money必须是100</p>
<p>​        headers：用于指定限制请求消息头的条件</p>
<p>​            注意：以上四个属性只要出现2个或者以上时，他们的关系是与的关系</p>
<h3 id="请求参数的绑定"><a href="#请求参数的绑定" class="headerlink" title="请求参数的绑定"></a>请求参数的绑定</h3><p>SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定的</p>
<p>要求：提交表单的name和参数的名称是相同的</p>
<p>支持的数据类型：</p>
<p>（1） 基本数据类型和字符串类型</p>
<p>（2）实体类型  JavaBean</p>
<p>（3）集合数据类型（List、Map集合等）</p>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2>]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2面试整理</title>
    <url>/2020/06/07/Struts2%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-什么是Struts2？"><a href="#1-什么是Struts2？" class="headerlink" title="1. 什么是Struts2？"></a>1. 什么是Struts2？</h2><p>Struts2是一个用Java构建Web应用程序的开源框架。Struts2基于OpenSymphony WebWork框架。它从Struts1中得到了很大的改进，使其更加灵活，易于使用和扩展。Struts2的核心组件是Action，Interceptors和Result页面。</p>
<p>Struts2提供了许多方法来创建Action类并通过struts.xml或注释来配置它们。我们可以为常见任务创建自己的拦截器。Struts2附带了很多标签，并使用OGNL表达式语言。我们可以创建自己的类型转换器来渲染结果页面。结果页面可以是JSP和FreeMarker模板。</p>
 <a id="more"></a>



<h2 id="2-Struts2的核心组件是什么？"><a href="#2-Struts2的核心组件是什么？" class="headerlink" title="2. Struts2的核心组件是什么？"></a>2. Struts2的核心组件是什么？</h2><p>1、前端控制器 </p>
<p>2、OGNL/ VS：OGNL/ ValueStack </p>
<p>3、Action：动作</p>
<p>4、Result：结果 </p>
<p>5、Interceptor：拦截器 </p>
<p>6、Tags：标签库</p>
<h2 id="3-Struts2的工作流程"><a href="#3-Struts2的工作流程" class="headerlink" title="3. Struts2的工作流程"></a>3. Struts2的工作流程</h2><p>（1）所有请求提交给前端控制器。</p>
<p>（2）根据配置信息确定要调用的 Action。</p>
<p>（3）创建一个 ValueStack 对象（每个请求都有一个独立的 VS 对象）。</p>
<p>（4）创建 Action 对象，把 Action 对象放到 VS 的栈顶，将 VS 对象存入到 request 中，存储的 key 为“ struts.valueStack”。</p>
<p>（5）控制器调用 Action 对象接收请求参数， 并在方法中根据输入属性算输出属性。</p>
<p>（6）在调用 Action 之前或之后调用一系列 Interceptor。</p>
<p>（7）根据 Action 返回的字符串确定 Result（ 10 种类型）。</p>
<p>（8）调用 Result 对象，将 VS 中的数据按照特定的格式输出。</p>
<p>（9）很多情况下， Result 将转发到 JSP， JSP 页面用 Tags 取出数据并显示。</p>
<p>（10）请求处理完后，将 ValueStack 对象和 Action 对象销毁。</p>
<h2 id="4-OGNL技术"><a href="#4-OGNL技术" class="headerlink" title="4. OGNL技术"></a>4. OGNL技术</h2><h5 id="1-什么是OGNL"><a href="#1-什么是OGNL" class="headerlink" title="1.什么是OGNL?"></a>1.什么是OGNL?</h5><p>OGNL是 Object-Graph Navigation Language（对象图形导航语言）的缩写，它是一种功能强大的表达式语言。是一种表达式语言。使用这种表达式语言，你可以通过某种表达式语法，存取Java对象树中的任意属性、调用Java对象树的方法、同时能够自动实现必要的类型转化。</p>
<p>OGNL简介：　</p>
<p>　　（1）OGNL是Object Graphic Navigation Language（对象图导航语言）的缩写，它是一个开源项目。</p>
<p>　　　　 struts2框架默认就支持Ognl表达式语言（所以struts必须引用的包：ognl.jar）；</p>
<p>　　（2）struts2的ognl的作用：页面取值使用；</p>
<p>　　（3）OGNL和EL的区别:</p>
<p>　　　　　EL表达式语言:用于页面取值，jsp页面取值的标准（默认可以直接使用，应用范围更加广泛）；</p>
<p>　　　　  OGNL表达式语言：struts2标签默认支持的表达式语言，必须配置struts标签使用，不能离开struts2标签直接使用；</p>
<p>　　（4）OGNL 有一个上下文（Context）概念,[OgnlContext对象：OgnlContext对象是ognl表达式语言的核心];</p>
<p>　　　　 其实上下文就是一个MAP结构，它实现了 java.utils.Map 的接口。</p>
<p>　　（5）ognl表达式语言取值，取根元素的值，不用带#符号；ognl表达式语言取值，取非根元素的值，需要带#符号；</p>
<p>6：ValueStack, 即值栈对象（根元素的值存储在root中，非根元素的值存储在context中）。</p>
<p>　 （1）：值栈对象是整个struts数据存储的核心，或者叫中转站。</p>
<p>　 （2）：用户每次访问struts的action，都会创建一个Action对象、值栈对象、ActionContext对象；  然后把Action对象放入值栈中； 最后再把值栈对象放入request中，传入jsp页面。</p>
<p>　 （3）：(key: struts.valueStack)； 开发者只需要通过ActionContext对象就可以访问struts的其他的关键对象。 （ActionContext是给开发者用的，便于学习与使用。）</p>
<h5 id="2-Struts2标签的使用"><a href="#2-Struts2标签的使用" class="headerlink" title="2. Struts2标签的使用"></a>2. Struts2标签的使用</h5><p>Struts2 的很多标记就是通过访问 ValueStack 获得数据的。使用前要在页面中要引入： &lt;%@taglib uri=”/struts-tags” prefix=”s”%&gt;， prefix：表示前缀</p>
<h2 id="5-什么是Struts2中的拦截器？"><a href="#5-什么是Struts2中的拦截器？" class="headerlink" title="5. 什么是Struts2中的拦截器？"></a>5. 什么是Struts2中的拦截器？</h2><p>它提供了一种机制可以使开发者可以定义在一个action执行的前后执行的代码，也可以在一个action执行前阻止其执行，同时也提供了一种可以提取action中可重用部分的方式。在AOP（Aspect-Oriented Programming）中拦截器用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。Struts2内置了很多拦截器，每个拦截器完成相对独立的功能，多个拦截器的组合体成为拦截器栈。最为重要的拦截器栈是系统默认拦截器栈DefaultStack。struts2默认定义了35种拦截器，默认执行20种。</p>
<p>1）拦截器（Interceptor）是Struts2的核心组成部分，是XWork体系的重要组件。</p>
<p>2）Struts2很多功能都是构建在拦截器基础之上的，例如文件的上传下载、国际化、数据类型转换和数据校验等等。</p>
<p>3）Struts2拦截器在访问某个Action方法之前和之后实施拦截</p>
<p>4）Struts2拦截器是可插拔的，拦截器是AOP（面向切面编程）的一种实现。</p>
<p>5）拦截器栈（Interceptor Stack）：将拦截器按一定的顺序联结成一条链，在访问被拦截的方法时，Struts2拦截器链中的拦截器就会按其之前定义的顺序依次调用。</p>
<p>struts2中的的功能（参数处理、文件上传、字符编码等）都是通过系统拦截器实现的。如果业务需要，当然我们也可以自定义拦截器,进行可插拔配置，在执行  Action  的方法前后、加入相关逻辑完成业务。</p>
<p>使用场景：</p>
<p>（1）用户登录判断，在执行 Action的前面判断是否已经登录，如果没有登录的跳转到登录页面。</p>
<p>（2）用户权限判断，在执行 Action的前面判断是否具有，如果没有权限就给出提示信息。</p>
<p>（3）操作日志……等等</p>
<h2 id="6-在Struts2中创建Action类有哪些不同的方法？"><a href="#6-在Struts2中创建Action类有哪些不同的方法？" class="headerlink" title="6. 在Struts2中创建Action类有哪些不同的方法？"></a>6. 在Struts2中创建Action类有哪些不同的方法？</h2><p>（1）方式一：直接创建一个类，可以是POJO，即原生Java类，没有继承任何类，也没有实现任何接口。这种方式使得strust2框架的代码侵入性更低，但是这种方式是理想状态，开发中并不常用。</p>
<p>（2）方式二：实现一个接口com.opensymphony.xwork2.Action。接口里面有execute方法，提供了action方法的规范，Action接口预置了一些字符串，可以在返回结果时使用。为了方便。这种方式也不常用。</p>
<p>（3）方式三：继承一个类，ActionSupport。该方式帮我们实现了一些接口 Action, Validateable, ValidationAware, TextProvider, LocaleProvider, Serializable  如果我们需要用到这些接口的时候，就不需要自己实现了</p>
<h2 id="7-什么是ValueStack和OGNL？"><a href="#7-什么是ValueStack和OGNL？" class="headerlink" title="7. 什么是ValueStack和OGNL？****"></a>7. 什么是ValueStack和OGNL？****</h2><p>ValueStack是Struts2存储应用程序数据以处理客户端请求的存储区域。数据存储在ActionContext使用ThreadLocal的对象中，以具有特定于特定请求线程的值。</p>
<p>对象图导航语言（OGNL）是一种功能强大的表达式语言，用于处理存储在ValueStack上的数据。正如您在架构图中看到的，拦截器和结果页面都可以使用OGNL访问存储在ValueStack上的数据。</p>
<h2 id="8-列举Struts2中引入的一些有用的注释？"><a href="#8-列举Struts2中引入的一些有用的注释？" class="headerlink" title="8. 列举Struts2中引入的一些有用的注释？****"></a>8. 列举Struts2中引入的一些有用的注释？****</h2><p>Struts2中引入的一些重要注释是：</p>
<p>@Action创建动作类</p>
<p>@Actions为多个动作配置单个类</p>
<p>@Namespace和@Namespaces用于创建不同的模块</p>
<p>@Result用于结果页面</p>
<p>@ResultPath用于配置结果页面位置</p>
<h2 id="9-项目中继承ActionSupport并实现ModelDriven接口？"><a href="#9-项目中继承ActionSupport并实现ModelDriven接口？" class="headerlink" title="9. 项目中继承ActionSupport并实现ModelDriven接口？****"></a>9. 项目中继承ActionSupport并实现ModelDriven接口？****</h2><p>struts可以继承ActionSupport类，也可以不继承，继承的好处简单来说就是更方便实现验证，国际化等功能，与struts2的功能结合紧密，方便我们开发。</p>
<p>ActionSupport类的作用：</p>
<p>   此类实现了很多实用的接口，提供了很多默认的方法，这些默认方法包括国际化信息，默认的处理用户请求的方法等，可以大大简化action的开发，在继承ActionSupport的情况下，必须有无参构造函数。</p>
<p>  struts2不要求我们自己设计的action类继承任何的struts基类或struts接口，但是我们为了方便实现我们自己的action，大多数情况下都会继承com.opensymphony.xwork2.ActionSupport类，并重写此类里的public String execute() throws Exception方法。因为此类中实现了很多的实用借口，提供了很多默认方法，这些默认方法包括国际化信息的方法、默认的处理用户请求的方法等，这样可以大大的简化Acion的开发。</p>
<p>实现了ModelDriven</p>
<p>可以使用VO，就是提交过来的参抄数（这个参数就百是表单的数据）</p>
<p>可以直接驱动到action的setXXX（）里面，意思就是说</p>
<p>实现了ModelDriven就必须百实现getModel这个方法，该方法返回的是你的度ModelDrivern泛型中设定的实体类。其实是为了实现代码的重用，不要再定义问一次你在数据访问层定义的属性了，直接用那答个类就行了。不过有时候也回不是很需要这个东西，答比如只有一两个表单域的时候。</p>
<h2 id="10-Struts国际化？"><a href="#10-Struts国际化？" class="headerlink" title="10. Struts国际化？****"></a>10. Struts国际化？****</h2><p>国际化（i18n）是规划和实施的产品和服务，使他们能很容易地适应特定的本地语言和文化的过程中，这个过程被称为本地化。国际化的过程有时也被称为翻译或本地化启用。国际化是缩写i18n，因为我和两端用n字打头，并有18个字符之间的第i个和最后n。</p>
<h2 id="11-如何在Struts2应用程序中上传文件？"><a href="#11-如何在Struts2应用程序中上传文件？" class="headerlink" title="11. 如何在Struts2应用程序中上传文件？****"></a>11. 如何在Struts2应用程序中上传文件？****</h2><p>文件上传是Web应用程序中的常见任务之一。 Struts2通过FileUploadInterceptor提供对文件上传的内置支持。 此拦截器在struts-default包中配置，并提供选项以设置文件的最大大小和可以上载到服务器的文件类型。</p>
<h2 id="12-Struts2实现文件上传的步骤？"><a href="#12-Struts2实现文件上传的步骤？" class="headerlink" title="12. Struts2实现文件上传的步骤？****"></a>12. Struts2实现文件上传的步骤？****</h2><p>基于表单的文件上传需要下载所需要的jar包文件<strong><em>\</em>Commons-FileUpload组件*****</strong>*、*<strong>**</strong>*需要下载Common-FileUplaod*<strong>* *</strong>*当然MyEclipce中Struts2支持里自带有这两个包****</p>
<p>基于表单的上传，在form标签中有一个必须的属性值设置：enctype </p>
<p>如果要做文件上传功能必须将enctype值设为multipart/form-data</p>
<p>修改struts2配置文件</p>
<p>配置struts.xml文件，重置fileUpload拦截器</p>
<p>&lt;interceptor-ref name=<strong>“fileUpload”</strong>&gt;</p>
<p>​      &lt;param name=<strong>“maximumSize”</strong>&gt;10485760</param> </p>
<!-- 10M -->

 </interceptor-ref>



<p>编写相应的action类</p>
<h2 id="13-Struts2的核心是什么-体现了什么思想？"><a href="#13-Struts2的核心是什么-体现了什么思想？" class="headerlink" title="13. Struts2的核心是什么? 体现了什么思想？****"></a>13. Struts2的核心是什么? 体现了什么思想？****</h2><p>Struts2的核心是拦截器,基本上核心功能都是由拦截器完成,拦截器的实现体现了AOP(面向切面编程)思想</p>
<h2 id="14-为何继承ActionSupport"><a href="#14-为何继承ActionSupport" class="headerlink" title="14. 为何继承ActionSupport"></a>14. 为何继承ActionSupport</h2><p>因为ActionSupport实现了Action接口，提供了国际化，校验功能。</p>
<p>ActionSupport实现了国际化功能：因为它提供了一个getText(String key)方法实现国际化,该方法从资源文件上获取国际化信息。</p>
<p>Action接口提供了五个常量(success,error,login,input,none)。</p>
<h2 id="15-Struts2-如何定位action中的方法"><a href="#15-Struts2-如何定位action中的方法" class="headerlink" title="15. Struts2 如何定位action中的方法"></a>15. Struts2 如何定位action中的方法</h2><p>在xml配置文件中通过配置多个action，使用action的method指定方法。</p>
<p>使用通配符(*)匹配方法。</p>
<h2 id="16-模型驱动与属性驱动是什么-模型驱动使用时注意什么问题"><a href="#16-模型驱动与属性驱动是什么-模型驱动使用时注意什么问题" class="headerlink" title="16. 模型驱动与属性驱动是什么 模型驱动使用时注意什么问题"></a>16. 模型驱动与属性驱动是什么 模型驱动使用时注意什么问题</h2><p>模型驱动与属性驱动都是用来封装数据的。</p>
<p>（1）模型驱动：在实现类中实现ModelDriven<T>接口使用泛型把属性类封装起来，重写getModel()方法，然后在实现类里创建一个属性类的实例，</p>
<p>通过这个实例拿到封装进来的值，拿返回值的时候使用工具进行值拷贝。</p>
<p>（2）属性驱动：在实现类里定义属性，生成get与set方法，通过属性来拿值。</p>
<p>注意：模型驱动使用时注意的是在使用前先把属性类实例化，否则会出现空指针错误，拿返回对象的值需要用拷贝内存因为地址发生改变。</p>
<p>模型驱动不可以使用局部类型转换器。</p>
<h2 id="17-Struts2是怎样进行值封装的？"><a href="#17-Struts2是怎样进行值封装的？" class="headerlink" title="17. Struts2是怎样进行值封装的？"></a>17. Struts2是怎样进行值封装的？</h2><p>struts2的值封装实际上是采用了ognl表达式</p>
<p>struts2的拦截器经过模型驱动时会先判断action是否实现了ModelDriven，如果是，则拿到模型的实例放在了栈的顶部，</p>
<p>到属性驱动的时候会从栈里面把栈顶的实例给取出来，从页面传进来的值放在一个map集合当中，</p>
<p>通过map集合进行迭代会通过ognl技术把值封装到实例中。</p>
<h2 id="18-OGNL是什么你在项目中如何使用它-？"><a href="#18-OGNL是什么你在项目中如何使用它-？" class="headerlink" title="18. OGNL是什么你在项目中如何使用它****？"></a>18. OGNL是什么你在项目中如何使用它*<strong>**</strong>*？</h2><p>OGNL是：对象图形导航语言。</p>
<p>原ognl是单个对象的，在struts2的应用是多个对象的，struts2的类型转换也是通过ognl来实现的。</p>
<p>Struts2中默认的表达式语言就是ognl，struts2的取值设值都是通过ognl来实现的,struts2要依靠它的标签才可以使用ognl。</p>
<p>相对于jstl或者其他表达式语言，它有如下优势：</p>
<p>（1）能够调用对象实例的方法</p>
<p>（2）能够调用类的静态方法</p>
<p>（3）操作集合对象</p>
<p>（4）访问Ognl上下文</p>
<p>取值时ognl有三个参数：</p>
<p>（1）表达式</p>
<p>（2）ognl的上下文(map)</p>
<p>（3）对象实例(值栈)。</p>
<p>如果表达式带#号是从上下文中(map)拿值，否则是从值栈中拿值。</p>
<p>设值时有四个参数：</p>
<p>（1）表达式，（2）ognl的上下文(map)，（3）对象实例，（4）设入的值</p>
<p>如果表达式带#号是把值设入上下文中(map)，否则是把值设入值栈中。</p>
<p>在struts2中 ognl的实现关系:ActionConetxt。</p>
<p>ognl 3个常用的符号 # $ %</p>
<p># ：构造map，list集合。取ognl上下文的值。用来过滤集合。</p>
<p>$ ：在校验框架中取资源文件中的值。可以在配置文件中传递参数。</p>
<p>% ：使用百分号可以进行转义。</p>
<h2 id="19-Strust2如何访问Servlet-API-？"><a href="#19-Strust2如何访问Servlet-API-？" class="headerlink" title="19. Strust2如何访问Servlet API****？"></a>19. Strust2如何访问Servlet API*<strong>**</strong>*？</h2><p>答：</p>
<p>（1）通过ActionContext可以获得request，application，session三个作用域(struts2实际上是通过适配器来把servlet的api转换为一个map，</p>
<p>并把这些map放在ActionContext里面)。</p>
<p>（2）通过ActionContext的子类ServletActionContext去获取原滋原味的API。</p>
<p>（3）可以通过实现ServletRequestAware接口，重写里面的setServletRequest方法可以获得request，实际上是通过set的依赖注入。</p>
<h2 id="20-什么是拦截器-说说Struts2用拦截器来干什么-说出6个拦截器来"><a href="#20-什么是拦截器-说说Struts2用拦截器来干什么-说出6个拦截器来" class="headerlink" title="20. 什么是拦截器 说说Struts2用拦截器来干什么 说出6个拦截器来****"></a>20. 什么是拦截器 说说Struts2用拦截器来干什么 说出6个拦截器来****</h2><p>在访问类的某个方法或者属性之前执行，拦截的是Action的请求，进行拦截然后在方法的执行前或者之后加入某些操作，如：国际化，权限，效验等与源代码无关的操作。</p>
<p>拦截器：国际化，表单重复提交，类型转换，自动装配，数据封装,异常处理，模型驱动，请求参数，处理类型转换错误，日志拦截器。</p>
<p><strong><em>\</em>（*****</strong>*项目中遇到什么问题*<strong>**</strong>*）****</p>
<p>3.使用模型驱动拿返回值的时候地址内存不一样，会拿不到值。</p>
<p>原因：因为struts2最开始是把创建action的实例放到ActionContext的栈顶，后来把创建模型驱动的实例放到栈顶，</p>
<p>而通过struts2的标签去取值会取栈顶的实例，而此时拿到的还是最开始的创建的那个实例，所以为空。</p>
<p>解决方式：利用原型进行对象拷贝，使用拷贝工具，BeanUtils或者是propertyUtils。</p>
<h2 id="21-ActionContext是用来干什么用的？"><a href="#21-ActionContext是用来干什么用的？" class="headerlink" title="21. ActionContext是用来干什么用的？"></a>21. ActionContext是用来干什么用的？</h2><p>答：ActionContext是Action的上下文。</p>
<p>通过ActionContext这个类来可以获得:request，application，session，Locale、ValueStack,ConversionErrors</p>
<p>（1）可以获得servlet的api：request，application，session。</p>
<p>（2）进行国际化：获得语言环境 Locale。</p>
<p>（3）收集错误信息：ConversionErrors。</p>
<p>（4）有个值栈来装action实例与创建的模型驱动的实例:ValueStack。</p>
<p>（5）ActionContext是线程安全的-用本地线程实现的。</p>
<h2 id="22-Struts2是如何实现mvc的：struts2的底层视图默认是freemaker。什么mvc？"><a href="#22-Struts2是如何实现mvc的：struts2的底层视图默认是freemaker。什么mvc？" class="headerlink" title="22. Struts2是如何实现mvc的：struts2的底层视图默认是freemaker。什么mvc？****"></a>22. Struts2是如何实现mvc的：struts2的底层视图默认是freemaker。什么mvc？****</h2><p>M：模型，V：视图，C：控制器</p>
<p>在struts2中分别对应什么？</p>
<p>M(模型)：除核心控制器外都属于模型，实现业务的类(service层与dao层)。</p>
<p>V(视图)：result,type,dispatcher默认的(jsp，freemaker，velocity，源代码等)。</p>
<p>C(控制器)：核心控制器与业务控制器。</p>
<p>mvc解决什么问题？</p>
<p>解决了数据封装，类型转换，数据效验，国际化，异常处理等问题。</p>
<h2 id="23-开发项目时struts2在页面怎样拿值？"><a href="#23-开发项目时struts2在页面怎样拿值？" class="headerlink" title="23. 开发项目时struts2在页面怎样拿值？"></a>23. 开发项目时struts2在页面怎样拿值？</h2><p>从值栈中或者是ognl的上下文中取值</p>
<h2 id="24-怎么样用Struts2进行文件的上传或者下载"><a href="#24-怎么样用Struts2进行文件的上传或者下载" class="headerlink" title="24. 怎么样用Struts2进行文件的上传或者下载\"></a>24. 怎么样用Struts2进行文件的上传或者下载\</h2><p>上传：Struts2里面已经提供了默认的拦截器来处理上传,只要在jsp用了s:file标签,把s:from的enctype 属性设置为 multipart/form-data,然后在action里面定义三个字段 File file ,String [file]ContentType,String [file]?FileName即可,如果有多个文件上传,那么就用List<File>来接受,然后把接受到的File构建成FileInputStream,转化成硬盘上面的文件即可(用输出流)</p>
<p>下载：用了resust为stream的类型,然后在action定义四个属性,默认的有个是InputStream 的类型叫inputStream的,从硬盘上面读取文件到这个流赋值即可.</p>
<h2 id="25-简单讲下struts里面的标签-说不少于5个"><a href="#25-简单讲下struts里面的标签-说不少于5个" class="headerlink" title="25. 简单讲下struts里面的标签,说不少于5个****"></a>25. 简单讲下struts里面的标签,说不少于5个****</h2><p>s:iterater ?s:property s:form s:url s:if 等等</p>
<h2 id="26-默认struts2里面的标签取值都是从那里取值的"><a href="#26-默认struts2里面的标签取值都是从那里取值的" class="headerlink" title="26.默认struts2里面的标签取值都是从那里取值的****"></a>26.默认struts2里面的标签取值都是从那里取值的****</h2><p>默认都是从OGNL值栈里面取值的</p>
<h2 id="27-ValueStack分为那两部分-组成部分是什么-分别怎么访问"><a href="#27-ValueStack分为那两部分-组成部分是什么-分别怎么访问" class="headerlink" title="27. ValueStack分为那两部分,组成部分是什么,分别怎么访问****"></a>27. ValueStack分为那两部分,组成部分是什么,分别怎么访问****</h2><p>分为对象栈和ContextMap ,对象栈里面放入的是Action及其用户定义的对象,在前台可以直接访问,在contextMap里面放入的是Servlet对象转化后map,譬如requestMap,sessionMap,访问的时候前面加#即可。</p>
<h2 id="28-struts2的请求处理流程"><a href="#28-struts2的请求处理流程" class="headerlink" title="28. struts2的请求处理流程\"></a>28. struts2的请求处理流程\</h2><p>（1）客户端发送请求。</p>
<p>（2）经过一系列的过滤器（如:ActionContextCleanUp、SiteMesh等）到达核心控制器（FilterDispatcher）。</p>
<p>（3）核心控制器通过ActionMapper决定调用哪个Action，如果不是调用Action就直接跳转到jsp页面</p>
<p>（4）如果ActionMapper决定调用了某个Action，核心控制器就把请求的处理交给一个代理类（ActionProxy）。</p>
<p>（5）代理类通过配置管理器(Configuration Manager)找到配置文件（struts.xml）找到需要调用的Action类。</p>
<p>（6）代理类还要创建一个Action的调度器（ActionInvocation）。</p>
<p>（7）由调度器去调用Action，当然这里还涉及到一些相关的拦截器的调用。</p>
<p>（8）Action执行完后，这个调度器还会创建一个Result返回结果集，返回结果前还可以做一些操作（结果集前的监听器）。</p>
<h2 id="29-struts2源码与设计模式"><a href="#29-struts2源码与设计模式" class="headerlink" title="29. struts2源码与设计模式"></a>29. struts2源码与设计模式</h2><p>命令模式(发生.do请求封装成action调用execute方法)，代理模式(访问action时核心控制器把请求交给代理类(ActionProxy)去访问Action就是代理模式)，</p>
<p>责任链模式(访问action时经过一系列的拦截器就使用了责任链模式)，适配器(把Servlet的API通过适配器转换成Map，把Map放入ActionContext中)，</p>
<p>组合模式(拦截器栈和拦截器就使用到组和模式)。</p>
<p>源码：</p>
<p>服务器启动的时候容器会创建FilterDispatcher实例，进入dispatcher.init()方法，在init方法里面会初始化sturts2的一系列的配置文件，然后向服务器发送请求，进入doFilter方法，在里面通过调用dispatcher.serviceAction方法,进入到Dispatcher里面的serviceAction方法，在这里就会把servlet的api转换为map，并把它一个个的放在ActionContext中，在这里还会创建ActionProxy的实例去调用execute方法，到StrutsActionProxy的execute方法，通过DefaultActionInvocation的实例去调用invoke方法，在invoke方法里面会进行判断拦截器是否存在，如果存在就会调用intercept方法，在拦截器类(Intercept)中会通过DefaultActionInvocation实例调用里面的invock方法,它们会形成递归调用，当拦截器不存在的时候就会进入invokeActionOnly方法，判断有没有返回结果前的监听器preResultListener如果有则进去一个个执行，最后调用 executeResult()方法，创建result返回，执行execute方法，并返回视图。</p>
<h2 id="30-struts2工作流程"><a href="#30-struts2工作流程" class="headerlink" title="30. struts2工作流程"></a>30. struts2工作流程</h2><p>1、Struts 2框架本身大致可以分为3个部分：核心控制器FilterDispatcher、业务控制器Action和用户实现的企业业务逻辑组件。</p>
<p>（1）核心控制器FilterDispatcher是Struts 2框架的基础，包含了框架内部的控制流程和处理机制。</p>
<p>（2）业务控制器Action和业务逻辑组件是需要用户来自己实现的。用户在开发Action和业务逻辑组件的同时，还需要编写相关的配置文件，供核心控制器FilterDispatcher来使用。</p>
<p>​    Struts 2的工作流程相对于Struts 1要简单，与WebWork框架基本相同，所以说Struts 2是WebWork的升级版本。</p>
<p><strong><em>\</em>简要执行流程：**</strong></p>
<p>（1）客户端初始化一个指向Servlet容器的请求；</p>
<p>（2）这个请求经过一系列的过滤器（Filter）</p>
<p>​    （这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助，例如：SiteMesh Plugin）</p>
<p>（3）接着FilterDispatcher被调用，</p>
<p>​     FilterDispatcher询问ActionMapper来决定这个请是否需要调用某个Action</p>
<p>（4）如果ActionMapper决定需要调用某个Action，</p>
<p>​     FilterDispatcher把请求的处理交给ActionProxy</p>
<p>（5）ActionProxy通过Configuration Manager询问框架的配置文件，找到需要调用的Action类</p>
<p>（6）ActionProxy创建一个ActionInvocation的实例。</p>
<p>（7）ActionInvocation实例使用命名模式来调用，</p>
<p>​     在调用Action的过程前后，涉及到相关拦截器（Intercepter）的调用。</p>
<p>（8）一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果。返回结果通常是（但不总是，也可 能是另外的一个Action链）一个需要被表示的JSP或者FreeMarker的模版。在表示的过程中可以使用Struts2 框架中继承的标签。    在这个过程中需要涉及到ActionMapper</p>
<p>（9）响应的返回是通过我们在web.xml中配置的过滤器</p>
<p>（10）如果ActionContextCleanUp是当前使用的，则FilterDispatecher将不会清理sreadlocal ActionContext;如果ActionContextCleanUp不使用，则将会去清理sreadlocals。 </p>
<h2 id="31-拦截器和过滤器的区别？"><a href="#31-拦截器和过滤器的区别？" class="headerlink" title="31. 拦截器和过滤器的区别？"></a>31. 拦截器和过滤器的区别？</h2><p>1、拦截器是基于Java反射机制的，而过滤器是基于函数回调的。</p>
<p>2、过滤器依赖于servlet容器，而拦截器不依赖于servlet容器。</p>
<p>3、拦截器只能对Action请求起作用，而过滤器则可以对几乎所有请求起作用。</p>
<p>4、拦截器可以访问Action上下文、值栈里的对象，而过滤器不能。</p>
<p>5、在Action的生命周期中，拦截器可以多次调用，而过滤器只能在容器初始化时被调用一次。</p>
<h2 id="32-Struts2是如何启动的？"><a href="#32-Struts2是如何启动的？" class="headerlink" title="32. Struts2是如何启动的？\"></a>32. Struts2是如何启动的？\</h2><p>1、struts2框架是通过Filter启动的，即StrutsPrepareAndExecuteFilter，此过滤器为struts2的核心过滤器； </p>
<p>2、StrutsPrepareAndExecuteFilter的init()方法中将会读取类路径下默认的配置文件struts.xml完成初始化操作。struts2读取到struts.xml的内容后，是将内容封装进javabean对象然后存放在内存中，以后用户的每次请求处理将使用内存中的数据，而不是每次请求都读取struts.xml文件。</p>
<h2 id="33-Struts2的核心控制器是什么？它是什么作用？"><a href="#33-Struts2的核心控制器是什么？它是什么作用？" class="headerlink" title="33. Struts2的核心控制器是什么？它是什么作用？\"></a>33. Struts2的核心控制器是什么？它是什么作用？\</h2><p>1、Struts2框架的核心控制器是StrutsPrepareAndExecuteFilter。 </p>
<p>2、作用： </p>
<p> 负责拦截由<url-pattern>/*</url-pattern>指定的所有用户请求，当用户请求到达时，该Filter会过滤用户的请求。默认情况下，如果用户请求的路径 </p>
<p>不带后缀或者后缀以.action结尾，这时请求将被转入struts2框架处理，否则struts2框架将略过该请求的处理。 </p>
<p>可以通过常量”struts.action.extension”修改action的后缀，如： </p>
<constant name="struts.action.extension" value="do"/> 

<p>如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（,）隔开。</p>
<constant name="struts.action.extension" value="do,Go"/>  



<h2 id="34-struts2是如何管理action的？这种管理方式有什么好处？"><a href="#34-struts2是如何管理action的？这种管理方式有什么好处？" class="headerlink" title="34. struts2是如何管理action的？这种管理方式有什么好处？"></a>34. struts2是如何管理action的？这种管理方式有什么好处？</h2><p>struts2框架中使用包来管理Action，包的作用和java中的类包是非常类似的。 </p>
<p>主要用于管理一组业务功能相关的action。在实际应用中，我们应该把一组业务功能相关的Action放在同一个包下。 </p>
<p>struts2中的默认包struts-default有什么作用？ </p>
<p>（1）struts-default包是由struts内置的，它定义了struts2内部的众多拦截器和Result类型，而Struts2很多核心的功能都是通过这些内置的拦截器实现，如：从请求中 </p>
<p>把请求参数封装到action、文件上传和数据验证等等都是通过拦截器实现的。当包继承了struts-default包才能使用struts2为我们提供的这些功能。 </p>
<p>（2）struts-default包是在struts-default.xml中定义，struts-default.xml也是Struts2默认配置文件。 Struts2每次都会自动加载 struts-default.xml文件。 </p>
<p>（3）通常每个包都应该继承struts-default包。   </p>
<h2 id="35-值栈ValueStack的原理与生命周期？"><a href="#35-值栈ValueStack的原理与生命周期？" class="headerlink" title="35. 值栈ValueStack的原理与生命周期？"></a>35. 值栈ValueStack的原理与生命周期？</h2><p>（1）ValueStack贯穿整个 Action 的生命周期，保存在request域中，所以ValueStack和request的生命周期一样。当Struts2接受一个请求时，会迅速创建ActionContext， ValueStack，action。然后把action存放进ValueStack，所以action的实例变量可以被OGNL访问。 请求来的时候，action、ValueStack的生命开始，请求结束，action、  ValueStack的生命结束； </p>
<p>（2）action是多例的，和Servlet不一样，Servelt是单例的； </p>
<p>（3）每个action的都有一个对应的值栈，值栈存放的数据类型是该action的实例，以及该action中的实例变量，Action对象默认保存在栈顶； </p>
<p>（4）ValueStack本质上就是一个ArrayList； </p>
<p>（5）关于ContextMap，Struts 会把下面这些映射压入 ContextMap 中： </p>
<p>parameters ：该 Map 中包含当前请求的请求参数</p>
<p>request ： 该 Map 中包含当前 request 对象中的所有属性 </p>
<p>session ：该 Map 中包含当前 session 对象中的所有属性 </p>
<p>Application：该 Map 中包含当前 application 对象中的所有属性 </p>
<p>attr：该 Map 按如下顺序来检索某个属性: request, session, application     </p>
<p>（6）使用OGNL访问值栈的内容时，不需要#号，而访问request、session、application、attr时，需要加#号； </p>
<p>（7）注意： Struts2中，OGNL表达式需要配合Struts标签才可以使用。如：&lt;s:property value=”name”/&gt; </p>
<p>（8）在struts2配置文件中引用ognl表达式 ,引用值栈的值 ，此时使用的”$”，而不是#或者%; </p>
<h2 id="36-ActionContext、ServletContext、pageContext的区别？"><a href="#36-ActionContext、ServletContext、pageContext的区别？" class="headerlink" title="36. ActionContext、ServletContext、pageContext的区别？"></a>36. ActionContext、ServletContext、pageContext的区别？</h2><p>（1）ActionContext是当前的Action的上下文环境，通过ActionContext可以获取到request、session、ServletContext等与Action有关的对象的引用； </p>
<p>（2）ServletContext是域对象，一个web应用中只有一个ServletContext，生命周期伴随整个web应用； </p>
<p>（3）pageContext是JSP中的最重要的一个内置对象，可以通过pageContext获取其他域对象的应用，同时它是一个域对象，作用范围只针对当前页面，当前页面结束时，pageContext销毁， </p>
<p>生命周期是JSP四个域对象中最小的。 </p>
<h2 id="37-struts的工作原理"><a href="#37-struts的工作原理" class="headerlink" title="37. struts的工作原理"></a>37. struts的工作原理</h2><p>（1）初始化，读取struts-config.xml、web.xml等配置文件（所有配置文件的初始化）</p>
<p>（2）发送HTTP请求,客户端发送以.do结尾的请求</p>
<p>（3）填充FormBean（实例化、复位、填充数据、校验、保存）</p>
<p>（4）将请求转发到Action（调用Action的execute（）方法）</p>
<p>（5）处理业务（可以调用后台类，返回ActionForward对象）</p>
<p>（6）返回目标响应对象（从Action返回到ActionServlet）</p>
<p>（7）转换Http请求到目标响应对象（查找响应，根据返回的Forward keyword）</p>
<p>（8）Http响应，返回到Jsp页面</p>
<h2 id="38-用自己的话简要阐述struts2的执行流程。"><a href="#38-用自己的话简要阐述struts2的执行流程。" class="headerlink" title="38. 用自己的话简要阐述struts2的执行流程。"></a>38. 用自己的话简要阐述struts2的执行流程。</h2><p>Struts 2框架本身大致可以分为3个部分：核心控制器FilterDispatcher、业务控制器Action和用户实现的企业业务逻辑组件。</p>
<p>核心控制器FilterDispatcher是Struts 2框架的基础，包含了框架内部的控制流程和处理机制。业务控制器Action和业务逻辑组件是需要用户来自己实现的。用户在开发Action和业务逻辑组件的同时，还需要编写相关的配置文件，供核心控制器FilterDispatcher来使用。</p>
<p>Struts 2的工作流程相对于Struts 1要简单，与WebWork框架基本相同，所以说Struts 2是WebWork的升级版本。基本简要流程如下：</p>
<p>（1）客户端浏览器发出HTTP请求。</p>
<p>（2）根据web.xml配置，该请求被FilterDispatcher接收。</p>
<p>（3）根据struts.xml配置，找到需要调用的Action类和方法， 并通过IoC方式，将值注入给Aciton。</p>
<p>（4）Action调用业务逻辑组件处理业务逻辑，这一步包含表单验证。</p>
<p>（5）Action执行完毕，根据struts.xml中的配置找到对应的返回结果result，并跳转到相应页面。</p>
<p>（6）返回HTTP响应到客户端浏览器。</p>
<p>它是以Webwork的设计思想为核心，吸收struts1的优点，可以说 struts2是struts1和Webwork结合的产物。</p>
<h3 id="struts2-的工作原理图：-一个请求在Struts2框架中的处理分为以下几个步骤："><a href="#struts2-的工作原理图：-一个请求在Struts2框架中的处理分为以下几个步骤：" class="headerlink" title="struts2 的工作原理图： 一个请求在Struts2框架中的处理分为以下几个步骤："></a>struts2 的工作原理图： 一个请求在Struts2框架中的处理分为以下几个步骤：</h3><p>（1）客户端发出一个指向servlet容器的请求(tomcat)；</p>
<p>（2）这个请求会经过图中的几个过滤器，最后会到达FilterDispatcher过滤器。</p>
<p>（3）过滤器FilterDispatcher是struts2框架的心脏，在处理用户请求时，它和请求一起相互配合访问struts2 的底层框架结构。在web容器启动时，struts2框架会自动加载配置文件里相关参数，并转换成相应的类。 </p>
<p>如：ConfigurationManager、ActionMapper和ObjectFactory。ConfigurationManager 存有配置文件的一 些基本信息，ActionMapper存有action的配置信息。在请求过程中所有的对象（Action，Results， Interceptors，等）都是通过ObjectFactory来创建的。过滤器会通过询问ActionMapper类来查找请求中 需要用到的Action。</p>
<p>（4）如果找到需要调用的Action，过滤器会把请求的处理交给ActionProxy。ActionProxy为Action的代理对象 。ActionProxy通过ConfigurationManager询问框架的配置文件，找到需要调用的Action类。 </p>
<p>（5）ActionProxy创建一个ActionInvocation的实例。ActionInvocation在ActionProxy层之下，它表示了 Action的执行状态,或者说它控制的Action的执行步骤。它持有Action实例和所有的Interceptor。 </p>
<p>（6）ActionInvocation实例使用命名模式来调用，1） ActionInvocation初始化时，根据配置，加载Action相 关的所有Interceptor。2）通过ActionInvocation.invoke方法调用Action实现时，执行Interceptor。在 调用Action的过程前后，涉及到相关拦截器(intercepetor)的调用。</p>
<p>（7）一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果。返回结果 通常是（但不总是，也可能是另外的一个Action链）一个需要被表示的JSP或者FreeMarker的模版。在表 示的过程中可以使用Struts2 框架中继承的标签。</p>
<h2 id="39-Struts2-如何访问-HttpServletRequest、HttpSession、ServletContext-三个域对象"><a href="#39-Struts2-如何访问-HttpServletRequest、HttpSession、ServletContext-三个域对象" class="headerlink" title="39. Struts2 如何访问 HttpServletRequest、HttpSession、ServletContext 三个域对象 ?"></a>39. Struts2 如何访问 HttpServletRequest、HttpSession、ServletContext 三个域对象 ?</h2><p>①. 与 Servlet API 解耦的访问方式</p>
<p>　　&gt; 通过 ActionContext 访问域对象对应的 Map 对象</p>
<p>　　&gt; 通过实现 Aware 接口使 Struts2 注入对应的 Map 对象</p>
<p>②. 与 Servlet API 耦合的访问方式</p>
<p>　　&gt; 通过 ServletActionContext 直接获取 Servlet API 对象</p>
<p>　　&gt; 通过实现 ServletXxxAware 接口的方式使 Struts2 注入对应的对象</p>
]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>面试整理0406</title>
    <url>/2020/06/06/%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%860406/</url>
    <content><![CDATA[<h3 id="1-本地线程-theadlocal-volital-线程锁-线程池-callable应用场景-优点"><a href="#1-本地线程-theadlocal-volital-线程锁-线程池-callable应用场景-优点" class="headerlink" title="1.本地线程  theadlocal  volital  线程锁  线程池  callable应用场景  优点"></a>1.本地线程  theadlocal  volital  线程锁  线程池  callable应用场景  优点</h3><h4 id="1-1-什么是本地线程？"><a href="#1-1-什么是本地线程？" class="headerlink" title="1.1 什么是本地线程？"></a>1.1 什么是本地线程？</h4><p>Threadlocal意思就是线程本地的意思。ThreadLocal字面意思是本地线程，其实更准确来说是线程局部变量。</p>
<p>我们知道，在多线程并发执行时，一方面，需要进行数据共享，于是才有了volatile变量解决多线程间的数据可见性，也有了锁的同步机制，使变量或代码块在某一时该，只能被一个线程访问，确保数据共享的正确性。其中，Synchronized用于线程间的数据共享的。另一方面，并不是所有数据都需要共享的，这些不需要共享的数据，让每个线程单独去维护就行了，ThreadLocal就是用于线程间的数据隔离的。</p>
 <a id="more"></a>

<p>ThreadLocal提供线程内部的局部变量，在本线程内随时随地可取，隔离其他线程，获取保存的值时非常方便，ThreadLocal为变量在每个线程中都创建了一个副本，每个线程就可以很方便的访问自己内部的副本变量。</p>
<h4 id="1-2-在java中守护线程和本地线程有什么区别？"><a href="#1-2-在java中守护线程和本地线程有什么区别？" class="headerlink" title="1.2 在java中守护线程和本地线程有什么区别？"></a>1.2 在java中守护线程和本地线程有什么区别？</h4><p>java中的线程分为两种：守护线程（Daemon）和用户线程（User）。任何线程都可以设置为守护线程和用户线程，通过方法Thread.setDaemon(bool on)；true则把该线程设置为守护线程，反之则为用户线程。Thread.setDaemon()必须在Thread.start()之前调用，否则运行时会抛出异常。在java中守护线程和本地线程有什么区别呢？</p>
<p>唯一的区别是判断虚拟机(JVM)何时离开，Daemon是为其他线程提供服务，如果全部的User Thread已经撤离，Daemon 没有可服务的线程，JVM撤离。也可以理解为守护线程是JVM自动创建的线程（但不一定），用户线程是程序创建的线程；比如JVM的垃圾回收线程是一个守护线程，当所有线程已经撤离，不再产生垃圾，守护线程自然就没事可干了，当垃圾回收线程是Java虚拟机上仅剩的线程时，Java虚拟机会自动离开。</p>
<p>在JVM启动时候会调用main函数，main函数所在的线程是一个用户线程，这个是我们可以看到的线程，其实JVM内部同时还启动了好多守护线程，比如垃圾回收线程。那么守护线程和用户线程有什么区别那？区别之一是当最后一个非守护线程结束时候，JVM会正常退出，而不管当前是否有守护线程，也就是说守护线程是否结束并不影响JVM的退出。言外之意是只要有一个用户线程还没结束正常情况下JVM就不会退出。</p>
<p>如果你想在主线程结束后JVM进程马上结束，那么创建线程的时候可以设置线程为守护线程，否者如果希望主线程结束后子线程继续工作，等子线程结束后在让JVM进程结束那么就设置子线程为用户线程，Tomcat框架就是用了守护线程和用户线程联合运行起来的</p>
<h3 id="1-3-volital-关键字作用？"><a href="#1-3-volital-关键字作用？" class="headerlink" title="1.3 volital  关键字作用？"></a>1.3 volital  关键字作用？</h3><h4 id="1-4-什么是线程池？"><a href="#1-4-什么是线程池？" class="headerlink" title="1.4 什么是线程池？"></a>1.4 什么是线程池？</h4><p>线程池顾名思义就是事先创建若干个可执行的线程放入一个池（容器）中，需要的时候从池中获取线程不用自行创建，使用完毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销。</p>
<p>线程池就是提前创建若干个线程，如果有任务需要处理，线程池里的线程就会处理任务，处理完之后线程并不会被销毁，而是等待下一个任务。由于创建和销毁线程都是消耗系统资源的，所以当你想要频繁的创建和销毁线程的时候就可以考虑使用线程池来提升系统的性能。</p>
<p>Java中有三个比较常用的线程池，分别是FixedThreadPool，</p>
<p>SingleThreadExecutor，CachedThreadPool。</p>
<p>1)  FixedThreadPool</p>
<p>　　这是一个线程数固定的线程池，当这个线程池被创建的时候，池里的线程数就已经固定了。当需要运行的线程数量大体上变化不大时，适合使用这种线程池。固定数量还有一个好处，它可以一次性支付高昂的创建线程的开销，之后再使用的时候就不再需要这种开销。</p>
<p>2)  SingleThreadExecutor</p>
<p>　　这是一个线程数量为1的线程池，所有提交的这个线程池的任务都会按照提交的先后顺序排队执行。单个线程执行有个好处：由于任务之间没有并发执行，因此提交到线程池种的任务之间不会相互干扰。程序执行的结果更具有确定性。</p>
<p>3)  CachedThreadPool</p>
<p>　　一看到Cache就知道这是一个和缓存有关的线程池，每次有任务提交到线程池的时候，如果池中没有空闲的线程，线程池就会为这个任务创建一个线程，如果有空闲的线程，就会使用已有的空闲线程执行任务。有的人可能会有个疑惑：这样线程不就越来越多了吗？其实不是的，这个线程池还有一个销毁机制，如果一个线程60秒之内没有被使用过，这个线程就会被销毁，这样就节省了很多资源。CachedThreadPool是一个比较通用的线程池，它在多数情况下都能表现出优良的性能。以后编码的时候，遇事不决，用缓存（线程池）。</p>
<h3 id="1-5-callable应用场景，优点是什么？"><a href="#1-5-callable应用场景，优点是什么？" class="headerlink" title="1.5 callable应用场景，优点是什么？"></a>1.5 callable应用场景，优点是什么？</h3><p>创建线程的2种方式，一种是直接继承Thread，另外一种就是实现Runnable接口。</p>
<p>这2种方式都有一个缺陷就是：在执行完任务之后无法获取执行结果。</p>
<p>如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。</p>
<p>　　而自从Java 1.5开始，就提供了Callable和Future，通过它们可以在任务执行完毕之后得到任务执行结果。</p>
<h2 id="2-redis-mybatis-二级缓存-一级缓存-spring源码"><a href="#2-redis-mybatis-二级缓存-一级缓存-spring源码" class="headerlink" title="2.redis  mybatis  二级缓存  一级缓存 spring源码"></a>2.redis  mybatis  二级缓存  一级缓存 spring源码</h2><p>一级缓存就是同一个sqlsession中查询一致。则第一次查询到的结果缓存到内存。后续查询则直接读取缓存。</p>
<p>但是spring封装的方法  每一次提交事务都是打开关闭一个sqlsession。所以一级缓存用不到。</p>
<p>Mybatis一级缓存：Mybatis对缓存提供支持，但是在没有配置的默认情况下，它只开启一级缓存，一级缓存只是相对于同一个SqlSession而言。所以在参数和SQL完全一样的情况下，我们使用同一个SqlSession对象调用一个Mapper方法，往往只执行一次SQL，因为使用SelSession第一次查询后，MyBatis会将其放在缓存中，以后再查询的时候，如果没有声明需要刷新，并且缓存没有超时的情况下，SqlSession都会取出当前缓存的数据，而不会再次发送SQL到数据库。</p>
<p>Mybatis二级缓存：MyBatis的二级缓存是Application级别的缓存，它可以提高对数据库查询的效率，以提高应用的性能。SqlSessionFactory层面上的二级缓存默认是不开启的，二级缓存的开席需要进行配置，实现二级缓存的时候，MyBatis要求返回的POJO必须是可序列化的。 也就是要求实现Serializable接口，配置方法很简单，只需要在映射XML文件配置就可以开启缓存了</p>
<h3 id="3-dubbo-消费者-生产者-区-组-版本号分"><a href="#3-dubbo-消费者-生产者-区-组-版本号分" class="headerlink" title="3. dubbo  消费者  生产者  区  组  版本号分"></a>3. dubbo  消费者  生产者  区  组  版本号分</h3><p>3.1 Dubbo</p>
<h2 id="4-事务传播行为-数据库事务隔离级别"><a href="#4-事务传播行为-数据库事务隔离级别" class="headerlink" title="4. 事务传播行为   数据库事务隔离级别"></a>4. 事务传播行为   数据库事务隔离级别</h2><h3 id="4-1-数据库事务隔离级别"><a href="#4-1-数据库事务隔离级别" class="headerlink" title="4.1 数据库事务隔离级别"></a>4.1 数据库事务隔离级别</h3><ol>
<li>脏读：</li>
</ol>
<p>脏读是指一个事务处理过程中读取了另一个未提交的事务中的数据。当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。</p>
<ol start="2">
<li>不可重复读</li>
</ol>
<p>不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询隔离间隔中，被另一个事务修改并提交了。</p>
<p>例如事务T1在读取某一个数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p>
<p>不可重复读和读脏的区别是，读脏是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务未提交的数据。</p>
<p>脏数据：脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是脏数据(Dirty Data)，依据脏数据所做的操作可能是不正确的。</p>
<p>不可重复读：在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读</p>
<ol start="3">
<li>虚读（幻读）</li>
</ol>
<p>虚读是事务非独立执行时发生的一种现象，例如事务T1对一个表中所有的行的某个数据项做了从1修改为2的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为1并且提交给数据库，而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生了幻觉一样，这就是幻读。</p>
<h2 id="aop-ioc-几种注入"><a href="#aop-ioc-几种注入" class="headerlink" title="aop  ioc  几种注入"></a>aop  ioc  几种注入</h2><h3 id="5-1-什么是AOP"><a href="#5-1-什么是AOP" class="headerlink" title="5.1 什么是AOP"></a>5.1 什么是AOP</h3><p>AOP（Aspect-Oriented Programming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>
<p>而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。</p>
<p>实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码。然而殊途同归，实现AOP的技术特性却是相同的，分别为：</p>
<p>1、join point（连接点）：是程序执行中的一个精确执行点，例如类中的一个方法。它是一个抽象的概念，在实现AOP时，并不需要去定义一个join point。</p>
<p>2、point cut（切入点）：本质上是一个捕获连接点的结构。在AOP中，可以定义一个point cut，来捕获相关方法的调用。</p>
<p>3、advice（通知）：是point cut的执行代码，是执行“方面”的具体逻辑。</p>
<p>4、aspect（方面）：point cut和advice结合起来就是aspect，它类似于OOP中定义的一个类，但它代表的更多是对象间横向的关系。</p>
<p>5、introduce（引入）：为对象引入附加的方法或属性，从而达到修改对象结构的目的。有的AOP工具又将其称为mixin。</p>
<h3 id="5-2-什么是IOC"><a href="#5-2-什么是IOC" class="headerlink" title="5.2 什么是IOC"></a>5.2 什么是IOC</h3><p>IOC是一种思想，控制反转，在java开发中，就是将你设计好的对象交给容器控制，而不是显示的用代码进行对象的创建。</p>
<p>把创建和查找对象的控制权交给IOC容器，由IOC容器进行注入、组合对象，这样对象与对象之间是松耦合、便于测试、功能可复用（减少对象的创建和内存消耗），使得程序的整个体系结构可维护性、灵活性、扩展性变高。</p>
<p>使用IOC的好处：资源集中管理，实现资源的可配置和容易管理，降低了资源的依赖程度，即松耦合，便于测试，功能可复用</p>
<h3 id="5-3-什么是DI"><a href="#5-3-什么是DI" class="headerlink" title="5.3 什么是DI"></a>5.3 什么是DI</h3><p>DI 是指依赖注入，是IOC容器装配、注入对象的一种方式。通过依赖注入机制，简单的配置即可注入需要的资源，完成自身的业务逻辑，不需要关心资源的出处和具体实现。</p>
<p>Spring提供了三种主要的方式来配置IOC容器中的bean</p>
<p>①基于XML文件配置</p>
<p>②基于注解配置</p>
<p>③基于注解+java代码显示的配置</p>
<h3 id="6-数据库优化"><a href="#6-数据库优化" class="headerlink" title="6. 数据库优化"></a>6. 数据库优化</h3><h4 id="6-1-数据库优化的几种方式："><a href="#6-1-数据库优化的几种方式：" class="headerlink" title="6.1 数据库优化的几种方式："></a>6.1 数据库优化的几种方式：</h4><h6 id="一、创建索引："><a href="#一、创建索引：" class="headerlink" title="一、创建索引："></a>一、创建索引：</h6><p>\1. 要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引 。</p>
<p>\2. (1)在经常需要进行检索的字段上创建索引，比如要按照表字段username进行检索，那么就应该在姓名字段上创建索引，如果经常要按照员工部门和员工岗位级别进行检索，那么就应该在员工部门和员工岗位级别这两个字段上创建索引。 </p>
<p>  (2)创建索引给检索带来的性能提升往往是巨大的，因此在发现检索速度过慢的时候应该首先想到的就是创建索引。 </p>
<p>  (3)一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。索引并不是越多越好，索引固然可以提高相应的 select 效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。</p>
<h6 id="二、避免在索引上使用计算"><a href="#二、避免在索引上使用计算" class="headerlink" title="二、避免在索引上使用计算"></a>二、避免在索引上使用计算</h6><p>在where字句中，如果索引列是计算或者函数的一部分，DBMS的优化器将不会使用索引而使用全表查询,函数属于计算的一种,同时在in和exists中通常情况下使用EXISTS，因为in不走索引。</p>
<h5 id="三、使用预编译查询"><a href="#三、使用预编译查询" class="headerlink" title="三、使用预编译查询"></a>三、使用预编译查询</h5><p>程序中通常是根据用户的输入来动态执行SQL，这时应该尽量使用参数化SQL,这样不仅可以避免SQL注入漏洞攻击，最重要数据库会对这些参数化SQL进行预编译，这样第一次执行的时候DBMS会为这个SQL语句进行查询优化并且执行预编译，这样以后再执行这个SQL的时候就直接使用预编译的结果，这样可以大大提高执行的速度。</p>
<h5 id="四、调整Where字句中的连接顺序"><a href="#四、调整Where字句中的连接顺序" class="headerlink" title="四、调整Where字句中的连接顺序"></a>四、调整Where字句中的连接顺序</h5><p>DBMS一般采用自下而上的顺序解析where字句，根据这个原理表连接最好写在其他where条件之前，那些可以过滤掉最大数量记录。</p>
<h6 id="五、尽量将多条SQL语句压缩到一句SQL中"><a href="#五、尽量将多条SQL语句压缩到一句SQL中" class="headerlink" title="五、尽量将多条SQL语句压缩到一句SQL中"></a>五、尽量将多条SQL语句压缩到一句SQL中</h6><p>每次执行SQL的时候都要建立网络连接、进行权限校验、进行SQL语句的查询优化、发送执行结果，这个过程是非常耗时的，因此应该尽量避免过多的执行SQL语句，能够压缩到一句SQL执行的语句就不要用多条来执行。</p>
<h5 id="六、用where字句替换HAVING字句"><a href="#六、用where字句替换HAVING字句" class="headerlink" title="六、用where字句替换HAVING字句"></a>六、用where字句替换HAVING字句</h5><p>避免使用HAVING字句，因为HAVING只会在检索出所有记录之后才对结果集进行过滤，而where则是在聚合前刷选记录，如果能通过where字句限制记录的数目，那就能减少这方面的开销。HAVING中的条件一般用于聚合函数 的过滤，除此之外，应该将条件写在where字句中。</p>
<h5 id="七、使用表的别名"><a href="#七、使用表的别名" class="headerlink" title="七、使用表的别名"></a>七、使用表的别名</h5><p>当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个列名上。这样就可以减少解析的时间并减 少哪些友列名歧义引起的语法错误。</p>
<h5 id="八、考虑使用临时表暂存中间结果"><a href="#八、考虑使用临时表暂存中间结果" class="headerlink" title="八、考虑使用临时表暂存中间结果"></a>八、考虑使用临时表暂存中间结果</h5><p>简化SQL语句的重要方法就是采用临时表暂存中间结果，但是，临时表的好处远远不止这些，将临时结果暂存在临时表，后面的查询就在tempdb中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。 但是也得避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>
<h3 id="7-序列化-静态属性会不会序列化-关键字-父类-是否序列化"><a href="#7-序列化-静态属性会不会序列化-关键字-父类-是否序列化" class="headerlink" title="7. 序列化  静态属性会不会序列化  关键字  父类  是否序列化"></a>7. 序列化  静态属性会不会序列化  关键字  父类  是否序列化</h3><h5 id="7-1-什么是序列化？"><a href="#7-1-什么是序列化？" class="headerlink" title="7.1 什么是序列化？"></a>7.1 什么是序列化？</h5><p>序列化是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会存在数据乱序的问题）。要实现序列化，需要让一个类实现Serializable接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通过writeObject(Object)方法就可以将对象写出（即保存其状态）；如果需要反序列化则可以用一个输入流建立对象输入流，然后通过readObject方法从流中读取对象。序列化除了能够实现对象的持久化之外，还能够用于对象的深度克隆。</p>
<p>我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。</p>
<p>   然而在实际开发过程中，我们常常会遇到这样的问题，这个类的有些属性需要序列化，而其他属性不需要被序列化，打个比方，如果一个用户有一些敏感信息（如密码，银行卡号等），为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p>
<p>总之，java 的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。</p>
<p>transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。</p>
<p>被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。</p>
<p>\8. nio  aio  bio</p>
<p>\9. java8新特性</p>
<p>9.1 java8的新特性</p>
<p>（1）Lambda 表达式</p>
<h3 id="10-jvm内存模型jmm"><a href="#10-jvm内存模型jmm" class="headerlink" title="10. jvm内存模型jmm"></a>10. jvm内存模型jmm</h3><p>首先要说一下JVM内存空间分为五部分，分别是：方法区、堆、Java虚拟机栈、本地方法栈、程序计数器</p>
<p>方法区主要用来存放类信息、类的静态变量、常量、运行时常量池等，方法区的大小是可以动态扩展的，</p>
<p>堆主要存放的是数组、类的实例对象、字符串常量池等。</p>
<p>Java虚拟机栈是描述JAVA方法运行过程的内存模型，Java虚拟机栈会为每一个即将执行的方法创建一个叫做“栈帧”的区域，该区域用来存储该方法运行时需要的一些信息，包括：局部变量表、操作数栈、动态链接、方法返回地址等。比如我们方法执行过程中需要创建变量时，就会将局部变量插入到局部变量表中，局部变量的运算、传递等在操作数栈中进行，当方法执行结束后，这个方法对应的栈帧将出栈，并释放内存空间。栈中会发生的两种异常，StackOverFlowError和OutOfMemoryError,StackOverFlowError表示当前线程申请的栈超过了事先定好的栈的最大深度，但内存空间可能还有很多。 而OutOfMemoryError是指当线程申请栈时发现栈已经满了，而且内存也全都用光了。</p>
<p>本地方法栈结构上和Java虚拟机栈一样，只不过Java虚拟机栈是运行Java方法的区域，而本地方法栈是运行本地方法的内存模型。运行本地方法时也会创建栈帧，同样栈帧里也有局部变量表、操作数栈、动态链接和方法返回地址等，在本地方法执行结束后栈帧也会出栈并释放内存资源，也会发生OutOfMemoryError。</p>
<p>最后是程序计数器，程序计数器是一个比较小的内存空间，用来记录当前线程正在执行的那一条字节码指令的地址。如果当前线程正在执行的是本地方法，那么此时程序计数器为空。程序计数器有两个作用，1、字节码解释器通过改变程序计数器来一次读取指令，从而实现代码的流程控制，比如我们常见的顺序、循环、选择、异常处理等。2、在多线程的情况下，程序计数器用来记录当前线程执行的位置，当线程切换回来的时候仍然可以知道该线程上次执行到了哪里。而且程序计数器是唯一一个不会出现OutOfMeroryError的内存区域。</p>
<p>方法区和堆都是线程共享的，在JVM启动时创建，在JVM停止时销毁，而Java虚拟机栈、本地方法栈、程序计数器是线程私有的，随线程的创建而创建，随线程的结束而死亡。</p>
<h3 id="11-hashcode-equals-线程安全的hashmap？"><a href="#11-hashcode-equals-线程安全的hashmap？" class="headerlink" title="11. hashcode  equals  线程安全的hashmap？"></a>11. hashcode  equals  线程安全的hashmap？</h3><p>hashCode()方法和equal()方法的作用其实一样，在Java里都是用来对比两个对象是否相等一致，那么equal()既然已经能实现对比的功能了，为什么还要hashCode()呢？</p>
<p>因为重写的equal（）里一般比较的比较全面比较复杂，这样效率就比较低，而利用hashCode()进行对比，则只要生成一个hash值进行比较就可以了，效率很高，那么hashCode()既然效率这么高为什么还要equal()呢？</p>
<p>因为hashCode()并不是完全可靠，有时候不同的对象他们生成的hashcode也会一样（生成hash值得公式可能存在的问题），所以hashCode()只能说是大部分时候可靠，并不是绝对可靠，所以我们可以得出：</p>
<p>（1）equal()相等的两个对象他们的hashCode()肯定相等，也就是用equal()对比是绝对可靠的。</p>
<p>（2）hashCode()相等的两个对象他们的equal()不一定相等，也就是hashCode()不是绝对可靠的。</p>
<p>所有对于需要大量并且快速的对比的话如果都用equal()去做显然效率太低，所以解决方式是，每当需要对比的时候，首先用hashCode()去对比，如果hashCode()不一样，则表示这两个对象肯定不相等（也就是不必再用equal()去再对比了）,如果hashCode()相同，此时再对比他们的equal()，如果equal()也相同，则表示这两个对象是真的相同了，这样既能大大提高了效率也保证了对比的绝对正确性！</p>
<p> 这种大量的并且快速的对象对比一般使用的hash容器中，比如hashset,hashmap,hashtable等等，比如hashset里要求对象不能重复，则他内部必然要对添加进去的每个对象进行对比，而他的对比规则就是像上面说的那样，先hashCode()，如果hashCode()相同，再用equal()验证，如果hashCode()都不同，则肯定不同，这样对比的效率就很高了。</p>
]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试，阿里</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里面试整理</title>
    <url>/2020/06/06/%E9%98%BF%E9%87%8C%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-类修饰词default和protected关系"><a href="#1-类修饰词default和protected关系" class="headerlink" title="1. 类修饰词default和protected关系"></a>1. 类修饰词default和protected关系</h2><p>Java一共有四类类修饰符，private  default，public protected</p>
<p>protected 包内所有类可见，包外有继承关系的子类可见。</p>
<p>default表示默认，不仅本类访问，而且是同包可见。</p>
<p>当修饰词是private时，只有类内能够访问到，其他任何类都不能直接访问到。</p>
<p>当修饰词是public时，任何类内都能访问到。</p>
<a id="more"></a>



<h3 id="2-参数传递，值传递和引用传递的关系，String和char数组作为入参，结果会改变吗"><a href="#2-参数传递，值传递和引用传递的关系，String和char数组作为入参，结果会改变吗" class="headerlink" title="2.参数传递，值传递和引用传递的关系，String和char数组作为入参，结果会改变吗"></a>2.参数传递，值传递和引用传递的关系，String和char数组作为入参，结果会改变吗</h3><p>值传递：方法调用时，实际参数把它的值传递给对应的形式参数，方法执行中形式参数值的改变不影响实际参数的值。</p>
<p>引用传递：也称为传地址。方法调用时，实际参数的引用(地址，而不是参数的值)被传递给方法中相对应的形式参数，在方法执行中，对形式参数的操作实际上就是对实际参数的操作，方法执行中形式参数值的改变将会影响实际参数的值。</p>
<p>String 比较特别，看过String 代码的都知道， String 是 final的。所以值是不变的。 函数中String对象引用的副本指向了另外一个新String对象,而数组对象引用的副本没有改变,而是改变对象中数据的内容.  </p>
<p>String作为参数传入时，因为在java中都是传递的是参数的引用，也就是按值传递的，String作为参数时，传递的是String数据的拷贝，那么方法中是不会改变数据本身的内容，char[]作为参数入参时，传递的是引用类型也就是数组的指向的引用的拷贝，引用的拷贝也是指向数组，所以对改变原数组的值。</p>
<h2 id="3-异常都有几大类？运行时的空指针会抛异常吗？IO-Exception异常发生需要自己去捕获？"><a href="#3-异常都有几大类？运行时的空指针会抛异常吗？IO-Exception异常发生需要自己去捕获？" class="headerlink" title="3.异常都有几大类？运行时的空指针会抛异常吗？IO Exception异常发生需要自己去捕获？"></a>3.异常都有几大类？运行时的空指针会抛异常吗？IO Exception异常发生需要自己去捕获？</h2><p>Java中的异常主要分为运行时异常runtimeExclrtion和非运行时异常IOExcletion，</p>
<p>运行时异常，主要是程序的编写存在问题，javac在编译时，不会提示和发现这样的异常，不要求在程序处理这些异常。所以如果愿意，我们可以编写代码处理（使用try…catch…finally）这样的异常，也可以不处理。对于这些异常，我们应该修正代码，而不是去通过异常处理器处理 。这样的异常发生的原因多半是代码写的有问题。比如数组越界异常，类未找到异常等等异常情况。</p>
<p>IOExcletion非运行时异常，这种异常编译器要求强制处置，要么try-cathch,要么在方法名后面抛出。要么捕获要么抛出。</p>
<p>4.线程池的TheadPoolExcutor核心参数,什么时候创建线程，什么时候不创建，线程达到最大上限是什么策略？什么时候加入缓存队列？</p>
<p>一个完整的线程池应该具备如下要素：</p>
<p>任务队列：用于缓存提交的任务</p>
<p>线程数量管理功能：一个线程池应该很好的管理和控制线程的数量，可以通过三个参数来实现，比如创建线程池时初始的线程数量init，线程池自动扩展时最大的线程数量；在线程空闲时需要释放一定的线程但是也要维持一定的活跃数量。</p>
<h3 id="5-线程状态？什么时候进入阻塞态什么时候进入等待状态？wait之后的状态可以直接回到Runnable吗？"><a href="#5-线程状态？什么时候进入阻塞态什么时候进入等待状态？wait之后的状态可以直接回到Runnable吗？" class="headerlink" title="5.线程状态？什么时候进入阻塞态什么时候进入等待状态？wait之后的状态可以直接回到Runnable吗？"></a>5.线程状态？什么时候进入阻塞态什么时候进入等待状态？wait之后的状态可以直接回到Runnable吗？</h3><p>（1）. NEW 新建状态  线程刚被创建，但是还没启动，还没调用start方法<br>（2）. Runnable 可运行状态 线程可以在Java虚拟机中运行的状态，可能正在运行自己的代码，也可能没有，这取决于操作系统处理器<br>（3）. Blocked 锁阻塞 当一个线程试图获取一个对象锁时，而该对象锁被其他的线程持有，则该线程进入Blocked状态，当该线程持有锁时，该线程将变成Runnable状态<br>（4）. Waiting 无限等待 一个线程在等待另一个线程执行唤醒动作时，该线程进入Waiting状态，进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者是notifyAll方法才能够唤醒。<br>（5）. Timed Waiting 计时等待 同Waiting状态 ，，有几个方法有超时参数，调用他们将进入Timed Waiting状态，这一状态将一直保持到超时期满或者是接收到唤醒通知，带有超时参数的常用方法有Thread.sheep、Object.wait<br>（6）. Teminated 被终止 因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。</p>
<h3 id="6-高并发会带来什么问题？死锁的解决办法？"><a href="#6-高并发会带来什么问题？死锁的解决办法？" class="headerlink" title="6.高并发会带来什么问题？死锁的解决办法？"></a>6.高并发会带来什么问题？死锁的解决办法？</h3><p>高并发就是多个进程或者线程同时处理不同的操作。高并发会导致系统数据不正确，会出现脏数据等等问题。</p>
<p>对于一些大型网站，比如门户网站，在面对大量用户访问、高并发请求方面，基本的解决方案集中在这样几个环节：使用高性能的服务器、高性能的数据库度、高效率的编程语言、还有高性能的Web容器。</p>
<h3 id="7-Java的锁的了解，Sychronzed有哪些方法？一个类中两个Sychronized方法被两个线程锁住，分别去调用会阻塞吗？"><a href="#7-Java的锁的了解，Sychronzed有哪些方法？一个类中两个Sychronized方法被两个线程锁住，分别去调用会阻塞吗？" class="headerlink" title="7.Java的锁的了解，Sychronzed有哪些方法？一个类中两个Sychronized方法被两个线程锁住，分别去调用会阻塞吗？"></a>7.Java的锁的了解，Sychronzed有哪些方法？一个类中两个Sychronized方法被两个线程锁住，分别去调用会阻塞吗？</h3><p>悲观锁乐观锁：</p>
<p>悲观锁：先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p>
<p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p>
<p>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</p>
<p>CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。</p>
<p>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</p>
<p>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</p>
<h3 id="8-设计模式知道哪些？设计原则有哪些？单例模式构造函数有何特点？静态方法初始化具体操作-为什么要加volatile"><a href="#8-设计模式知道哪些？设计原则有哪些？单例模式构造函数有何特点？静态方法初始化具体操作-为什么要加volatile" class="headerlink" title="8.设计模式知道哪些？设计原则有哪些？单例模式构造函数有何特点？静态方法初始化具体操作?为什么要加volatile?"></a>8.设计模式知道哪些？设计原则有哪些？单例模式构造函数有何特点？静态方法初始化具体操作?为什么要加volatile?</h3><p>9.Spring的IOC和AOP? IoC自动注入的注解？@Autowired的功能？</p>
<p>10.数据库方面除了项目之外还有哪些深入学习？试验RR级别下出现幻读？</p>
<p>\1. 什么是多态？</p>
<p>接口的多种不同的实现方式即为多态</p>
<p>在同一个方法中，这种由于参数类型不同而导致执行效果各异的现象就是多态</p>
<p>在Java中为了实现多态，允许使用一个父类类型的变量来引用一个子类类型的对象，根据被引用子类对象特征的不同，得到不同的运行结果。</p>
<p>多态具体表现在重写和重载</p>
<p>多态就是类的多种表现方式</p>
<p>比如方法的同名不同参</p>
<p>子类重写父类</p>
<p>方法的重写和重载是Java多态性的不同表现。</p>
<p>重写是父类与子类之间多态性的一种表现。</p>
<p>重载是一个类中多态性的一种表现。</p>
<p>如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 。</p>
<p>子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。</p>
<p>如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载。</p>
<p>并且重载的方法是可以改变返回值的类型的。</p>
<p>\2. 接口与抽象类的区别？</p>
<p> 含有abstract修饰符的类即为抽象类，抽象类不能创建实例对象。含有抽象方法的类必须定义为abstract class。在abstract class中，方法不必是抽象的，但是抽象方法必须在具体子类中实现，所以，不能有抽象构造方法或抽象静态方法。子类如果没有实现抽象父类中的所有抽象方法，则必须定义为abstract类型。抽象类需要被继承才能使用，而被final修饰的类无法被继承，所以abstract和final是不能共存的。</p>
<p>  接口（interface）可以说成是抽象类的一种特例，接口中的所有方法都必须是抽象的。<strong><em>\</em>接口中的方法定义默认为public abstract类型**</strong>，接口中的成员变量类型默认为public static final。</p>
<p>\3. 为什么会有java内存模型？</p>
<p>java内存模型(Java Memory Model，JMM)是java虚拟机规范定义的，用来屏蔽掉java程序在各种不同的硬件和操作系统对内存的访问的差异，这样就可以实现java程序在各种不同的平台上都能达到内存访问的一致性。</p>
]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试，阿里</tag>
      </tags>
  </entry>
  <entry>
    <title>参考面经</title>
    <url>/2020/06/05/%E5%8F%82%E8%80%83%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<p>各公司面试题整理</p>
<a id="more"></a>



<h3 id="一、前两道要求写出代码"><a href="#一、前两道要求写出代码" class="headerlink" title="一、前两道要求写出代码"></a>一、前两道要求写出代码</h3><p>后两道说思路即可</p>
<p>第一题是自己设计一个双向链表，并实现插入 删除 一开始忘了处理头尾节点的情况，面试官让再检查，然后补上了</p>
<p>第二题是字符串替换，在字符串s中找到字符串p，并替换成e 这个题问了面试官说可以用暴力，就直接暴力解了，但是忘了string的insert和erase怎么用了，太菜了…</p>
<p>第三题如何找链表的第k个节点，思路：倒数第k个就是正数第l-k+1个，即l-(k-1),也就是说让一个游标先走k-1步，到达第k个节点，再有另一个游标从头开始，这样当第一个游标到达最后一个节点的时候，第二个游标正好在第l-(k-1)个节点，即倒数第k个节点上</p>
<p>第四题场景：服务器可能被IP重放攻击，要找出访问量最大的k个IP并处理，抽象成topK问题，先哈希去重，再创建小顶堆维护k个节点即可，后面又问了需要多少内存，堆需要维护的内存直接忽略不计了，因为主要的内存消耗在创建哈希表上，当时脑子有点乱，太迷了…第一次说了个8G，后来一想肯定不对，重新算了下，应该是2^32 *8B左右</p>
<h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><p>二维矩阵中寻找元素，二维数组满足从左到右从上到下非递减， 从右上角或者左下角扫描，每次砍掉一行或者一列，时间复杂度max（m,n）</p>
<p>数据库的一些知识，mysql和redis，可以看我其他的面经，就不多提了</p>
<p>http 0.9 1.0 1.1 2.0 https tcp/udp等等</p>
<p>三、</p>
<p><a href="https://blog.nowcoder.net/n/e5fe3fa16b774b469241029a6de4e65a#一java" target="_blank" rel="noopener">https://blog.nowcoder.net/n/e5fe3fa16b774b469241029a6de4e65a#一java</a></p>
<p>这个链接比较详细</p>
<p>但是觉得这些参考价值一般，一和二都是直接内推的面试，注重了编程。</p>
<h3 id="325搜狗"><a href="#325搜狗" class="headerlink" title="325搜狗"></a>325搜狗</h3><p>1项目经验</p>
<p>2poi限制输入</p>
<p>3final</p>
<p>4hashmap currenthashmap </p>
<p>5spring特征spring事务</p>
<p>6mysql死锁</p>
<p>7jvm G1 CMS</p>
<p>8卷积神经网络</p>
<p>9linux操作</p>
<h4 id="325美团"><a href="#325美团" class="headerlink" title="325美团"></a>325美团</h4><p>1项目</p>
<p>2 mybitits hibenite 区别，哪个效率更高</p>
<p>3数据链路层和网络层设备和协议</p>
<p>4数据库左右连接，内连接自然连接，</p>
<p>5数据库二级索引 数据结构 数据怎么保存</p>
<p>6虚拟地址 为什么是2的64次方</p>
<p>7http的状态码</p>
<p>1gc</p>
<p>2三次握手 为什么三次握手</p>
<p>3http长连接短连接</p>
<p>4io多路复用</p>
<p>5数据库索引结构 为什么用b+树</p>
<p>6tcp怎么保证可靠的</p>
<p>7将字符串空格变为%23，从后往前解决</p>
<p>字节414</p>
<p>1==和equals</p>
<p>2重写equals和hashcode</p>
<p>3hashmap</p>
<p>4static和volatile</p>
<p>5第K大的数</p>
<p>6TCP可靠</p>
<p>7网络拥塞避免</p>
<p>8time-wait状态</p>
<h3 id="阿里414"><a href="#阿里414" class="headerlink" title="阿里414"></a>阿里414</h3><p>项目，excel面向任务流</p>
<p>最小生成树和图</p>
<p>Int long大小</p>
<p>贪心算法</p>
<p>红黑树</p>
<h3 id="携程"><a href="#携程" class="headerlink" title="携程"></a>携程</h3><p>1int大小integer</p>
<p>2gc</p>
<p>3jdk jre</p>
<p>4String stringbuilder 字符串常量池</p>
<p>5sychronized和volitile</p>
<p>6ssh</p>
<p>7</p>
<h2 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h2><p>1多线程 锁区别</p>
<p>2设计模式，单例（保证方法无状态无状态）</p>
<p>3数据库优化，数据库索引哪种情况需要建立 索引失效  mysql日志 执行过程</p>
<p>4redis 要注意key不能过大</p>
<p>5线程池 参数</p>
<p>6oom 栈溢出，堆溢出，常量池溢出 </p>
<h3 id="阿里文娱-实习一面-3-12-50nin"><a href="#阿里文娱-实习一面-3-12-50nin" class="headerlink" title="阿里文娱 实习一面 3.12 50nin"></a>阿里文娱 实习一面 3.12 50nin</h3><p>自我介绍<br>spring 是否看过源码</p>
<p>Bean生命周期<br>项目中一个难点<br>jdk看过源码 ​树在Java的应用 红黑树 b树b+树区别 使用场景</p>
<p>协程与线程的关系<br>设计一个上亿用户的登录模块<br>设计一个单点登录<br>排查后端性能思路<br>小组协同开发，编码规则<br>pb级集群日志里找重复行</p>
<p>编程邮件</p>
<h4 id="蘑菇街-金融风控部门-实习一面-3-13-40min"><a href="#蘑菇街-金融风控部门-实习一面-3-13-40min" class="headerlink" title="蘑菇街 金融风控部门 实习一面 3.13 40min"></a>蘑菇街 金融风控部门 实习一面 3.13 40min</h4><p>项目经历</p>
<p>订单管理，订单快照实现                </p>
<p>为什么使用ES</p>
<p>Activity 工作流 模板、嵌入、离开</p>
<p>工作分配换人 怎么实现</p>
<p>面向对象</p>
<p>注解怎么自己实现？都有哪些注解</p>
<p>Threadlocal</p>
<p>Start方法与run方法，start方法底层实现</p>
<p>Java线程状态 new、running、waitting、time-waitting、阻塞、终结</p>
<p>反射的一些方法</p>
<p>Spring </p>
<p>两种反射 区别 接口 cglib    </p>
<p>Mybatis # $区别</p>
<p>SQL注入有哪些？可以怎么防范？从哪一层可以进行实现</p>
<p>Limit 参数使用</p>
<p>索引什么时候失效</p>
<p>左连接 右连接</p>
<p>腾讯 电脑管家深圳 简历面 3.16 20min</p>
<p>项目中ES、MySQL、redis的使用关系</p>
<p>保证redis一致性</p>
<p>为什么使用srio，与spring security的区别</p>
<p>处理大量读写请求</p>
<p>处理大量写请求</p>
<p>TF-IDF算法</p>
<h3 id="阿里-企业智能事业部-3-16-20min"><a href="#阿里-企业智能事业部-3-16-20min" class="headerlink" title="阿里 企业智能事业部 3.16 20min"></a>阿里 企业智能事业部 3.16 20min</h3><p>项目的一个技术难点</p>
<p>cookie session     </p>
<p>http tcp</p>
<p>Tcp拥塞</p>
<p>浏览器发送cookie流程</p>
<p>如何保证cookie安全</p>
<p>面向对象、解释其三个特点</p>
<p>数据结构快排、插入、堆排序</p>
<p>核心平台</p>
<h3 id="人人车-核心平台-3-24-35min"><a href="#人人车-核心平台-3-24-35min" class="headerlink" title="人人车 核心平台 3.24 35min"></a>人人车 核心平台 3.24 35min</h3><p>类加载机制</p>
<p>JVM数据区域</p>
<p>各个回收器</p>
<p>确定回收对象</p>
<p>MySQL存储引擎</p>
<p>Innodb mylsam分别哪种场景使用</p>
<p>建索引需要注意</p>
<p>索引失效的情况，explan</p>
<p>Java封装继承多态</p>
<p>怎么实现多继承</p>
<p>Java各种基本类型</p>
<p>自动拆箱、装箱</p>
<p>String为什么不可变类，为何这样设计</p>
<p>Java里的数据结构</p>
<p>怎么理解线程安全</p>
<p>实现线程几种方式</p>
<p>Runable 与 callable区别</p>
<p>Spring IOC与Spring AOP</p>
<p>动态代理</p>
<p>Spring bean 单例、多例</p>
<h3 id="作业帮-一面-3-25-50min"><a href="#作业帮-一面-3-25-50min" class="headerlink" title="作业帮 一面 3.25 50min"></a>作业帮 一面 3.25 50min</h3><p>数组Top k</p>
<p>快排</p>
<p>订单模块流程</p>
<p>购物车怎么实现</p>
<p>Redis 秒杀 watch 事务</p>
<p>知识图谱</p>
<p>短文本相似度计算</p>
<h3 id="作业帮-二面-3-27-50min"><a href="#作业帮-二面-3-27-50min" class="headerlink" title="作业帮 二面 3.27 50min"></a>作业帮 二面 3.27 50min</h3><p>订单流程</p>
<p>减库存与生成订单顺序</p>
<p>elasticSearch </p>
<p>MySQL与ES的同步</p>
<p>ES快20%是怎么得到的</p>
<p>TF-IDF详细步骤</p>
<p>192.168.255.255\28 有多少个IP</p>
<p>自己显示器坏了，怎么得到IP</p>
<p>1 2 3 4 5 1 2 3的页面序号访问，内存中有4页大小的空间，LRU替换策略，最后内存里面保留的是哪几页内容</p>
<p>消费端1s消费一个指令，但60s最多消化10个，怎么实现？</p>
<p>编程：A-Z AA-ZZ 一个整数对应列号</p>
<p>还了解哪些相似度计算算法</p>
<h3 id="腾讯-后台-小程序-3-30-100min"><a href="#腾讯-后台-小程序-3-30-100min" class="headerlink" title="腾讯 后台 小程序 3.30 100min"></a>腾讯 后台 小程序 3.30 100min</h3><p>商品库存存在哪</p>
<p>redis存哪些数据、如何解决库存问题</p>
<p>请求读多写少，如何设计？（分布式锁、手动过期、本地缓存）</p>
<p>在后台使用一个异步线程的时候，如何确保不同的服务只建立、运行一个线程，而不是多个线程呢？</p>
<p>Redis 本地缓存 MySQL的关系</p>
<p>不硬件扩容的基础上，如何提高redis性能</p>
<p>Redis RDB，AOF以及项目中怎么用</p>
<p>Redis集群的配置情况</p>
<p>Redis 分片节点如何操作</p>
<p>Reids 主从同步、新master选取</p>
<p>ES的使用情况（项目中如何使用、使用版本、单机or集群）</p>
<p>ES全文检索的底层原理</p>
<p>一个商品的不同信息是存在一个document中吗？（回答是，说我用的不是全文检索）</p>
<p>MySQL索引方式（b树与hash索引）</p>
<p>B树的应用，Innodb Mysriam存储引擎里索引的具体情况</p>
<p>Tcp接收端一直不处理收到的字节，会发生什么情况？（回答缓存、窗口，又问这些时间长会过期吗？）</p>
<p>服务端发送数据发给客户端后，数据经过了几次复制（用户态到内核态）</p>
<p>Tcp协议之上的有哪些协议</p>
<p>HTTP与HTTPS区别与两者端口</p>
<p>HTTPS过程</p>
<p>中间人攻击是什么？https如何解决中间人攻击？</p>
<p>原来使用http协议，后来升级为https，如何确保使用http时仍能访问到站点（307）</p>
<p>10个线程，每个加100，结果与1000的关系，如何解决？如何不适用代码块加锁（synchronized）的方式解决?</p>
<p>进程与线程有什么区别？</p>
<p>如何控制一个进程独占一个文件？</p>
<h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>编程：</p>
<p>1、有序链表去重</p>
<p>\2. 给定一个数组，有正数，负数，求和最大的连续子序列（动态规划，三种情况）</p>
<p>腾讯 后台 小程序 二面 3.31 80min</p>
<p>Java运行时数据区域</p>
<p>方法区放的有什么数据</p>
<p>类加载机制</p>
<p>加载、双亲委派</p>
<p>静态变量什么时候初始化</p>
<p>解析过程</p>
<p>Java里的锁，synchronized的锁实现</p>
<p>Synchronized锁升级</p>
<p>Mysql索引的方式，除了hash B树还能有什么</p>
<p>介绍不同的存储引擎</p>
<p>B+树为什么比B树快</p>
<p>树索引的缺点</p>
<p>Redo undo</p>
<p>接收窗口（和一面类似）</p>
<p>Tcp拥塞控制</p>
<p>四次挥手 二三次之间、2msl 最大报文时间</p>
<p>Socket编程？</p>
<p>虚拟内存、段、页</p>
<p>Spring IOC，AOP的实现方式</p>
<p>Spring用到的设计模式</p>
<p>Redis主从同步</p>
<p>编程：删除倒数第n个节点</p>
<p>系统设计：实时输出最近一个小时内访问频率最高的10个IP，要求：</p>
<p>1、实时输出</p>
<p>2、从当前时间向前数的1个小时</p>
<p>3、QPS可能会达到10W/s</p>
<h3 id="广联达-大数据部门-一面-30min"><a href="#广联达-大数据部门-一面-30min" class="headerlink" title="广联达 大数据部门 一面 30min"></a>广联达 大数据部门 一面 30min</h3><p>项目中是怎么做的Mysql优化</p>
<p>Explain filesort？</p>
<p>解释Spring IOC 与 AOP</p>
<p>Spring 有哪些注入方式</p>
<p>Spring mvc 怎么做事务？</p>
<p>MySQL事务特点、隔离级别</p>
<p>MySQL锁，ABA问题</p>
<p>MySQL索引 具体细节</p>
<p>http 常用方法</p>
<p>https</p>
<p>重载与重写</p>
<p>String 为什么是不可变？优点是什么？</p>
<p>Stringbuilder 与 stringbuffer区别</p>
<p>Hashcode</p>
<h3 id="腾讯-后台-3面-4-1-50min"><a href="#腾讯-后台-3面-4-1-50min" class="headerlink" title="腾讯 后台 3面 4.1 50min"></a>腾讯 后台 3面 4.1 50min</h3><p>项目中怎么用到的事务</p>
<p>Redis怎么存数据</p>
<p>Es在项目中怎么用？与MySQL的区别在哪里？</p>
<p>上次未回答出来的统计IP</p>
<p>100亿个数，找出中位数，4G内存</p>
<h3 id="3-输入两棵二叉树A，B，判断B是不是A的子结构。"><a href="#3-输入两棵二叉树A，B，判断B是不是A的子结构。" class="headerlink" title="\3******输入两棵二叉树A，B，判断B是不是A的子结构。****"></a><strong><em>\</em>3*****</strong>*输入两棵二叉树A，B，判断B是不是A的子结构。****</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">递归调用，</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">HasSubtree</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root1 == <span class="keyword">null</span> || root2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> judgeSubTree(root1, root2) ||</span><br><span class="line">               judgeSubTree(root1.left, root2) ||</span><br><span class="line">               judgeSubTree(root1.right, root2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judgeSubTree</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root1.val != root2.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> judgeSubTree(root1.left, root2) ||</span><br><span class="line">                   judgeSubTree(root1.right, root2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> judgeSubTree(root1.left, root2.left) &amp;&amp;</span><br><span class="line">               judgeSubTree(root1.right, root2.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="操作给定的二叉树，将其变换为源二叉树的镜像。"><a href="#操作给定的二叉树，将其变换为源二叉树的镜像。" class="headerlink" title="操作给定的二叉树，将其变换为源二叉树的镜像。"></a>操作给定的二叉树，将其变换为源二叉树的镜像。</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">递归方案：交换左右子树的节点，然后递归调用该方法。</span><br><span class="line">非递归：压入栈进行操作</span><br><span class="line"><span class="number">6</span>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>是某栈的压入顺序，序列<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>是该压栈序列对应的一个弹出序列，但<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</span><br><span class="line">新建一个栈，将数组A压入栈中，当栈顶元素等于数组B时，就将其出栈，当循环结束时，判断栈是否为空，若为空则返回<span class="keyword">true</span>.</span><br></pre></td></tr></table></figure>





<h3 id="输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径"><a href="#输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径" class="headerlink" title="输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径"></a>输入一颗二叉树的根节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)</span><br><span class="line">递归做法</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindPath(TreeNode root,<span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span> result;</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        target -= root.val;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> &amp;&amp; root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)</span><br><span class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</span><br><span class="line"><span class="comment">//因为在每一次的递归中，我们使用的是相同的result引用，所以其实左右子树递归得到的结果我们不需要关心，</span></span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result1 = FindPath(root.left, target);</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result2 = FindPath(root.right, target);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="17二叉树深度"><a href="#17二叉树深度" class="headerlink" title="\17二叉树深度**"></a><strong><em>\</em>17二叉树深度**</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;<span class="comment">//递归</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left=TreeDepth(root.left);</span><br><span class="line">    <span class="keyword">int</span> right=TreeDepth(root.right);</span><br><span class="line">    <span class="keyword">return</span> Math.max(left,right)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">非递归</span><br></pre></td></tr></table></figure>



<h3 id="36-赛车问题"><a href="#36-赛车问题" class="headerlink" title="\36 赛车问题**"></a><strong><em>\</em>36 赛车问题**</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">你的赛车起始停留在位置 <span class="number">0</span>，速度为 +<span class="number">1</span>，正行驶在一个无限长的数轴上。（车也可以向负数方向行驶。）</span><br><span class="line">你的车会根据一系列由 A（加速）和 R（倒车）组成的指令进行自动驾驶 。</span><br><span class="line">当车得到指令 <span class="string">"A"</span> 时, 将会做出以下操作： position += speed, speed *= <span class="number">2</span>。</span><br><span class="line">当车得到指令 <span class="string">"R"</span> 时, 将会做出以下操作：如果当前速度是正数，则将车速调整为 speed = -<span class="number">1</span> ；否则将车速调整为 speed = <span class="number">1</span>。  (当前所处位置不变。)</span><br><span class="line">例如，当得到一系列指令 <span class="string">"AAR"</span> 后, 你的车将会走过位置 <span class="number">0</span>-&gt;<span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">3</span>，并且速度变化为 <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">4</span>-&gt;-<span class="number">1</span>。</span><br><span class="line">现在给定一个目标位置，请给出能够到达目标位置的最短指令列表的长度。</span><br><span class="line">使用一个一维数组dp，dp[i]代表走到位置i处所需要的最小步数。因为先向前走forword步再向后走back步与先向后走back步再向前走forword步最后到达的位置相同，所以可以假设永远保持第一步是向前走的。第一步有三种情况：</span><br><span class="line">第一种是刚好走forword步后到达了目标位置i，则dp[i] = forword。</span><br><span class="line">第二种情况是向前走forword步后到达了位置i后面，这时需要再往回走，再加上回头的那一步，此时dp[i] = Math.min(dp[i], forword + <span class="number">1</span> + dp[j - i]);（注意这里的上限是走到<span class="number">2</span> * i处）</span><br><span class="line">第三种情况是向前走forword步后未到达位置i处就需要返回，此时在保证返回的步数back &lt; forword的条件下遍历back，此时dp[i] = Math.min(dp[i], forword + <span class="number">1</span> + back + <span class="number">1</span> + dp[i - j + k])。</span><br><span class="line">得到转移方程后递归i，最后dp[target]即为所求值。</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">racecar</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= target; i++)&#123;</span><br><span class="line">            dp[i] = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> forword = <span class="number">1</span>;(<span class="number">1</span> &lt;&lt; forword) - <span class="number">1</span> &lt; <span class="number">2</span> * i; forword++) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = (<span class="number">1</span> &lt;&lt; forword) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(j == i) </span><br><span class="line">                    dp[i] = forword;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; i)</span><br><span class="line">                    dp[i] = Math.min(dp[i], forword + <span class="number">1</span> + dp[j - i]);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> back = <span class="number">0</span>; back &lt; forword; back++) &#123;</span><br><span class="line">                        <span class="keyword">int</span> k = (<span class="number">1</span> &lt;&lt; back) - <span class="number">1</span>;</span><br><span class="line">                        dp[i] =Math.min(dp[i], forword + <span class="number">1</span> + back + <span class="number">1</span> + dp[i - j + k]);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="42回溯法寻找二维数组中字符串"><a href="#42回溯法寻找二维数组中字符串" class="headerlink" title="\42回溯法寻找二维数组中字符串**"></a><strong><em>\</em>42回溯法寻找二维数组中字符串**</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">char</span>[] matrix, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">char</span>[] str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//标志位，初始化为false</span></span><br><span class="line">        <span class="keyword">boolean</span>[] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[matrix.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</span><br><span class="line">                 <span class="comment">//循环遍历二维数组，找到起点等于str第一个元素的值，再递归判断四周是否有符合条件的----回溯法</span></span><br><span class="line">                 <span class="keyword">if</span>(judge(matrix,i,j,rows,cols,flag,str,<span class="number">0</span>))&#123;</span><br><span class="line">                     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">//judge(初始矩阵，索引行坐标i，索引纵坐标j，矩阵行数，矩阵列数，待判断的字符串，字符串索引初始为0即先判断字符串的第一位)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span>[] matrix,<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> rows,<span class="keyword">int</span> cols,<span class="keyword">boolean</span>[] flag,<span class="keyword">char</span>[] str,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="comment">//先根据i和j计算匹配的第一个元素转为一维数组的位置</span></span><br><span class="line">        <span class="keyword">int</span> index = i*cols+j;</span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || j&lt;<span class="number">0</span> || i&gt;=rows || j&gt;=cols || matrix[index] != str[k] || flag[index] == <span class="keyword">true</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//若k已经到达str末尾了，说明之前的都已经匹配成功了，直接返回true即可</span></span><br><span class="line">        <span class="keyword">if</span>(k == str.length-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//要走的第一个位置置为true，表示已经走过了</span></span><br><span class="line">        flag[index] = <span class="keyword">true</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//回溯，递归寻找，每次找到了就给k加一，找不到，还原</span></span><br><span class="line">        <span class="keyword">if</span>(judge(matrix,i-<span class="number">1</span>,j,rows,cols,flag,str,k+<span class="number">1</span>) ||</span><br><span class="line">           judge(matrix,i+<span class="number">1</span>,j,rows,cols,flag,str,k+<span class="number">1</span>) ||</span><br><span class="line">           judge(matrix,i,j-<span class="number">1</span>,rows,cols,flag,str,k+<span class="number">1</span>) ||</span><br><span class="line">           judge(matrix,i,j+<span class="number">1</span>,rows,cols,flag,str,k+<span class="number">1</span>)  )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//走到这，说明这一条路不通，还原，再试其他的路径</span></span><br><span class="line">        flag[index] = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="48会场分配问题"><a href="#48会场分配问题" class="headerlink" title="\48会场分配问题**"></a><strong><em>\</em>48会场分配问题**</strong></h3><p>贪心算法，第一问题求出一个会场最大容纳数，每次贪心，选择可以进行的最早结束的会议当做下一次的选择</p>
<p>第二问题，最少需要多少会场，将开始时间和结束时间分别排序然后每次开始时间小于结束时间会场加一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (a[i]&lt;b[j])&#123;</span><br><span class="line">               count++;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               j++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>



<h3 id="49区间合并问题"><a href="#49区间合并问题" class="headerlink" title="\49区间合并问题**"></a><strong><em>\</em>49区间合并问题**</strong></h3><p>对1，3  2，5  6，7 三个区间进行合并</p>
<p>Arrays.sort(intervals, (a, b) -&gt; a[0] - b[0]);</p>
<p>首先使用指定排序，根据数组的第一个数据进行排序</p>
<p>使用list对已经合并好的区间进行存储</p>
<p>将list转换为数组res.toArray(new int[0][]);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.length == <span class="number">0</span>) <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][]);</span><br><span class="line">        Arrays.sort(intervals, (a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; intervals.length) &#123;</span><br><span class="line">            <span class="keyword">int</span> left = intervals[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> right = intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; intervals.length - <span class="number">1</span> &amp;&amp; intervals[i + <span class="number">1</span>][<span class="number">0</span>] &lt;= right) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                right = Math.max(right, intervals[i][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left, right&#125;);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="63求数组所有子集"><a href="#63求数组所有子集" class="headerlink" title="### 63求数组所有子集"></a>### 63求数组所有子集</h3><p>采用经典回溯法，核心如下，加入新数字，递归，去掉加入的数字，回溯</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(List&lt;Integer&gt;list, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        lists.add(<span class="keyword">new</span> ArrayList(list));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">            list.add(nums[i]);</span><br><span class="line">            process(list, nums, i+<span class="number">1</span>);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="64组合总和"><a href="#64组合总和" class="headerlink" title="\64组合总和**"></a><strong><em>\</em>64组合总和**</strong></h3><p>题目 数组{2,3,5,7} 求和为7的组合，每个数字可以重复</p>
<p>和上面一样的思路，回溯法，每次加入新数字，递归，最后去除新数字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            lists.add(<span class="keyword">new</span> ArrayList&lt;&gt;(list));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; candidates.length; i++) &#123;</span><br><span class="line">                list.add(candidates[i]);</span><br><span class="line">                <span class="comment">//因为每个数字都可以使用无数次，所以递归还可以从当前元素开始</span></span><br><span class="line">                process( candidates, target - candidates[i], list);</span><br><span class="line">                list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="67旋转数组"><a href="#67旋转数组" class="headerlink" title="\67旋转数组**"></a><strong><em>\</em>67旋转数组**</strong></h3><p>给定一个数组，将数组中的元素向右移动 <strong>k</strong> 个位置，其中 <strong>k</strong> 是非负数。</p>
<p>输入: [1,2,3,4,5,6,7] 和 k = 3</p>
<p>输出: [5,6,7,1,2,3,4]</p>
<p>三次翻转数组解决，第一次7654321，第二次5674321，第三次，5671234</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">swap(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">swap(nums,<span class="number">0</span>,k-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">swap(nums,k,nums.length-<span class="number">1</span>);</span><br></pre></td></tr></table></figure>





<h3 id="68回文链表"><a href="#68回文链表" class="headerlink" title="\68回文链表**"></a><strong><em>\</em>68回文链表**</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode slow = head, fast = head;</span><br><span class="line">        ListNode pre = head, prepre = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pre = slow;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            pre.next = prepre;</span><br><span class="line">            prepre = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pre != <span class="keyword">null</span> &amp;&amp; slow != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pre.val != slow.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="80乘积最大连续子数组"><a href="#80乘积最大连续子数组" class="headerlink" title="\80乘积最大连续子数组**"></a><strong><em>\</em>80乘积最大连续子数组**</strong></h3><p>动态规划，记录当前最大值和最小值，因为最小值负数乘以负数会成为最大值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> min=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> max=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp=max;</span><br><span class="line">            max=Math.max(Math.max(max*nums[i],nums[i]),min*nums[i]);</span><br><span class="line">            min=Math.min(Math.min(temp*nums[i],nums[i]),min*nums[i]);</span><br><span class="line">            result=Math.max(max,result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="81除自身外数组乘积"><a href="#81除自身外数组乘积" class="headerlink" title="\81除自身外数组乘积**"></a><strong><em>\</em>81除自身外数组乘积**</strong></h3><p>结果等于该数前面数字的乘积乘以后面数据的乘积，先循环计算该位置前面数的乘积，再循环计算前面数乘积乘以后面数乘积</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            res[i]=k;</span><br><span class="line">            k=k*nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">         k=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            res[i]=res[i]*k;</span><br><span class="line">            k=k*nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>































]]></content>
      <categories>
        <category>面试整理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式编程思想&Lambda表达式</title>
    <url>/2020/03/22/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3&amp;Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="函数式编程的思想"><a href="#函数式编程的思想" class="headerlink" title="函数式编程的思想"></a>函数式编程的思想</h1><p>在数学中，<strong>函数</strong>就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——<strong>强调做什么，而不是以什么形式做</strong>。</p>
<p>面向对象的思想:</p>
<p>​    做一件事情,找一个能解决这个事情的对象,调用对象的方法,完成事情.</p>
<p>函数式编程思想:</p>
<p>​    只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程</p>
<a id="more"></a>

<h3 id="传统写法"><a href="#传统写法" class="headerlink" title="传统写法"></a>传统写法</h3><p>当需要启动一个线程去完成任务时，通常会通过<code>java.lang.Runnable</code>接口来定义任务内容，并使用<code>java.lang.Thread</code>类来启动该线程。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Runnable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 匿名内部类</span></span><br><span class="line">		Runnable task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 覆盖重写抽象方法</span></span><br><span class="line">				System.out.println(<span class="string">"多线程任务执行！"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">new</span> Thread(task).start(); <span class="comment">// 启动线程</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>对于<code>Runnable</code>的匿名内部类用法，可以分析出几点内容：</p>
<ul>
<li><code>Thread</code>类需要<code>Runnable</code>接口作为参数，其中的抽象<code>run</code>方法是用来指定线程任务内容的核心；</li>
<li>为了指定<code>run</code>的方法体，<strong>不得不</strong>需要<code>Runnable</code>接口的实现类；</li>
<li>为了省去定义一个<code>RunnableImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li>
<li>必须覆盖重写抽象<code>run</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li>
<li>而实际上，<strong>似乎只有方法体才是关键所在</strong>。</li>
</ul>
<h2 id="3-3-编程思想转换"><a href="#3-3-编程思想转换" class="headerlink" title="3.3 编程思想转换"></a>3.3 编程思想转换</h2><h3 id="做什么，而不是怎么做"><a href="#做什么，而不是怎么做" class="headerlink" title="做什么，而不是怎么做"></a>做什么，而不是怎么做</h3><p>我们真的希望创建一个匿名内部类对象吗？不。我们只是为了做这件事情而<strong>不得不</strong>创建一个对象。我们真正希望做的事情是：将<code>run</code>方法体内的代码传递给<code>Thread</code>类知晓。</p>
<p><strong>传递一段代码</strong>——这才是我们真正的目的。而创建对象只是受限于面向对象语法而不得不采取的一种手段方式。那，有没有更加简单的办法？如果我们将关注点从“怎么做”回归到“做什么”的本质上，就会发现只要能够更好地达到目的，过程与形式其实并不重要。</p>
<h2 id="3-4-体验Lambda的更优写法"><a href="#3-4-体验Lambda的更优写法" class="headerlink" title="3.4 体验Lambda的更优写法"></a>3.4 体验Lambda的更优写法</h2><p>借助Java 8的全新语法，上述<code>Runnable</code>接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02LambdaRunnable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"多线程任务执行！"</span>)).start(); <span class="comment">// 启动线程</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码和刚才的执行效果是完全一样的，可以在1.8或更高的编译级别下通过。从代码的语义中可以看出：我们启动了一个线程，而线程任务的内容以一种更加简洁的形式被指定。</p>
<p>不再有“不得不创建接口对象”的束缚，不再有“抽象方法覆盖重写”的负担，就是这么简单！</p>
<h2 id="Lambda表达式的标准格式"><a href="#Lambda表达式的标准格式" class="headerlink" title="Lambda表达式的标准格式"></a>Lambda表达式的标准格式</h2><p>由三部分组成：<br>        a. 一些参数<br>        b. 一个箭头<br>        c. 一段代码</p>
<p>格式 ：<br>        （参数列表） -&gt; {一些重要的方法的代码}</p>
<p>解释说明：  （）表达是接口中抽象方法的参数列表，没有参数就空着，有参数就写出参数，各个参数之间使用逗号分隔，箭头 -&gt; 表示  把参数传递给方法体中()    。。大括号{} 中重写接口的抽象方法的方法体</p>
<h2 id="带有参数和返回值的Lambda表达式"><a href="#带有参数和返回值的Lambda表达式" class="headerlink" title="带有参数和返回值的Lambda表达式"></a>带有参数和返回值的Lambda表达式</h2><p>我们封装一个Person类，Person类中定义姓名和年龄属性，并封装get  set方法</p>
<p>我们进行重写Compartor接口中compare方法来对Person类按照年龄排序。</p>
<p>如果不使用Lambda表达式，我们使用匿名内部类的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> LambdaExpress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaExp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person[] arr = <span class="keyword">new</span> Person[]&#123;</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"小明"</span>,<span class="number">20</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"小华"</span>,<span class="number">18</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"小红"</span>,<span class="number">29</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 按照从小到大进行排序</span></span><br><span class="line"><span class="comment">         * 升序排列 是前面的减去后边的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : arr) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>下面我们使用Lambda表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> LambdaExpress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaExp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person[] arr = <span class="keyword">new</span> Person[]&#123;</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"小明"</span>,<span class="number">20</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"小华"</span>,<span class="number">18</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"小红"</span>,<span class="number">29</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 按照从小到大进行排序</span></span><br><span class="line"><span class="comment">         * 升序排列 是前面的减去后边的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr,(Person o1, Person o2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : arr) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Lambda表达式：是可推到，可以省略。。<br>凡是根据上下文推导出来的内容，都可以省略书写<br>可以省略的内容：</p>
<ol>
<li>（参数列表）：括号中参数列表的数据类型，可以省略不写</li>
<li>（参数列表）：括号中的参数如果只有一个，那么类型和() 都可以省略</li>
<li>（一些代码）：如果{}中的代码只有一行，无论是否有返回值，都可以盛烈（{}，return，分号）    需要注意的是：要省略{} return ，分号必须一起省略</li>
</ol>
<h2 id="Lambda的使用前提"><a href="#Lambda的使用前提" class="headerlink" title="Lambda的使用前提"></a>Lambda的使用前提</h2><p>Lambda的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意：</p>
<ol>
<li>使用Lambda必须具有接口，且要求<strong>接口中有且仅有一个抽象方法</strong>。<br>无论是JDK内置的<code>Runnable</code>、<code>Comparator</code>接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。</li>
<li>使用Lambda必须具有<strong>上下文推断</strong>。<br>也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</li>
</ol>
<blockquote>
<p>备注：有且仅有一个抽象方法的接口，称为“<strong>函数式接口</strong>”。</p>
</blockquote>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>函数式接口在Java中是指：有且仅有一个抽象方法的接口。</p>
<p>函数式接口，即适用于函数式编程场景的接口。。而Java中的函数式编程体现就是Lambda，所以函数式接口就是可以适用于Lambda使用的接口，只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导</p>
]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java学习</tag>
        <tag>Lambda表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程原子操作类AtomicInteger</title>
    <url>/2020/03/21/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%B1%BBAtomicInteger/</url>
    <content><![CDATA[<h1 id="什么是原子操作类AtomicInteger"><a href="#什么是原子操作类AtomicInteger" class="headerlink" title="什么是原子操作类AtomicInteger"></a>什么是原子操作类AtomicInteger</h1><p>我们知道java并发机制中主要有三个特性需要我们去考虑，原子性、可见性和有序性。synchronized关键字可以保证可见性和有序性却无法保证原子性。而这个AtomicInteger的作用就是为了保证原子性。</p>
<p>AtomicInteger，一个提供原子操作的Integer的类。在Java语言中，++i和i++操作并不是线程安全的，在使用的时候，不可避免的会用到synchronized关键字。而AtomicInteger则通过一种线程安全的加减操作接口。</p>
<a id="more"></a>

<p>对于Java中的运算操作，例如自增或自减，若没有进行额外的同步操作，在多线程环境下就是线程不安全的。num++解析为num=num+1，明显，这个操作不具备原子性，多线程并发共享这个变量时必然会出现问题。</p>
<p>下面我们测试一下：</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicintegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                        System.out.println(count++);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>我们定义了是10个线程，每个线程做五次加操作，如果程序正常并发执行的话，结果应该是0–50个数字，中间没有重复数字出现，但是运行结果显然不是，这个时候就出现了多线程的数据安全问题。</p>
<p>分析出现上述安全问题的原因，可能是我们没有对多线程共享的变量进行保证在多线程间的可见性，所以我们可以使用volatile关键字修饰</p>
<h3 id="换成volatile修饰count变量"><a href="#换成volatile修饰count变量" class="headerlink" title="换成volatile修饰count变量"></a>换成volatile修饰count变量</h3><p>顺带说下volatile关键字很重要的两个特性：</p>
<p>1、保证变量在线程间可见，对volatile变量所有的写操作都能立即反应到其他线程中，换句话说，volatile变量在各个线程中是一致的（得益于java内存模型—“先行发生原则”）；</p>
<p>那么换成volatile修饰count变量后，会有什么效果呢？ 试一试:</p>
<p>还是上述的代码，我们对变量count使用volatile关键字进行修饰</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></code></pre><p>输出结果好像还是与预期的不一致，这是为什么呢？并不能得出”基于volatile变量的运算在并发下是安全的”这个结论，，，此时，这个核心点在于在java的运算中，比如count++,++count操作并不是原子性的。</p>
<p>对于count++的操作，其实可以分解为3个步骤。</p>
<p>（1）从主存中读取count的值</p>
<p>（2）对count进行加1操作</p>
<p>（3）把count重新刷新到主存</p>
<p>这三个步骤在单线程中一点问题都没有，但是到了多线程就出现了问题了。比如说有的线程已经把count进行了加1操作，但是还没来得及重新刷入到主存，其他的线程就重新读取了旧值。因为才造成了错误。如何去解决呢？方法当然很多，但是为了和我们今天的主题对应上，很自然的联想到使用AtomicInteger。下面我们使用AtomicInteger重新来测试一遍：</p>
<p>我们对上面的类继续进行改造：</p>
<p>把上面的代码改造成AtomicInteger原子类型，先看看效果</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicintegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//private static  int count = 0;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                        System.out.println(count.incrementAndGet());</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>最后通过运行结果我们发现，输出结果中并没有重复的数字，程序能够在多线程的状况下并发的执行，并能够正确的输出结果，这都归功于AtomicInteger.incrementAndGet()方法的原子性。</p>
<h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>在上面的例子中，我们使用AtomicInteger 中的incrementAndGet 函数来进行自增操作，代替直接使用count++来进行自增，保证了操作的原子性。</p>
<p>AtomicInteger类为我们提供了很多函数。</p>
<p>我们先看一下我们在上面使用的increasementAndGet函数，我们直接直接查看源码</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>在这里我们会看到，底层使用的是unsafe的getAndAddInt方法。这里你可能有一个疑问了，这个unsafe是个什么鬼，而且还有一个valueOffset参数又是什么，想要看明白，我们从源码的开头开始看起。</p>
<p><img src="https://img-blog.csdnimg.cn/20200320160113766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt=""></p>
<p>开头在Unsafe的上面会发现，有一行注释叫做Unsafe.compareAndSwapInt。这又是什么？</p>
<p>（1） compareAndSwapInt的含义</p>
<p>compareAndSwapInt又叫做CAS，CAS 即比较并替换，实现并发算法时常用到的一种技术。CAS操作包含三个操作数——内存位置、预期原值及新值。执行CAS操作的时候，将内存位置的值与预期原值比较，如果相匹配，那么处理器会自动将该位置值更新为新值，否则，处理器不做任何操作。</p>
<p>对于CAS的解释我不准备长篇大论讲解。因为里面涉及到的知识点还是挺多的。在这里你理解了其含义就好。</p>
<p>（2）Unsafe的含义</p>
<p>在上面我们主要是讲解了CAS的含义，CAS修饰在Unsafe上面。那这个Unsafe是什么意思呢？</p>
<p>Unsafe是位于sun.misc包下的一个类，Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。</p>
<p>这里说一句题外话，在jdk1.9中，对Usafe进行了删除，所以因为这，那些基于Usafe开发的框架慢慢的都死掉了。</p>
<p>我们回到上面的源码中，继续进行说明，在这里也就是说，Usafe再进行getAndAddInt的时候，首先是先加1，然后对底层对象的地址做出了更改。这个地址是什么呢？这就是涉及到我们的第三个疑问参数了。</p>
<p>（3）valueOffset的含义</p>
<p>这个valueOffset是long类型的，代表的含义就是对象的地址的偏移量。下面我们重新解释一下这行代码。</p>
<p>unsafe.getAndAddInt(this, valueOffset, 1) + 1。这行代码的含义是，usafe通过getAndAddInt方法，对原先对象的地址进行了加1操作。现在应该明白了。我们return的时候，也是直接返回的最新的值。这一点我们对比另外一个方法incrementAndGet就能看出。</p>
<p><img src="https://img-blog.csdnimg.cn/20200320160712960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt=""></p>
<p>在这个方法的源代码中我们可以看到最后的+1操作没有了，也就是说，直接返回的是旧地址的值，然后再进行自增操作。如何去拿的地址的偏移量呢？是通过下面这个代码。</p>
<p><img src="https://img-blog.csdnimg.cn/2020032016094369.png" alt=""></p>
<p>OK，到了这一步相信你已经知道了，usafe对a的值使用getAndAddInt方法进行了加1操作。然后返回最新的值。</p>
<p>对于AtomicInteger的原理就是这，主要是通过Usafe的方式来完成的。Usafe又是通过CAS机制来实现的，因此想要弄清整个原子系列的真正实现，就是要搞清楚CAS机制。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于jdk1.8的并发包来说，底层基本上就是通过Usafe和CAS机制来实现的。有好处也肯定有一个坏处。从好的方面来讲，就是上面AtomicInteger类可以保持其原子性。但是从坏的方面来看，Usafe因为直接操作的底层地址，肯定不是那么安全，而且CAS机制也伴随着大量的问题，比如说有名的ABA问题等等。</p>
]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程基础</title>
    <url>/2020/03/21/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程是指内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程，进程也是程序的一次执行过程，是系统运行程序的基本单位 ，系统运行一个程序即是一个进程从运行到消亡的过程。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程，一个进行中是可以同时有多个线程的，这个应用程序也可以称为多线程程序。</p>
<a id="more"></a>


<h2 id="创建线程类"><a href="#创建线程类" class="headerlink" title="创建线程类"></a>创建线程类</h2><p>创建多线程程序的第一种方式：创建Thread类的子类</p>
<p>Java使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或其子类的实例。</p>
<p>每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来<strong>创建</strong>并<strong>启动多线程</strong>的</p>
<p>步骤如下：</p>
<ol>
<li><p>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。</p>
</li>
<li><p>创建Thread子类的实例，即创建了线程对象</p>
</li>
<li><p>调用线程对象的start()方法来启动该线程，执行里面的run方法</p>
<p> void  run() 使该线程开始执行，Java虚拟机调用该线程的run方法。</p>
</li>
</ol>
<p>Java程序属于抢占式调度，哪个线程的优先级高，哪个线程优先执行，同一个优先级的，随机选择一个执行。。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"mythread"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       myThread myThread = <span class="keyword">new</span> myThread();</span><br><span class="line">       myThread.start();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           System.out.println(<span class="string">"main"</span>+i);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="创建线程方式二"><a href="#创建线程方式二" class="headerlink" title="创建线程方式二"></a>创建线程方式二</h3><p>采用Runnable 也是非常常见的一种，我们只需要重写run方法即可。</p>
<p>步骤如下：</p>
<ol>
<li>定义Runnable接口的实现类，并重写该接口的run()方法，该run() 方法的方法体同样是该线程的线程执行体。</li>
<li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li>
<li>调用线程对象的start()方法，来启动线程。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"runnable"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       RunnableThread runnableThread = <span class="keyword">new</span> RunnableThread();</span><br><span class="line">       Thread thread = <span class="keyword">new</span> Thread(runnableThread);</span><br><span class="line">       thread.start();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">           System.out.println(<span class="string">"main"</span>+i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>




<p>通过实现Runnable接口，使得该类有了多线程类的特征。run()方法是多线程程序的一个执行目标。所有的多线程 代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。 </p>
<p>在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread 对象的start()方法来运行多线程代码。 </p>
<p>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是继承Thread类还是实现 Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程 编程的基础。</p>
<h4 id="创建线程的两种方式Thread和Runnable的区别"><a href="#创建线程的两种方式Thread和Runnable的区别" class="headerlink" title="创建线程的两种方式Thread和Runnable的区别"></a>创建线程的两种方式Thread和Runnable的区别</h4><p>简单的说，如果一个类继承Thread，则不适合资源共享，但是如果实现了Runnable接口的话，则很容易的实现资源共享。</p>
<p>总结：<br>实现Runnable接口比继承Thread类所具有的优势。</p>
<ol>
<li>适合多个相同的程序代码的线程去共享同一个资源</li>
<li>可以避免Java中的单继承的局限性。</li>
<li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立</li>
<li>线程池只能放入实现Runnable或者是Callable类线程，不能直接放入继承Thread的类</li>
</ol>
<p><strong>扩充：</strong>在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用 java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM其实在就是在操作系统中启动了一个进 程。</p>
<h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><h2 id="线程安全-1"><a href="#线程安全-1" class="headerlink" title="线程安全"></a>线程安全</h2><p>如果有多个线程同时运行，而这些线程可能会同时运行这段代码，如果多个线程同时运行同一段代码时，程序每次运行结果和单线程状态下运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p>
<p>例如在以电影院卖票为例，当多个窗口也就是多个线程同时对一个变量也就是票数进行操作时，如果不控制线程安全，就有可能出现相同的票被卖了两回以及卖出不存在的票等等线程变量异常问题。简单的说，就是当几个窗口之间也就是几个线程之间票数变量不同步了，这种问题称为线程不安全问题。。</p>
<p>注意：</p>
<p>线程安全问题都是由全局变量及静态变量引起的。若每个线程中对全局变量、静态变量只有读操作，而无写 操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步， 否则的话就可能影响线程安全。</p>
<h2 id="线程同步问题"><a href="#线程同步问题" class="headerlink" title="线程同步问题"></a>线程同步问题</h2><p>当我们使用多个线程访问同一资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全问题。</p>
<p>要解决上述中出现的多线程并发访问同一个资源的安全问题,也就是解决重复票与不存在票问题，Java中提供了同步机制  synchronized 来解决。</p>
<p>还以上述卖票的代码为例：</p>
<p>窗口1线程进入操作的时候，窗口2和窗口3线程只能在外等着，窗口1操作结束，窗口1和窗口2和窗口3才有机会进入代码 去执行。也就是说在某个线程修改共享资源的时候，其他线程不能修改该资源，等待修改完毕同步之后，才能去抢夺CPU 资源，完成对应的操作，保证了数据的同步性，解决了线程不安全的现象。</p>
<h3 id="有三种方法解决线程安全问题"><a href="#有三种方法解决线程安全问题" class="headerlink" title="有三种方法解决线程安全问题"></a>有三种方法解决线程安全问题</h3><ol>
<li>同步代码块</li>
<li>同步方法</li>
<li>锁机制</li>
</ol>
<h2 id="第一种同步方法：同步代码块"><a href="#第一种同步方法：同步代码块" class="headerlink" title="第一种同步方法：同步代码块"></a>第一种同步方法：同步代码块</h2><p>同步代码块： 使用synchronized 关键字用于方法中需要进行同步的某个区块中，表示只对这个区块的资源实行互斥访问。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>（同步锁）&#123;</span><br><span class="line">需要同步的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同步锁: 对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁. </p>
<ol>
<li>锁对象 可以是任意类型。 </li>
<li>多个线程对象 要使用同一把锁。</li>
</ol>
<p>注意:在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着 (BLOCKED)</p>
<p>例如卖票的例子使用同步锁实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">saleTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">100</span>;</span><br><span class="line">    Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (number &gt;<span class="number">0</span> ) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖"</span> + number + <span class="string">"张票"</span>);</span><br><span class="line">                    number--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="第二种同步方法：同步方法"><a href="#第二种同步方法：同步方法" class="headerlink" title="第二种同步方法：同步方法"></a>第二种同步方法：同步方法</h2><p>同步方法：使用synchronized修饰的方法，就叫做同步方法，使用synchronized修饰的方法，当多个线程同时执行时，可以保证线程A执行该方法的时候，其他线程只能在方法外面等着。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">	可能会产生线程安全问题的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在同步方法中的同步锁是：对于非static方法，同步锁就是this，对于static方法，我们使用当前方法所在类的字节码对象（类名.class）作为同步锁。</p>
<h2 id="第三种同步方法：Lock锁"><a href="#第三种同步方法：Lock锁" class="headerlink" title="第三种同步方法：Lock锁"></a>第三种同步方法：Lock锁</h2><p>在Java的机制中，提供了比synchronized代码块同步，和synchronized方法更广泛的锁定操作，同步代码块/同步方法具有的功能，Lock都有，初次之外Lock还有它特有的功能，使用Lock进行同步，更能体现面向对象的思想。</p>
<p>Lock锁也称为同步锁，加锁与释放锁方法化了，具体的方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span>  :加同步锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span>  :释放同步锁</span></span><br></pre></td></tr></table></figure>


<p>以卖票为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">saleTirckLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现卖票同步的方法  Lock锁机制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"当前卖的是："</span>+ticket+<span class="string">"张票"</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程-CyclicBarrier</title>
    <url>/2020/03/21/%E5%A4%9A%E7%BA%BF%E7%A8%8B-CyclicBarrier%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="CyclicBarrier-是什么"><a href="#CyclicBarrier-是什么" class="headerlink" title="CyclicBarrier 是什么"></a>CyclicBarrier 是什么</h2><p>现实生活中我们经常会遇到这样的情景，在进行某个活动前需要等待人全部都齐了才开始。例如吃饭时要等全家人都上座了才动筷子，旅游时要等全部人都到齐了才出发，比赛时要等运动员都上场后才开始。</p>
<p>在JUC包中为我们提供了一个同步工具类能够很好的模拟这类场景，它就是CyclicBarrier类。利用CyclicBarrier类可以实现一组线程相互等待，当所有线程都到达某个屏障点后再进行后续的操作</p>
<a id="more"></a>

<p>CyclicBarrier字面意思是可循环（Cyclic）的屏障（Barrier）。它主要做的事情是，让一组线程达到一个屏障（也可以叫同步点或者栏栅）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过CyclicBarrier的await方法。</p>
<p>我们看一下CyclicBarrier与CountDownLatch的直观区别就是：<br>        CountDownLatch说白了是做减法，减到0时，被阻塞的线程被唤醒；</p>
<pre><code>CyclicBarrier说白了是做加法，加到固定值时，被阻塞的线程被唤醒；</code></pre><p>CyclicBarrier 相比 CountDownLatch 来说，要简单很多，其源码没有什么高深的地方，它是 ReentrantLock 和 Condition 的组合使用。</p>
<p>首先，CyclicBarrier 的源码实现和 CountDownLatch 大相径庭，CountDownLatch 基于 AQS 的共享模式的使用，而 CyclicBarrier 基于 Condition 来实现的。因为 CyclicBarrier 的源码相对来说简单许多，读者只要熟悉了关于 Condition 的分析，那么这里的源码是毫无压力的，就是几个特殊概念罢了。</p>
<p>在CyclicBarrier类的内部有一个计数器，每个线程在到达屏障点的时候都会调用await方法将自己阻塞，此时计数器会减1，当计数器减为0的时候所有因调用await方法而被阻塞的线程将被唤醒。这就是实现一组线程相互等待的原理，下面我们先看看CyclicBarrier有哪些成员变量</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="comment">//同步操作锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">//线程拦截器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition trip = lock.newCondition();</span><br><span class="line"><span class="comment">//每次拦截的线程数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parties;</span><br><span class="line"><span class="comment">//换代前执行的任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable barrierCommand;</span><br><span class="line"><span class="comment">//表示栅栏的当前代</span></span><br><span class="line"><span class="keyword">private</span> Generation generation = <span class="keyword">new</span> Generation();</span><br><span class="line"><span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//静态内部类Generation</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> broken = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>上面贴出了CyclicBarrier所有的成员变量，可以看到CyclicBarrier内部是通过条件队列trip来对线程进行阻塞的，并且其内部维护了两个int型的变量parties和count，parties表示每次拦截的线程数，该值在构造时进行赋值。count是内部计数器，它的初始值和parties相同，以后随着每次await方法的调用而减1，直到减为0就将所有线程唤醒。CyclicBarrier有一个静态内部类Generation，该类的对象代表栅栏的当前代，就像玩游戏时代表的本局游戏，利用它可以实现循环等待。barrierCommand表示换代前执行的任务，当count减为0时表示本局游戏结束，需要转到下一局。在转到下一局游戏之前会将所有阻塞的线程唤醒，在唤醒所有线程之前你可以通过指定barrierCommand来执行自己的任务。</p>
<p>接下来我们看看它的构造器。</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="comment">//构造器1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parties &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">this</span>.parties = parties;</span><br><span class="line">    <span class="keyword">this</span>.count = parties;</span><br><span class="line">    <span class="keyword">this</span>.barrierCommand = barrierAction;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//构造器2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(parties, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>CyclicBarrier有两个构造器，其中构造器1是它的核心构造器，在这里你可以指定本局游戏的参与者数量(要拦截的线程数)以及本局结束时要执行的任务，还可以看到计数器count的初始值被设置为parties。CyclicBarrier类最主要的功能就是使先到达屏障点的线程阻塞并等待后面的线程，其中它提供了两种等待的方法，分别是定时等待和非定时等待。</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="comment">//非定时等待</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dowait(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TimeoutException toe) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(toe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//定时等待</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException, TimeoutException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dowait(<span class="keyword">true</span>, unit.toNanos(timeout));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>可以看到不管是定时等待还是非定时等待，它们都调用了dowait方法，只不过是传入的参数不同而已。下面我们就来看看dowait方法都做了些什么。</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">//核心等待方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dowait</span><span class="params">(<span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException, TimeoutException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Generation g = generation;</span><br><span class="line">        <span class="comment">//检查当前栅栏是否被打翻</span></span><br><span class="line">        <span class="keyword">if</span> (g.broken) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BrokenBarrierException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查当前线程是否被中断</span></span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            <span class="comment">//如果当前线程被中断会做以下三件事</span></span><br><span class="line">            <span class="comment">//1.打翻当前栅栏</span></span><br><span class="line">            <span class="comment">//2.唤醒拦截的所有线程</span></span><br><span class="line">            <span class="comment">//3.抛出中断异常</span></span><br><span class="line">            breakBarrier();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//每次都将计数器的值减1</span></span><br><span class="line">        <span class="keyword">int</span> index = --count;</span><br><span class="line">        <span class="comment">//计数器的值减为0则需唤醒所有线程并转换到下一代</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> ranAction = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//唤醒所有线程前先执行指定的任务</span></span><br><span class="line">                <span class="keyword">final</span> Runnable command = barrierCommand;</span><br><span class="line">                <span class="keyword">if</span> (command != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    command.run();</span><br><span class="line">                &#125;</span><br><span class="line">                ranAction = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">//唤醒所有线程并转到下一代</span></span><br><span class="line">                nextGeneration();</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//确保在任务未成功执行时能将所有线程唤醒</span></span><br><span class="line">                <span class="keyword">if</span> (!ranAction) &#123;</span><br><span class="line">                    breakBarrier();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	</span><br><span class="line">        <span class="comment">//如果计数器不为0则执行此循环</span></span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//根据传入的参数来决定是定时等待还是非定时等待</span></span><br><span class="line">                <span class="keyword">if</span> (!timed) &#123;</span><br><span class="line">                    trip.await();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nanos &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">                    nanos = trip.awaitNanos(nanos);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                <span class="comment">//若当前线程在等待期间被中断则打翻栅栏唤醒其他线程</span></span><br><span class="line">                <span class="keyword">if</span> (g == generation &amp;&amp; !g.broken) &#123;</span><br><span class="line">                    breakBarrier();</span><br><span class="line">                    <span class="keyword">throw</span> ie;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//若在捕获中断异常前已经完成在栅栏上的等待, 则直接调用中断操作</span></span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果线程因为打翻栅栏操作而被唤醒则抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (g.broken) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BrokenBarrierException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果线程因为换代操作而被唤醒则返回计数器的值</span></span><br><span class="line">            <span class="keyword">if</span> (g != generation) &#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果线程因为时间到了而被唤醒则打翻栅栏并抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                breakBarrier();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>可以看到在dowait方法中每次都将count减1，减完后立马进行判断看看是否等于0，如果等于0的话就会先去执行之前指定好的任务，执行完之后再调用nextGeneration方法将栅栏转到下一代，在该方法中会将所有线程唤醒，将计数器的值重新设为parties，最后会重新设置栅栏代次，在执行完nextGeneration方法之后就意味着游戏进入下一局。如果计数器此时还不等于0的话就进入for循环，根据参数来决定是调用trip.awaitNanos(nanos)还是trip.await()方法，这两方法对应着定时和非定时等待。如果在等待过程中当前线程被中断就会执行breakBarrier方法，该方法叫做打破栅栏，意味着游戏在中途被掐断，设置generation的broken状态为true并唤醒所有线程。同时这也说明在等待过程中有一个线程被中断整盘游戏就结束，所有之前被阻塞的线程都会被唤醒。线程醒来后会执行下面三个判断，看看是否因为调用breakBarrier方法而被唤醒，如果是则抛出异常；看看是否是正常的换代操作而被唤醒，如果是则返回计数器的值；看看是否因为超时而被唤醒，如果是的话就调用breakBarrier打破栅栏并抛出异常。这里还需要注意的是，如果其中有一个线程因为等待超时而退出，那么整盘游戏也会结束，其他线程都会被唤醒。下面贴出nextGeneration方法和breakBarrier方法的具体代码。</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="comment">//切换栅栏到下一代</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">nextGeneration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//唤醒条件队列所有线程</span></span><br><span class="line">    trip.signalAll();</span><br><span class="line">    <span class="comment">//设置计数器的值为需要拦截的线程数</span></span><br><span class="line">    count = parties;</span><br><span class="line">    <span class="comment">//重新设置栅栏代次</span></span><br><span class="line">    generation = <span class="keyword">new</span> Generation();</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//打翻当前栅栏</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">breakBarrier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将当前栅栏状态设置为打翻</span></span><br><span class="line">    generation.broken = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//设置计数器的值为需要拦截的线程数</span></span><br><span class="line">    count = parties;</span><br><span class="line">    <span class="comment">//唤醒所有线程</span></span><br><span class="line">    trip.signalAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p> 最后，我们来看看怎么重置一个栅栏：</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        breakBarrier();   <span class="comment">// break the current generation</span></span><br><span class="line">        nextGeneration(); <span class="comment">// start a new generation</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>我们设想一下，如果初始化时，指定了线程 parties = 4，前面有 3 个线程调用了 await 等待，在第 4 个线程调用 await 之前，我们调用 reset 方法，那么会发生什么？</p>
<p>首先，打破栅栏，那意味着所有等待的线程（3个等待的线程）会唤醒，await 方法会通过抛出 BrokenBarrierException 异常返回。然后开启新的一代，重置了 count 和 generation，相当于一切归零了。</p>
<h3 id="通过一个例子来看一下CyclicBarries"><a href="#通过一个例子来看一下CyclicBarries" class="headerlink" title="通过一个例子来看一下CyclicBarries"></a>通过一个例子来看一下CyclicBarries</h3><p>LeetCode上面有一道交替打印字符串的案例，我们可以使用多线程并发包中的  CyclicBarrier类来进行实现同步控制</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		编写一个可以从 1 到 n 输出代表这个数字的字符串的程序，但是：</span><br><span class="line">		</span><br><span class="line">		如果这个数字可以被 3 整除，输出 &quot;fizz&quot;。</span><br><span class="line">		如果这个数字可以被 5 整除，输出 &quot;buzz&quot;。</span><br><span class="line">		如果这个数字可以同时被 3 和 5 整除，输出 &quot;fizzbuzz&quot;。</span><br><span class="line">		例如，当 n = 15，输出： 1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FizzBuzz2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FizzBuzz2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printFizz.run() outputs "fizz".</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fizz</span><span class="params">(Runnable printFizz)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                printFizz.run();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                barrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printBuzz.run() outputs "buzz".</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buzz</span><span class="params">(Runnable printBuzz)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> != <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                printBuzz.run();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                barrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printFizzBuzz.run() outputs "fizzbuzz".</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fizzbuzz</span><span class="params">(Runnable printFizzBuzz)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                printFizzBuzz.run();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                barrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printNumber.accept(x) outputs "x", where x is an integer.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">number</span><span class="params">(IntConsumer printNumber)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> != <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                printNumber.accept(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                barrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>设立static（静态唯一)的CyclicBarrier   等待其他线程都一起触发之后，才进行下一步操作。</p>
]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2020/03/20/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E5%86%92%E6%B3%A1%E4%B8%8E%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="排序算法总结"><a href="#排序算法总结" class="headerlink" title="排序算法总结"></a>排序算法总结</h1><p>冒泡排序与选择排序算法</p>
<a id="more"></a>



<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>选择排序是一种简单直观的排序算法。<br>选择排序的基本步骤是：</p>
<p>首先，第一次从一个数组中选取最小值，与数组的第一个值arr[0]交换，，第二次从剩余的数组中选取最小值，与数组的第二个值交换，…..依次类推，重复以上步骤，总共是通过n-1次，这样就得到一个按排序码从小到大排列的有序序列。</p>
<p>说明：<br> 选择排序一共有数组大小-1次的排序<br>每一轮的排序，又是一个循环，循环的规则代码<br>先假定当前的这个数是最小的，然后和后面的数依次比较，如果发现有比当前数更小的数，就重新确定最小数，并得到下标。<br>当遍历到数组的最后时，就得到本轮最小数和下标</p>
<p>Java 代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 选择排序方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">       <span class="keyword">int</span> minIndex;</span><br><span class="line">       <span class="keyword">int</span> min;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">           minIndex = i;</span><br><span class="line">           min = arr[i];</span><br><span class="line">	</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j= i+<span class="number">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">               <span class="keyword">if</span> (min &gt; arr[j])&#123;</span><br><span class="line">                   min = arr[j];</span><br><span class="line">                   minIndex = j;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//找出最小值之后，交换位置</span></span><br><span class="line">           <span class="keyword">if</span> (minIndex != i)&#123;</span><br><span class="line">               arr[minIndex] = arr[i];</span><br><span class="line">               arr[i] = min;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>上述代码的执行顺序</p>
<p>首先是定义指向最小值的下标，以及最小值的变量，因为要经过n-1次的过程。</p>
<p>首先初始化最小值为第一个数组，最小值下标为0。在每一次中，把最小值和每一个元素进行比较，如果较小就更新最小值，并更新最小值的下标。在每一次的比较结束，进行位置交换。上述的n-1次按照这种方式依次进行比较。</p>
<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序的基本思想是：通过对待排序序列从前向后遍历（从下标较小的元素开始），依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就像水底下的气泡一样，逐渐向上冒。。</p>
<p>因为在排序的过程中，各个元素不断的被移动到接近自己的位置 ，如果一趟比较下来，没有元素进行过交换，那就说明序列有序，因此在冒泡排序的过程中需要设置一个标志 flag 判断元素是否进行过交换，从而减少不必要的比较。</p>
<p>Java实现冒泡排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maopaoSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> temp= <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;  <span class="comment">//定义一个标志变量，来表示是否发生过交换，如果一趟比较发生过交换，则置为true</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">              <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                  flag = <span class="keyword">true</span>;</span><br><span class="line">                  temp = arr[j];</span><br><span class="line">                  arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                  arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              flag = <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>线程状态</title>
    <url>/2020/03/05/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p>在线程的生命周期中，当线程被创建并启动之后，它既不是以启动就就进入了执行状态，也不是一直处于执行状态。在线程的整个生命周期中，一共有六种线程状态。</p>
<a id="more"></a>

<p>线程状态：</p>
<ol>
<li>NEW 新建状态   线程刚被创建，但是还没启动，还没调用start方法</li>
<li>Runnable 可运行状态  线程可以在Java虚拟机中运行的状态，可能正在运行自己的代码，也可能没有，这取决于操作系统处理器</li>
<li>Blocked 锁阻塞 当一个线程试图获取一个对象锁时，而该对象锁被其他的线程持有，则该线程进入Blocked状态，当该线程持有锁时，该线程将变成Runnable状态</li>
<li>Waiting 无限等待  一个线程在等待另一个线程执行唤醒动作时，该线程进入Waiting状态，进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者是notifyAll方法才能够唤醒。</li>
<li>Timed Waiting 计时等待  同Waiting状态 ，，有几个方法有超时参数，调用他们将进入Timed Waiting状态，这一状态将一直保持到超时期满或者是接收到唤醒通知，带有超时参数的常用方法有Thread.sheep、Object.wait</li>
<li>Teminated 被终止  因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。</li>
</ol>
<p>使用一个简单的案例实现线程状态中的同步唤醒机制</p>
<h4 id="线程同步唤醒机制"><a href="#线程同步唤醒机制" class="headerlink" title="线程同步唤醒机制"></a>线程同步唤醒机制</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> tongbu;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用两个线程来演示一下线程状态中的</span></span><br><span class="line"><span class="comment"> * 等待唤醒机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">synchronizedWait</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">new</span> Object();  <span class="comment">//构造一个同步锁</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (object)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"消费者去买包子，报完需求，等待生产者生产包子"</span>);</span><br><span class="line">                        object.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"消费者拿到商品"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);<span class="comment">//花费5秒生产商品</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (object)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"生产者生产完成"</span>);</span><br><span class="line">                    object.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>Timed Waiting在API中的描述为：一个正在限时等待另一个线程执行一个（唤醒）动作的线程处于这一状态。例如我们子卖票的案例中，为了减少线程执行的太快，现象看不出不明显等问题，我们在run方法中添加了sleep语句，这样就强制当前正在执行的线程休眠，或者是暂停执行，一减慢线程。。</p>
<p>其实当我们调用了sleep方法之后，当前执行的线程就进入到休眠状态，其实就是所谓的Timed Waiting 计时等待。。</p>
<h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><p>简单的说，线程间的通信就是，多个线程在处理同一个资源，但是处理的动作也就是线程的任务却不相同。<br>比如：线程A是用来生成包子的，线程B是用来吃包子的，包子可以理解为同一资源，线程A和线程B处理的动作，一个是生产，一个是消费，那么线程A与线程B之间就存在线程通信问题。</p>
<p>为什么需要线程通信呢？</p>
<p>多个线程并发执行时，在默认的情况下CPU是随机切换线程的，当我们需要多个线程来共同完成一件任务时，并且我们希望他们有规律的执行，那么多线程之间需要一些协调通信，以此来帮我们达到多线程共同操作一份数据。</p>
<p>如何保证线程间通信有效利用资源：</p>
<p>多个线程在处理同一资源，并且任务不同时，需要线程通信来帮助解决线程之间对同一个变量的使用或者操作，就是多个线程在操作同一份数据时，避免对同一共享变量的争夺，也就是我们需要通过一定的手段使各个线程能有效的利用资源，而这种手段就是=====等待唤醒机制。</p>
<p><strong>什么是等待唤醒机制</strong></p>
<p>这是多个线程间的一种<strong>协作</strong>机制。谈到线程我们经常想到的是线程间的<strong>竞争（race）</strong>，比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。就好比在公司里你和你的同事们，你们可能存在在晋升时的竞争，但更多时候你们更多是一起合作以完成某些任务。</p>
<p>就是在一个线程进行了规定操作后，就进入等待状态（<strong>wait()</strong>）， 等待其他线程执行完他们的指定代码过后 再将其唤醒（<strong>notify()</strong>）;在有多个线程进行等待时， 如果需要，可以使用 notifyAll()来唤醒所有的等待线程。</p>
<p>wait/notify 就是线程间的一种协作机制。</p>
<p><strong>等待唤醒中的方法</strong></p>
<p>等待唤醒机制就是用于解决线程间通信的问题的，使用到的3个方法的含义如下：</p>
<ol>
<li>wait：线程不再活动，不再参与调度，进入 wait set 中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态即是 WAITING。它还要等着别的线程执行一个<strong>特别的动作</strong>，也即是“<strong>通知（notify）</strong>”在这个对象上等待的线程从wait set 中释放出来，重新进入到调度队列（ready queue）中</li>
<li>notify：则选取所通知对象的 wait set 中的一个线程释放；例如，餐馆有空位置后，等候就餐最久的顾客最先入座。</li>
<li>notifyAll：则释放所通知对象的 wait set 上的全部线程。</li>
</ol>
<blockquote>
<p>注意：</p>
<p>哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，所以她需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调用 wait 方法之后的地方恢复执行。</p>
<p>总结如下：</p>
<ul>
<li>如果能获取锁，线程就从 WAITING 状态变成 RUNNABLE 状态；</li>
<li>否则，从 wait set 出来，又进入 entry set，线程就从 WAITING 状态又变成 BLOCKED 状态</li>
</ul>
</blockquote>
<p><strong>调用wait和notify方法需要注意的细节</strong></p>
<ol>
<li>wait方法与notify方法必须要由同一个锁对象调用。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</li>
<li>wait方法与notify方法是属于Object类的方法的。因为：锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</li>
<li>wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因为：必须要通过锁对象调用这2个方法。</li>
</ol>
<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="什么是线程池"><a href="#什么是线程池" class="headerlink" title="什么是线程池"></a>什么是线程池</h2><p>我们在以前使用一个线程的时候，就会去创建一个线程，这样实现起来非常的简便，随时需要随时创建，但是这样就会有一个问题：如果我们在开发中并发的线程数量很多，并且每个线程都是执行一个很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁的创建线程和销毁线程是需要时间的。。<br>那么有没有一种办法就是，使得线程可以复用，就是执行完一个任务，线程并不被销毁，而是可以继续执行其他的任务，在Java中我们可以使用线程池来达到这样的效果。。</p>
<p>在JDK1.5 之前，关于创建线程池我们是通过集合来进行完成的比如ArrayList linkedList等等，来创建集合，然后把创建的线程放入集合中，通过对集合的操作来达到操作线程的目的。但是在JDK1.5之后，Java集成了线程池的概念。。</p>
]]></content>
      <categories>
        <category>java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构基础（二）</title>
    <url>/2020/03/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="数据结构中常见面试题总结"><a href="#数据结构中常见面试题总结" class="headerlink" title="数据结构中常见面试题总结"></a>数据结构中常见面试题总结</h1><h2 id="1-单链表"><a href="#1-单链表" class="headerlink" title="1. 单链表"></a>1. 单链表</h2><p>（1）编程实现一个单链表搜的建立/测长/打印。</p>
<p>如果实现单链表，我们首先需要做的就是实现一个结点的定义，在C语言或者是C++语言中，我们使用的是结构体进行定义的，在Java中我们常使用类来实现链表结点的定义，</p>
<p>我们可以定义一个Node类，来表示链表中的结点。首先定义Node类，在Node类中，我们需要定义存放结点值的变量以及指向下一个结点的结点。</p>
<a id="more"></a>

<p>Node.Java类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">package</span> ListStudy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个用于表示结点的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> data; <span class="comment">//表示结点数据的变量</span></span><br><span class="line">   Node next=<span class="keyword">null</span>; <span class="comment">//定义一个指向自己的指针</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义带参构造方法</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.data = data;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


<p>定义完链表之后，我们需要定义实现链表中的方法，主要是实现链表的插入结点方法，测试链表的长度，打印链表中的值等方法，</p>
<p>MyLinkedList.java  链表方法类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">package</span> ListStudy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 在该类中定义链表的基本操作</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> </span>&#123;</span><br><span class="line">   	<span class="comment">//首先定义链表的头结点，链表的头结点默认为空</span></span><br><span class="line">   	Node head = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义链表中添加结点的方法</span></span><br><span class="line"><span class="comment">     * 在本例中采用的是尾插法建立单链表的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(data);<span class="comment">//首先根据值建立一个结点，然后做插入位置的判断</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先判断插入的位置，如果头结点为空则此时需要把元素插入到头结点上</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果头结点不为空则执行下面的语句</span></span><br><span class="line">        <span class="comment">//首先定义一个结点变量用来表示头结点的值</span></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span>(temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = newNode;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印链表中的结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">printLink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//首先定义一个结点指向头结点，从头往后打印</span></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果指向头结点的临时变量不为空，就继续把指向头结点的指针向下移动</span></span><br><span class="line">            System.out.println(temp.data + <span class="string">" "</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 求建立链表的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;<span class="comment">//定义一个变量用来记录链表的长度</span></span><br><span class="line">        Node temp = head;<span class="comment">//定义一个变量用来指向头结点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>上面定义完链表中结点的表示，以及链表中新增，求长，打印的方法之后，我们需要进行测试，测试方法如下：</p>
<p>testLink.Java  测试方法类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">package</span> ListStudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testLink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyLinkedList myLinkedList = <span class="keyword">new</span> MyLinkedList();</span><br><span class="line"></span><br><span class="line">        myLinkedList.addNode(<span class="number">1</span>);</span><br><span class="line">        myLinkedList.addNode(<span class="number">2</span>);</span><br><span class="line">        myLinkedList.addNode(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"所建立链表的长度为"</span>+myLinkedList.length());</span><br><span class="line">        myLinkedList.printLink();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）编程实现单链表删除结点</p>
<p>删除链表中的结点的方法，有按照值删除的方法和按照链表位置删除的方法</p>
<p>要删除结点，只需要找到要删除结点前面的结点就行</p>
<p>我们继续在上面链表方法类MyLinkedList中添加操作链表的方法。。</p>
<p>书写按值查找和按照索引位置进行查询的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//首先按照指定的值删除结点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//建立临时结点，指向当前结点，首先从头结点kaishi</span></span><br><span class="line">    Node temp = head;</span><br><span class="line">    <span class="comment">//首先判断第一个结点是不是我们要找的结点，如果第一个结点就是需要寻找的结点，直接把下一个结点赋值给head结点</span></span><br><span class="line">    <span class="keyword">if</span> (temp != <span class="keyword">null</span> &amp;&amp; temp.data == value) &#123;</span><br><span class="line">        head = temp.next;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//如果第一个结点不是我们要找的值，则执行下面的判断</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">if</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//因为删除结点的时候，我们需要找到删除结点的前驱结点，所以我们就需要判断下一个结点的值是不是我们要找的值</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next.data != value) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到之后，我们需要把目标结点的下一个结点赋值给目标结点的上一个结点</span></span><br><span class="line">        temp.next = temp.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//上面删除链表中值是按照值来进行删除的，下面我们按照链表中值的索引位置来进行删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteNode2</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">//首先判断索引的位置是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//如果删除结点是头结点，则直接把头结点的下一个结点赋值给头结点</span></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">1</span>)&#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把头结点赋值给一个临时结点</span></span><br><span class="line">    Node preNode = head;</span><br><span class="line">    Node curNode = preNode.next; <span class="comment">//把头结点的下一个结点当做当前结点</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(curNode != <span class="keyword">null</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == index)&#123;</span><br><span class="line">            <span class="comment">//寻找到待删除结点</span></span><br><span class="line">            preNode.next = curNode.next;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把当前结点和当前结点的后续结点同时向下移动</span></span><br><span class="line">        preNode = preNode.next;</span><br><span class="line">        curNode = curNode.next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>（3）编程实现单链表的排序操作。</p>
<p>（4）编程实现单链表的逆序</p>
<p>（5）给一个单链表，不知道结点N的值，怎么样只遍历一次就可以求出中间结点，写出算法</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构基础（一）</title>
    <url>/2020/03/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="数据结构中常见面试题总结"><a href="#数据结构中常见面试题总结" class="headerlink" title="数据结构中常见面试题总结"></a>数据结构中常见面试题总结</h1><h2 id="1-单链表"><a href="#1-单链表" class="headerlink" title="1. 单链表"></a>1. 单链表</h2><p>（1）编程实现一个单链表搜的建立/测长/打印。</p>
<p>如果实现单链表，我们首先需要做的就是实现一个结点的定义，在C语言或者是C++语言中，我们使用的是结构体进行定义的，在Java中我们常使用类来实现链表结点的定义，</p>
<p>我们可以定义一个Node类，来表示链表中的结点。首先定义Node类，在Node类中，我们需要定义存放结点值的变量以及指向下一个结点的结点。</p>
<a id="more"></a>

<p>Node.Java类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">package</span> ListStudy;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个用于表示结点的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> data; <span class="comment">//表示结点数据的变量</span></span><br><span class="line">   Node next=<span class="keyword">null</span>; <span class="comment">//定义一个指向自己的指针</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义带参构造方法</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.data = data;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


<p>定义完链表之后，我们需要定义实现链表中的方法，主要是实现链表的插入结点方法，测试链表的长度，打印链表中的值等方法，</p>
<p>MyLinkedList.java  链表方法类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">package</span> ListStudy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 在该类中定义链表的基本操作</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span> </span>&#123;</span><br><span class="line">   	<span class="comment">//首先定义链表的头结点，链表的头结点默认为空</span></span><br><span class="line">   	Node head = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义链表中添加结点的方法</span></span><br><span class="line"><span class="comment">     * 在本例中采用的是尾插法建立单链表的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(data);<span class="comment">//首先根据值建立一个结点，然后做插入位置的判断</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先判断插入的位置，如果头结点为空则此时需要把元素插入到头结点上</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果头结点不为空则执行下面的语句</span></span><br><span class="line">        <span class="comment">//首先定义一个结点变量用来表示头结点的值</span></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span>(temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = newNode;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印链表中的结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">printLink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//首先定义一个结点指向头结点，从头往后打印</span></span><br><span class="line">        Node temp = head;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果指向头结点的临时变量不为空，就继续把指向头结点的指针向下移动</span></span><br><span class="line">            System.out.println(temp.data + <span class="string">" "</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 求建立链表的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;<span class="comment">//定义一个变量用来记录链表的长度</span></span><br><span class="line">        Node temp = head;<span class="comment">//定义一个变量用来指向头结点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>上面定义完链表中结点的表示，以及链表中新增，求长，打印的方法之后，我们需要进行测试，测试方法如下：</p>
<p>testLink.Java  测试方法类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">package</span> ListStudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testLink</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyLinkedList myLinkedList = <span class="keyword">new</span> MyLinkedList();</span><br><span class="line"></span><br><span class="line">        myLinkedList.addNode(<span class="number">1</span>);</span><br><span class="line">        myLinkedList.addNode(<span class="number">2</span>);</span><br><span class="line">        myLinkedList.addNode(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"所建立链表的长度为"</span>+myLinkedList.length());</span><br><span class="line">        myLinkedList.printLink();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）编程实现单链表删除结点</p>
<p>删除链表中的结点的方法，有按照值删除的方法和按照链表位置删除的方法</p>
<p>要删除结点，只需要找到要删除结点前面的结点就行</p>
<p>我们继续在上面链表方法类MyLinkedList中添加操作链表的方法。。</p>
<p>书写按值查找和按照索引位置进行查询的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//首先按照指定的值删除结点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//建立临时结点，指向当前结点，首先从头结点kaishi</span></span><br><span class="line">    Node temp = head;</span><br><span class="line">    <span class="comment">//首先判断第一个结点是不是我们要找的结点，如果第一个结点就是需要寻找的结点，直接把下一个结点赋值给head结点</span></span><br><span class="line">    <span class="keyword">if</span> (temp != <span class="keyword">null</span> &amp;&amp; temp.data == value) &#123;</span><br><span class="line">        head = temp.next;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//如果第一个结点不是我们要找的值，则执行下面的判断</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">if</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//因为删除结点的时候，我们需要找到删除结点的前驱结点，所以我们就需要判断下一个结点的值是不是我们要找的值</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next.data != value) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到之后，我们需要把目标结点的下一个结点赋值给目标结点的上一个结点</span></span><br><span class="line">        temp.next = temp.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//上面删除链表中值是按照值来进行删除的，下面我们按照链表中值的索引位置来进行删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteNode2</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">//首先判断索引的位置是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//如果删除结点是头结点，则直接把头结点的下一个结点赋值给头结点</span></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">1</span>)&#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把头结点赋值给一个临时结点</span></span><br><span class="line">    Node preNode = head;</span><br><span class="line">    Node curNode = preNode.next; <span class="comment">//把头结点的下一个结点当做当前结点</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(curNode != <span class="keyword">null</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == index)&#123;</span><br><span class="line">            <span class="comment">//寻找到待删除结点</span></span><br><span class="line">            preNode.next = curNode.next;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把当前结点和当前结点的后续结点同时向下移动</span></span><br><span class="line">        preNode = preNode.next;</span><br><span class="line">        curNode = curNode.next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>（3）编程实现单链表的排序操作。</p>
<p>（4）编程实现单链表的逆序</p>
<p>（5）给一个单链表，不知道结点N的值，怎么样只遍历一次就可以求出中间结点，写出算法</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>线性表</tag>
      </tags>
  </entry>
  <entry>
    <title>CGLib代理</title>
    <url>/2019/11/17/CGLib%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>上篇博客介绍了JDK的动态代理，但是JDK的动态代理机制只能代理实现了接口的类，也就是说如果一个类必须要有接口，这样我们才能使用JDK动态代理对这个类进行代理，而不能实现接口的类就不能实现JDK的动态代理，这样就存在一定的局限性，如果一个类没有实现接口，但是一些业务需要需要进行代理怎么办呢？对于这种情况，我们可以采用CGLIB代理来实现。</p>
<a id="more"></a>



<p> cglib是针对类来实现代理的，其实现原理：CGLIB的底层采用ASM字节码生成框架，使用字节码技术生成代理，比使用反射生成代理的效果要高，是对指定的目标类生成一个子类，并覆盖其中方法实现增强。但是也有一点点不足，因为采用的是继承，所以不能对final修饰的类进行代理。 </p>
<p>在这一章节中，我们还是使用以前的代码，依然还是简单的三步来实现。</p>
<p>第一：建立一个普普通通的业务类；</p>
<p>第二：写CGLIB代理类；</p>
<p>第三：写测试代码或者客户端调用。</p>
<p>这里的不同是第一步中，我们不需要在建接口了，只是一个普普通通的java类。</p>
<p>编写需要进行代理的类：</p>
<p>UserInfo.java  这只是一个简单的未实现任何接口的类</p>
<p>```java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxyMoShi.CGLibProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是更新操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是查询的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>```</p>
<p>我们编写cglib代理类</p>
<p>由于Cglib是第三方的API，所以需要导入相应的Jar包，因为自己是在学习Spring的时候，学习的Cglib代理，所以导入了Spring的核心jar文件，也就包括了Cglib代理的相关Jar文件。</p>
<p>```java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.cglib.proxy.Enhancer;import org.springframework.cglib.proxy.MethodInterceptor;import org.springframework.cglib.proxy.MethodProxy;</span><br></pre></td></tr></table></figure>

<p>```</p>
<p>CGLib代理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxyMoShi.CGLibProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//委托对象，运行时定类型</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(<span class="keyword">this</span>.target.getClass());</span><br><span class="line">        <span class="comment">// 回调方法</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行操作之前的日志"</span>);</span><br><span class="line">        Object result = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        System.out.println(<span class="string">"执行操作之后的日志操作"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>通过以上代码，我们发现proxy.invokeSuper（obj,arg)是执行的关键。</p>
<p>​         使用CGLIB,需要实现 CGLib 给我们提供的 MethodInterceptor 实现类，并重写 intercept() 方法。方法中最后一个 MethodProxy 类型的参数 proxy，我们需要特别注意一下。CGLib 给我们提供的是方法级别的代理，也可以理解为对方法的拦截。</p>
<p>我们直接调用 proxy 的 invokeSuper() 方法，将被代理的对象 obj 以及方法参数 args 传入其中即可。 所以到这为止，我们的CGLIB代理类对需要代理的类进行代理的功能也就实现了。</p>
<p> 在代理类中，Enhancer、MethodInterceptor、MethodProxy这三个类和接口是我们实现Cglib动态代理的核心。</p>
<p>首先Enhancer类用于创建代理实例。负责整个代理对象的生命周期。其中setSuperclass方法用于设置被代理对象。也就是代理对象的父类。</p>
<p>setCallback方法用于设置回调。也就是对我们代理的方法转发到这个回调上。且所有回调类必须实现MethodInterceptor接口，并且实现intercept方法。在intercept方法中，传递了4个参数：</p>
<p>（1）Object obj ：被代理的源对象</p>
<p>（2）Method method ：被代理的对象调用的方法</p>
<p>（3）Object [] args：被调用方法的参数集合</p>
<p>（4）MethodProxy proxy：被调用方法的代理，可以和method完成相同的事情，但是由于内部使用了FastClass机制，而不是反射，所以效率更高。</p>
<p>最后一步是调用create方法,创建代理对象。</p>
<p>下面我们编写一个类对上面编写的类进行测试：</p>
<p>Client.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.proxyMoShi.CGLibProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CglibProxy cglibProxy = <span class="keyword">new</span> CglibProxy();</span><br><span class="line">        UserInfo userinfo = (UserInfo) cglibProxy.getInstance(<span class="keyword">new</span> UserInfo());</span><br><span class="line">        userinfo.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p>执行操作之前的日志</p>
<p>这是查询的方法</p>
<p>执行操作之后的日志操作</p>
<p>Process finished with exit code 0</p>
<p>从运行结果中，我么可以看到写的代理类是可以正常对类进行代理的。</p>
<p>### 总结：</p>
<p>CGLIB是一个强大的高性能的代码生成包，它可以在运行期扩展Java类与实现Java接口。它广泛的被许多AOP的框架使用，例如Spring AOP，为他们提供方法的interception（拦截）。CGLIB包的底层是通过使用一个小而快的字节码处理框架ASM，来转换字节码并生成新的类。不鼓励直接使用ASM，因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉。</p>
<p>Cglib代理构建的注意事项：我们在构建的过程中首先需要引入cglib – jar文件， 但是spring的核心包中已经包括了cglib功能，所以直接引入spring-core-3.2.5.jar即可。引入功能包后，就可以在内存中动态构建子类，代理的类不能为final， 否则报错。目标对象的方法如果为final/static, 那么就不会被拦截，即不会执行目标对象额外的业务方法。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>动态代理</tag>
        <tag>CGLib代理</tag>
      </tags>
  </entry>
  <entry>
    <title>动态代理技术</title>
    <url>/2019/11/12/2019-11-12-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>在静态代理中，如果接口需要代理，我们需要提前写好代理类，在静态代理中建立好代理类与被代理类的关系，但是如果有多个接口需要同样被代理，就需要为每一个接口写一个代理类，这样会造成代码的大量重复，这个时候我们就可以使用动态代理技术，我们通过动态代理在运行期间动态的生成业务类的代理类。</p>
<p>总的来说，动态代理之所以能节省代码量，在需要代理的时候进行动态代理，主要是因为动态代理的字节码是在程序运行的时候由反射机制进行动态的额生成的，动态代理不仅简化了编程工作，而且提高了软件系统的可扩展性，因为Java机制可以生成任意类型的动态代理类。</p>
<a id="more"></a>

<p>动态代理的流程与上面静态代理的分析流程是一样的，首先需要建立代理对象与真实对象与代理对象之间的联系。然后实现代理逻辑。</p>
<p>在JDK动态代理中，要想实现代理，我们定义的代理类必须实现 InvocationHandler 接口，接口中定义了一个invoke方法，并提供接口数组用下下挂对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InvocationHandler接口： </span><br><span class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123; </span><br><span class="line">      	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy,Method method,Object[] args)</span> <span class="keyword">throws</span> Throwable</span>; </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>参数说明： </p>
<p>​           Object proxy：指被代理的对象。 </p>
<p>​           Method method：要调用的方法 </p>
<p>​          Object[] args：方法调用时所需要的参数 </p>
<h3 id="使用JDK的动态代理"><a href="#使用JDK的动态代理" class="headerlink" title="使用JDK的动态代理"></a>使用JDK的动态代理</h3><p>使用动态代理依旧需要借助一个接口才能实现代理对象，我们定义接口和实现类。依旧使用上一节中定义过的 </p>
<p>UserInfo接口及实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;<span class="comment">//更新信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;<span class="comment">//查询信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoImpl</span> <span class="keyword">implements</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是更新操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是查询的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>定义完接口及实现类，下面我们就需要定义一个代理类。</p>
<p>在下面代码中，我们通过一个变量private Object target; 表示要被代理的真实对象，我们通过bind方法来实现本例对象与真实对象之间联系。在这里使用了一个类Proxy。Proxy类的作用就是用来动态创建一个代理类对象的类，它提供了许多的方法，但是我们用的最多的就是newProxyInstance这个方法。下面看一下newProxyInstance这个方法的参数。</p>
<p>newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</p>
<p>- loader：一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</p>
<p>- interfaces, ：一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就可以称为实现了该接口，这样我就能调用这组接口中的方法了</p>
<p>- h: 一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象</p>
<p>这样建立好联系之后我们就可以使用了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDomticProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  Object <span class="title">bind</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">"before这是之前-日志操作"</span>);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        result = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"after--这是之后--日期操作"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用客户端，传入真正的委托类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">clientDomticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        UserDomticProxy userDomticProxy = <span class="keyword">new</span> UserDomticProxy();</span><br><span class="line">        UserInfo userInfo = (UserInfo) userDomticProxy.bind(<span class="keyword">new</span> UserInfoImpl());</span><br><span class="line">        userInfo.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20191114204602571.png" alt="在这里插入图片描述"></p>
<p>上面就是JDK代理的实现，我们可以看出，动态代理帮我们创建出一个代理，使代理与我们的委托类之间的关联关系进行了解耦，也就是我们需要进行代理的时候再进行代理，而且一次实现代理就可以为多种接口实现代理，这样可以大大的简化我们的代码，需要时再代理就是动态代理的思想。动态代理解决了静态代理中一对一的问题，使用反射可以动态的决定由任意类型的代理去代理实际的实现接口，提高了系统的课扩展性。动态代理和AOP面向切面编程的思想是一致的。</p>
<p>但是动态代理也有缺点，就是每一个被代理的对象都需要时实现接口，也就是说如果如果一个类需要代理它必须是接口的实现，但是一个类没有接口如何使用代理呢，这个时候就引入了CGlib代理技术。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>静态代理技术</title>
    <url>/2019/11/10/2019-07-10-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h2 id="静态代理技术"><a href="#静态代理技术" class="headerlink" title="静态代理技术"></a>静态代理技术</h2><p>在讲解静态代理之前，我们先看一下代理模式的概念。最初是在设计模式课程中学习过代理模式，当时也是一知半解，但是最近再看spring中，遇到一些设计模式中的设计思想，所以这里再进行重新学习一下。</p>
<a id="more"></a>

<p>## 代理模式</p>
<p>代理模式在我们的程序中是常用的设计模式之一。</p>
<p>我们先看一下代理模式的定义：代理模式主要是为其他对象提供一种代理以控制对这个对象的访问。当我们直接访问一个对象不能完成或者是不方便直接访问一个对象时，我们可以通过一个代理对象来进行间接的访问，所访问的真实对象与代理对象需要访问相同的接口。总的来说，代理对象主要是用来增强目标对象的功能的，目标对象是我们需要进行增强的对象。</p>
<p>代理模式又有很多的类型，如果我们按照代理模式创建的时期来进行划分的话，可以划分为静态代理和动态代理，这里代理对象创建的时期指的是，一个对象的增强版的代理对象是提前创建好的还是需要增强的时候再创建，当然或者动态代理具有很强的灵活性。</p>
<p>简单的说，举一个生活中的例子，比如代理律师，就相当于代理模式中的代理对象。在遇到法律问题的时候，委托方在一个问题上可能不是那么的专业，这个时候就需要一个代理代表委托方去处理一些问题，那么就可以说这个律师就是对委托方的增强，实现一些委托方不能做到或者是不方便做到的事情。</p>
<p>那么进一步的说，如果一个律师随时可以被多个有需求的委托方代理，那么这就是动态代理，在需要的时候创建，如果一个律师是一个企业中的执业律师，那么这个律师证只为这一个企业服务，可以说这样的形式就是静态代理。</p>
<p><strong>下面详细讲解一下静态代理</strong></p>
<h3 id="静态代理技术-1"><a href="#静态代理技术-1" class="headerlink" title="静态代理技术"></a>静态代理技术</h3><p>实现一个静态代理，只需要三步就可以完成，首先我们需要定义一个业务接口，然后定义业务接口的实现类，然后定义代理类实现业务接口并增强功能，最后写一个client去调用。</p>
<p>首先定义一个业务接口：</p>
<p>接口中定义两种方法，更新和查询方法</p>
<p>``` java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;<span class="comment">//更新信息    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;<span class="comment">//查询信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>```</p>
<p>我们写一个实现类，实现这个接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxyMoShi.staticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoImpl</span> <span class="keyword">implements</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是更新操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是查询的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">下面我们写一个代理类去增强这个对象、</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.proxyMoShi.staticProxy;</span><br><span class="line"></span><br><span class="line">public class UserStaticProxy implements UserInfo &#123;</span><br><span class="line">    private UserInfoImpl userInfo;</span><br><span class="line"></span><br><span class="line">    public UserStaticProxy(UserInfoImpl userInfoimple) &#123;</span><br><span class="line">        this.userInfo = userInfoimple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;在更新之前进行一系列的日志操作&quot;);</span><br><span class="line">        userInfo.update();</span><br><span class="line">        System.out.println(&quot;在更新之后进行一系列的日志操作&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void query() &#123;</span><br><span class="line">        System.out.println(&quot;在查询之前进行一系列的操作&quot;);</span><br><span class="line">        userInfo.query();</span><br><span class="line">        System.out.println(&quot;在查询之后进行一系列的操作&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>使用这个对象之后，我们就可以在执行原来对象之前或者是之后，加上执行一些方法，比如日志功能，或者是权限判断等一些操作，这样我们可以在不改变原来类的前提下对功能进行扩展。</p>
<p>下面我们写一个client去执行以下我们写的代理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxyMoShi.staticProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">clientStaticProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*UserInfo userInfo = new UserInfoImpl();</span></span><br><span class="line"><span class="comment">        userInfo.query();</span></span><br><span class="line"><span class="comment">        userInfo.update();*/</span></span><br><span class="line"></span><br><span class="line">        UserInfoImpl userInfo = <span class="keyword">new</span> UserInfoImpl();</span><br><span class="line">        UserStaticProxy userStaticProxy = <span class="keyword">new</span> UserStaticProxy(userInfo);</span><br><span class="line"></span><br><span class="line">        userStaticProxy.query();</span><br><span class="line">        userStaticProxy.update();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1573560149341.png" alt="1573560149341"></p>
<p>那么上面就是静态代理的实现过程，我们不改变原来的实现类，而且实现了一些方法。</p>
<p>但是我们可能也发现了，在静态代理中，一个代理类只能为一个接口实现服务，如果我们要是有很多都需要代理呢？那么就需要为每一个需要代理的接口，写一个代理类，这个时候每个代理实现的功能都是相同的功能，代码存在大量的重复。那么这个时候就需要创建动态代理，动态代理与静态代理相比具有更高的灵活性。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>静态代理</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>SVM与KNN分类算法（wine数据集）</title>
    <url>/2019/11/10/2019-11-10-SVM%E4%B8%8EKNN%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>本片文章是使用分类算法KNN,和SVM支持向量机分类算法，对Wine数据集进行分类的实现。</p>
<a id="more"></a>

<h1 id="1-1-wine数据集"><a href="#1-1-wine数据集" class="headerlink" title="1.1 wine数据集"></a>1.1 wine数据集</h1><p>Wine葡萄酒数据集是来自UCI上面的公开数据集，这些数据是对意大利同一地区种植的葡萄酒进行化学分析的结果，这些葡萄酒来自三个不同的品种。该分析确定了三种葡萄酒中每种葡萄酒中含有的13种成分的数量。从UCI数据库中得到的这个wine数据记录的是在意大利某一地区同一区域上三种不同品种的葡萄酒的化学成分分析。数据里含有178个样本分别属于三个类别，这些类别已经给出。每个样本含有13个特征分量(化学成分)，分析确定了13种成分的数量，然后对其余葡萄酒进行分析发现该葡萄酒的分类。<br><img src="https://img-blog.csdnimg.cn/20190619154726181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>数据集中包含两个数据文件<br>Wine.data    包含所有数据的数据文件<br>Wine.names  数据集描述文件<br>我对这些数据集的处理，以及数据集分析和分类实现使用的环境是MATLAB R2017a。</p>
<h1 id="1-2-wine数据集属性描述"><a href="#1-2-wine数据集属性描述" class="headerlink" title="1.2  wine数据集属性描述"></a>1.2  wine数据集属性描述</h1><p>在wine数据集中，这些数据包括了三种酒中13种不同成分的数量。文件中，每行代表一种酒的样本，共有178个样本；一共有14列，其中，第一个属性是类标识符，分别是1/2/3来表示，代表葡萄酒的三个分类。后面的13列为每个样本的对应属性的样本值。剩余的13个属性是，酒精、苹果酸、灰、灰分的碱度、镁、总酚、黄酮类化合物、非黄烷类酚类、原花色素、颜色强度、色调、稀释葡萄酒的OD280/OD315、脯氨酸。其中第1类有59个样本，第2类有71个样本，第3类有48个样本。<br>具体属性描述如下表：</p>
<p><img src="https://img-blog.csdnimg.cn/20190619155355806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="1-3-原始数据集展示"><a href="#1-3-原始数据集展示" class="headerlink" title="1.3 原始数据集展示"></a>1.3 原始数据集展示</h1><p>原始数据文件是wine.data形式的文件，这些data文件的内容是以纯文本和逗号分隔格式编码的数据。该类型文件为使用者提供了很好的分析功能，有助于实时数据研究，存储，管理和分析。<br>这里只展示原始数据文件中前20条数据。</p>
<p><img src="https://img-blog.csdnimg.cn/20190619155417996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="1-4数据处理"><a href="#1-4数据处理" class="headerlink" title="1.4数据处理"></a>1.4数据处理</h1><p>由于我们下载的源数据中可能存在各种各样的数据，因此不经任何处理就进入处理数据很可能违背数据质量三要素的要求。用这样的数据在进行后续的数据挖掘，其可靠性可能会有很大的偏差。我们首先需要做的就是处理数据中的缺失数据或异常值。我们需要提高数据质量，对下载的原始数据进行数据清理过程。<br>首先进行的数据清洗的步骤相对较为简单与清晰，第一步需要进行偏差检测，即检查导致偏差的因素，并识别离散值与噪声值。然后进行数据清洗，即处理缺失值与噪声。在本数据集中由于数据都是连续的，而且通过对数据集的分析可以发现，数据集中一共有178个样本，由于数据源文件中的每个样本的数据都是完整的，没有空缺值等，所以我没有对该数据源文件进行数据的清理工作。<br>原始数据集中是178个样本值，14列属性值，但是第一列是类别标识号，所以我们需要把这一列数据拿出单独作为对比列，作为一个178<em>1的矩阵。然后把剩余的属性作为一个待处理178</em>13的矩阵。类别标识符为3，属性列为字符串我们也需要单独拿出作为一个13*1的属性矩阵。</p>
<p><strong>Matlab数据分列处理</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">load wine.data</span><br><span class="line">wine=wine(:,[<span class="number">2</span>:<span class="number">14</span>]);</span><br><span class="line">wine_labels=wine(:,<span class="number">1</span>);</span><br><span class="line">save  wine wine_labels</span><br></pre></td></tr></table></figure>
<p>处理后的数据集形式为下图所示，篇幅限制，只展示部分数据集。</p>
<p><img src="https://img-blog.csdnimg.cn/20190619155523549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="1-5-KNN分类算法实现"><a href="#1-5-KNN分类算法实现" class="headerlink" title="1.5  KNN分类算法实现"></a>1.5  KNN分类算法实现</h1><h2 id="1-5-1-KNN算法描述"><a href="#1-5-1-KNN算法描述" class="headerlink" title="1.5.1 KNN算法描述"></a>1.5.1 KNN算法描述</h2><p>k-近邻（kNN，k-NearestNeighbor）算法是一种基本分类与回归方法，KNN算法的指导思想是“近朱者赤，近墨者黑”，由你的邻居来推断出你的类别。先计算待分类样本与已知类别的训练样本之间的距离，找到距离与待分类样本数据最近的k个邻居；再根据这些邻居所属的类别来判断待分类样本数据的类别。K-近邻算法的输入为实例的特征向量，对应于特征空间的点；输出为实例的类别，可以取多类。k-邻算法假设给定一个训练数据集，其中的实例类别已定。分类时，对新的实例，根据其k个最近邻的训练实例的类别，通过多数表决等方式进行预测。因此，k近邻算法不具有显式的学习过程即属于有监督学习范畴。k近邻算法实际上利用训练数据集对特征向量空间进行划分，并作为其分类的“模型”。k值的选择、距离度量以及分类决策规则是k近邻算法的三个基本要素。<br>KNN算法流程如下：<br>就是在训练集中数据和标签已知的情况下，输入测试数据，将测试数据的特征与训练集中对应的特征进行相互比较，找到训练集中与之最为相似的前K个数据，则该测试数据对应的类别就是K个数据中出现次数最多的那个分类，在KNN中，通过计算对象间距离来作为各个对象之间的非相似性指标，避免了对象之间的匹配问题，在这里距离一般使用欧氏距离或曼哈顿距离。<br>其算法的描述为：</p>
<ul>
<li>1）计算测试数据与各个训练数据之间的距离；</li>
<li>2）按照距离的递增关系进行排序；</li>
<li>3）选取距离最小的K个点</li>
<li>4）确定前K个点所在类别的出现频率； </li>
<li>5）返回前K个点中出现频率最高的类别作为测试数据的预测分类。</li>
</ul>
<h2 id="1-5-2-实验设计"><a href="#1-5-2-实验设计" class="headerlink" title="1.5.2 实验设计"></a>1.5.2 实验设计</h2><p>（1）训练集和测试集的划分<br>为了提高分类的准确率，以及实验的正常验证，需要对训练集和测试集进行划分。将第一类的1-30，第二类的60-95，第三类的131-153做为训练集，相应的训练集的标签也要分离出来，将第一类的31-59，第二类的96-130，第三类的154-178做为测试集，相应的测试集的标签也要分离出来。具体代码如下所示。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 将第一类的1-30，第二类的60-95,第三类的131-153做为训练集</span></span><br><span class="line">train_data = [wine(<span class="number">1</span>:<span class="number">30</span>,:);wine(<span class="number">60</span>:<span class="number">95</span>,:);wine(<span class="number">131</span>:<span class="number">153</span>,:)];</span><br><span class="line">train_label = [wine_labels(<span class="number">1</span>:<span class="number">30</span>);wine_labels(<span class="number">60</span>:<span class="number">95</span>);wine_labels(<span class="number">131</span>:<span class="number">153</span>)];</span><br><span class="line"><span class="comment">% 将第一类的31-59,第二类的96-130,第三类的154-178做为测试集</span></span><br><span class="line">test_data = [wine(<span class="number">31</span>:<span class="number">59</span>,:);wine(<span class="number">96</span>:<span class="number">130</span>,:);wine(<span class="number">154</span>:<span class="number">178</span>,:)];</span><br><span class="line">test_label = [wine_labels(<span class="number">31</span>:<span class="number">59</span>);wine_labels(<span class="number">96</span>:<span class="number">130</span>);wine_labels(<span class="number">154</span>:<span class="number">178</span>)];</span><br></pre></td></tr></table></figure>
<p>数据归一化<br>归一化的目的就是使得预处理的数据被限定在一定的范围内比如[0,1]或者[-1,1]，从而消除奇异样本数据导致的不良影响。如果不进行归一化，那么由于特征向量中不同特征的取值相差较大，会导致目标函数变“扁”。这样在进行梯度下降的时候，梯度的方向就会偏离最小值的方向，走很多弯路，即训练时间过长。在本实验中使用的数据归一化的方法是mapminmax方法，这是MATLAB自带的归一化函数。在这里使用，用作本数据集中数据的归一化，数据预处理,将训练集和测试集归一化到[0,1]区间。</p>
<p><strong>数据归一化方法如下：</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[mtrain,ntrain] = <span class="built_in">size</span>(train_data);</span><br><span class="line">[mtest,ntest] = <span class="built_in">size</span>(test_data);</span><br><span class="line">dataset = [train_data;test_data];</span><br><span class="line">[dataset_scale,ps] = mapminmax(dataset',<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">dataset_scale = dataset_scale';</span><br><span class="line">train_data = dataset_scale(<span class="number">1</span>:mtrain,:);</span><br><span class="line">test_data = dataset_scale( (mtrain+<span class="number">1</span>):(mtrain+mtest),: );</span><br></pre></td></tr></table></figure>
<p>归一化之后的数据形式如下：<br>归一化后训练集：<br><img src="https://img-blog.csdnimg.cn/20190619155800114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>归一化后测试集：<br><img src="https://img-blog.csdnimg.cn/20190619155811861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>归一化是一种简化计算的方式，即将有量纲的表达式，经过变换，化为无量纲的表达式，成为纯量。归一化为了加快训练网络的收敛性，以上是对数据归一化之后的展示。</p>
<h2 id="（2）KNN过程"><a href="#（2）KNN过程" class="headerlink" title="（2）KNN过程"></a>（2）KNN过程</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">核心代码，</span><br><span class="line"><span class="comment">% 选定训练集和测试集</span></span><br><span class="line"><span class="comment">% 将第一类的1-30,第二类的60-95,第三类的131-153做为训练集</span></span><br><span class="line">train_data = [wine(<span class="number">1</span>:<span class="number">30</span>,:);wine(<span class="number">60</span>:<span class="number">95</span>,:);wine(<span class="number">131</span>:<span class="number">153</span>,:)];</span><br><span class="line">train_label = [wine_labels(<span class="number">1</span>:<span class="number">30</span>);wine_labels(<span class="number">60</span>:<span class="number">95</span>);wine_labels(<span class="number">131</span>:<span class="number">153</span>)];</span><br><span class="line"><span class="comment">% 将第一类的31-59,第二类的96-130,第三类的154-178做为测试集</span></span><br><span class="line">test_data = [wine(<span class="number">31</span>:<span class="number">59</span>,:);wine(<span class="number">96</span>:<span class="number">130</span>,:);wine(<span class="number">154</span>:<span class="number">178</span>,:)];</span><br><span class="line">test_label = [wine_labels(<span class="number">31</span>:<span class="number">59</span>);wine_labels(<span class="number">96</span>:<span class="number">130</span>);wine_labels(<span class="number">154</span>:<span class="number">178</span>)];</span><br><span class="line"> </span><br><span class="line">mdl = ClassificationKNN.fit(train_data,train_label,<span class="string">'NumNeighbors'</span>,<span class="number">1</span>);</span><br><span class="line">predict_label   =   predict(mdl, test_data);</span><br><span class="line">accuracy    =  <span class="built_in">length</span>(<span class="built_in">find</span>(predict_label == test_label))/<span class="built_in">length</span>(test_label)*<span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>程序运行之后，生成的预测标签如下，左侧为预测分类标签，右侧为实际测试分类标签。</p>
<p><img src="https://img-blog.csdnimg.cn/20190619155939121.png" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20190619155934451.png" alt="在这里插入图片描述"><br>1）未进行数据归一化<br>我使用Matlab中的KNN算法进行数据集的分析与实验。首先是未进行数据归一化的数据结果。</p>
<p><img src="https://img-blog.csdnimg.cn/20190619155951632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>分类准确率为70.7865%。</p>
<p>2）数据归一化<br>通过上述分类结果我们发现，正确率只有百分之70左右，分类结果正确率比较低。然后，我使用mapminmax方法对数据进行归一化，归一化之后的数据结果如下所示。<img src="https://img-blog.csdnimg.cn/20190619160004574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="1-5-3-实验结果与分析"><a href="#1-5-3-实验结果与分析" class="headerlink" title="1.5.3 实验结果与分析"></a>1.5.3 实验结果与分析</h2><p>为了更加直观的看到数据效果，对分类结果使用饼状图，以及曲面图进行展示，提供数据的可视化效果。这里展示的是数据归一化之后的分类结果。</p>
<p><img src="https://img-blog.csdnimg.cn/20190619160044292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>分类结果在曲面图上展示如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20190619160101282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="1-6-SVM算法分类实现"><a href="#1-6-SVM算法分类实现" class="headerlink" title="1.6  SVM算法分类实现"></a>1.6  SVM算法分类实现</h1><h2 id="1-6-1-SVM算法描述"><a href="#1-6-1-SVM算法描述" class="headerlink" title="1.6.1 SVM算法描述"></a>1.6.1 SVM算法描述</h2><p>SVM（support Vector Mac）又称为支持向量机，是一种二分类的模型。支持向量机可以分为线性核非线性两大类。支持向量机的主要思想是建立一个最优决策超平面，使得该平面两侧距离该平面最近的两类样本之间的距离最大化，从而对分类问题提供良好的泛化能力。对于一个多维的样本集，系统随机产生一个超平面并不断移动，对样本进行分类，直到训练样本中属于不同类别的样本点正好位于该超平面的两侧，满足该条件的超平面可能有很多个，SVM正式在保证分类精度的同时，寻找到这样一个超平面，使得超平面两侧的空白区域最大化，从而实现对线性可分样本的最优分类。<br>SVM的核心思想可以概括为两点：<br>（1）它是针对线性可分情况进行分析，对于线性不可分的情况，通过使用非线性映射算法将低维输入空间线性不可分的样本转化为高维特征空间使其线性可分，从而使得高维特征空间采用线性算法对样本的非线性特征进行线性分析成为可能。<br>（2）它基于结构风险最小化理论之上再特征空间中构建最优超平面，使得学习器得到全局最优化，并且在整个样本空间的期望以某个概率满足一定上界。</p>
<h2 id="1-6-2-SVM实验设计"><a href="#1-6-2-SVM实验设计" class="headerlink" title="1.6.2 SVM实验设计"></a>1.6.2 SVM实验设计</h2><p>（1）数据集的划分<br>在本实验中，数据集测试集和预测集的划分依旧使用的是上一节中的划分方法。将第一类的1-30,第二类的60-95,第三类的131-153做为训练集，相应的训练集的标签也分离出来，将第一类的31-59,第二类的96-130,第三类的154-178做为测试集，相应的测试集的标签也要分离出来。<br>（2）数据可视化<br>为了更加直观的看数据集中数据的分布情况，首先画出测试数据的分维可视化图进行数据情况展示。</p>
<p><img src="https://img-blog.csdnimg.cn/20190619160156943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619160212860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190619160225682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从上面三个图中，我们可以看到数据集中数据的分布情况，各个属性范围的取值情况，但是我们并不能直观的得出分类结果，所以我们需要对数据进行更进一步的分析。</p>
<p>（3）数据归一化</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">归一化代码：</span><br><span class="line"><span class="comment">% 数据预处理,将训练集和测试集归一化到[0,1]区间</span></span><br><span class="line">[mtrain,ntrain] = <span class="built_in">size</span>(train_wine);</span><br><span class="line">[mtest,ntest] = <span class="built_in">size</span>(test_wine);</span><br><span class="line">dataset = [train_wine;test_wine];</span><br><span class="line">[dataset_scale,ps] = mapminmax(dataset',<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">dataset_scale = dataset_scale';</span><br><span class="line">train_wine = dataset_scale(<span class="number">1</span>:mtrain,:);</span><br><span class="line">test_wine = dataset_scale( (mtrain+<span class="number">1</span>):(mtrain+mtest),: );</span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% SVM网络训练</span></span><br><span class="line"><span class="comment">%% SVM网络训练</span></span><br><span class="line">model = libsvmtrain(train_wine_labels, train_wine, <span class="string">'-c 2 -g 1'</span>);</span><br><span class="line"><span class="comment">%% SVM网络预测</span></span><br><span class="line">[predict_label, accuracy, libsvm_options] = libsvmpredict(test_wine_labels, test_wine, model);</span><br><span class="line"><span class="comment">%% 结果分析</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">% 测试集的实际分类和预测分类图</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(test_wine_labels,<span class="string">'X'</span>);</span><br><span class="line"><span class="built_in">plot</span>(predict_label,<span class="string">'r*'</span>);</span><br><span class="line">xlabel(<span class="string">'测试集样本'</span>,<span class="string">'FontSize'</span>,<span class="number">12</span>);</span><br><span class="line">ylabel(<span class="string">'类别标签'</span>,<span class="string">'FontSize'</span>,<span class="number">12</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'实际测试集分类'</span>,<span class="string">'预测测试集分类'</span>);</span><br><span class="line">title(<span class="string">'测试集的实际分类和预测分类图'</span>,<span class="string">'FontSize'</span>,<span class="number">12</span>);</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure>
<h1 id="1-6-3-结果分析与展示"><a href="#1-6-3-结果分析与展示" class="headerlink" title="1.6.3 结果分析与展示"></a>1.6.3 结果分析与展示</h1><p>运行结果：<br>运行以上程序，我们可以发现如果不使用数据归一化对数据进行处理分类正确率只有39%。</p>
<p><img src="https://img-blog.csdnimg.cn/20190619160321231.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019061916032763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>由以上散点图可以看出，分类结果偏差较大，分类正确率很低。数据分类存在很大的失误率。</p>
<p>数据归一化之后：</p>
<p><img src="https://img-blog.csdnimg.cn/20190619160340508.png" alt="在这里插入图片描述"><br>使用SVM的分类正确率为98.8764%。</p>
<p><img src="https://img-blog.csdnimg.cn/20190619160348391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在以上图中，红色部分代表预测测试数据集分类，X代表实际测试集分类结果，从图中我们可以直观的看出，只有一个预测数据分类错误，其余基本吻合分类结果。<br>由以上结果我们可以看出，SVM在该数据集的分类中的分类效果要好于KNN算法的分类效果。可能是由于该数据集的样本量较少，SVM算法可以解决小样本情况下的机器学习问题，提高泛化性能，可以避免神经网络结构选择和局部极小点问题。</p>
<p>如有问题，欢迎留言或者邮箱。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>SVM</tag>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>BP神经网络与KNN分类算法（ILPD数据集）</title>
    <url>/2019/11/10/2019-11-10-BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8EKNN%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="ILPD数据集"><a href="#ILPD数据集" class="headerlink" title="ILPD数据集"></a>ILPD数据集</h2><p>ILPD数据集来自美国加州大学一个统计学习相关的网站上（UCI）数据集的名称叫做Indian Liver Patient Dataset印度肝病患者数据集，这个数据集由三个印度的教授收集自印度安得拉邦的东北部，包含了416个肝癌病人和167个非肝癌病人共计583个肝病患者的病历数据记录。583个病人中包含441名男性病人和142名女性病人，其中任何年龄超过89岁的患者都被列为年龄90。</p>
<a id="more"></a>

<p><img src="https://img-blog.csdnimg.cn/20190824183223375.png" alt="在这里插入图片描述"></p>
<h2 id="ILPD数据集属性描述"><a href="#ILPD数据集属性描述" class="headerlink" title="ILPD数据集属性描述"></a>ILPD数据集属性描述</h2><p>在ILPD数据集中，该数据集包含416个肝脏患者记录和167个非肝脏患者记录。共计10个主要属性，以及583个样本数，里面有肝病患者和非肝病患者的记录。<br>具体属性描述如下表：<br><img src="https://img-blog.csdnimg.cn/20190824183303405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="原始数据集展示"><a href="#原始数据集展示" class="headerlink" title="原始数据集展示"></a>原始数据集展示</h2><p>该数据集是一个CSV格式的数据文件，一共有538行11列数据。<br>下图是对原始数据集的前25条数据展示：</p>
<p><img src="https://img-blog.csdnimg.cn/20190824183323132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>数据的第一列代表患者年龄，第二列为患者性别。在这里性别是一个字符串形式的表示，我们在下面的数据分析中需要把数据转换为离散型的数据表示，可以方便我们的数据分析。数据的最后一行表示是否患病，1表示肝癌病人，2表示非肝癌病人。</p>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>首先进行数据的简单预处理，进行偏差检测，即检查导致偏差的因素，并识别离散值与噪声值。然后进行数据清洗，即处理缺失值与噪声，通过观察数据集我们可以发现在数据集的第二列，性别表示中男性是male表示，女性是female表示，为了能让提高我们的分类准确率，这里需要进行替换，男性male用1表示，female用2来表示。<br>处理后的数据集表示如下：<br><img src="https://img-blog.csdnimg.cn/20190824183345370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="1-BP（反向传播）算法实现"><a href="#1-BP（反向传播）算法实现" class="headerlink" title="1. BP（反向传播）算法实现"></a>1. BP（反向传播）算法实现</h1><h3 id="BP算法描述"><a href="#BP算法描述" class="headerlink" title="BP算法描述"></a>BP算法描述</h3><p>BP算法（Back-propagation），误差反向传播算法，它的基本思想：学习过程由信号的正向传播（求损失）与误差的反向传播（误差回传）两个过程组成。网络的运行流程为：当输入一个样例后，获得该样例的特征向量，再根据权向量得到感知器的输入值，然后使用函数计算出每个感知器的输出，再将此输出作为下一层感知器的输入，依次类推，直到输出层。在多层的神经网络中，误差曲面可能有多个局部极小值，这意味着使用梯度下降算法找到的可能是局部极小值，而不是全局最小值。现在可以使用损失函数，这时可以根据损失函数来调整输出结点中的输入权向量，采用随机梯度下降算法求解，然后从后向前逐层调整权重，这就是反向传播算法计算的大致流程。<br>BP算法是一种有监督式的学习算法，其主要步骤是是输入学习样本，使用反向传播算法对网络的权值和偏差进行反复的调整训练，使输出的向量与期望向量尽可能地接近，当网络输出层的误差平方和小于指定的误差时训练完成，保存网络的权值和偏差。具体步骤如下：<br>（1）初始化，随机给定各连接权[w],[v]及阈值θi，rt。<br>（2）由给定的输入输出模式对计算隐层、输出层各单元输出bj=f（wijai-θj） ct=f（vjtbj－rt）<br>式中：bj为隐层第j个神经元实际输出；ct为输出层第t个神经元的实际输出；wij为输入层至隐层的连接权；vjt为隐层至输出层的连接权。<br>dtk=（ytk－ct）ct（1－ct） ejk=[dtvjt] bj（1－bj）<br>（3）选取下一个输入模式对返回第2步反复训练直到网络设输出误差达到要求结束训练。</p>
<h3 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h3><p>（1）数据集划分<br>在本数据集中，一共有538条数据，采用前400条数据进行参数训练，后138条数据进行测试数据。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%读取训练数据</span></span><br><span class="line">[NUM]=xlsread(<span class="string">'shujv'</span>,<span class="string">'A1:K400'</span>)</span><br><span class="line">[A]=xlsread(<span class="string">'shujv'</span>,<span class="string">'A1:J400'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%读取测试数据</span></span><br><span class="line">[NUMT]=xlsread(<span class="string">'shujv'</span>,<span class="string">'A401:K583'</span>)</span><br><span class="line">[C]=xlsread(<span class="string">'shujv'</span>,<span class="string">'A401:J583'</span>)</span><br></pre></td></tr></table></figure>
<p>（2）算法步骤<br>将前400条数据作为输入，即（患者的年龄、患者的 性别性别、TB总胆红素 、DB直接胆红素、碱性磷酸酶、氨基转移酶、天冬氨酸氨基转移酶、TP总标本、ALB白蛋白 、A / G比率白蛋白和球蛋白比率）。将对应的分类结果作为输出。并用matlab自带的premnmx()函数将这些数据归一化处理。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%特征值归一化</span></span><br><span class="line"> [input,minI,maxI] = premnmx( [A ]')  ;</span><br></pre></td></tr></table></figure>
<p>通过样本数据的训练，不断修正网络权值和阈值使误差函数沿负梯度方向下降，逼近期望输出。<br>归一化之后欧的数据形式如下：</p>
<p><strong>训练集归一化：</strong><br><img src="https://img-blog.csdnimg.cn/20190824183613220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>测试集归一化：</strong><br><img src="https://img-blog.csdnimg.cn/20190824183625485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>输入输出：</strong></p>
<p>该模型由每组数据的各项指标作为输入，以分类结果作为输出输入层的节点数为10，输出层的节点数为1。<br><strong>隐含层设计:</strong><br>IW = net.IW{1,1};<br>LW = net.LW{2,1};<br>b1 = net.b{1}<br>b2 = net.b{2}<br>net是训练得到的网络，IW表示隐含层的权矩阵，维数 = 隐含层神经元个数 * 特征数，LW表示隐含层权矩阵，维数 = 1 * 隐含层神经元个数，b1输入层的阈值，b2隐含层的阈值。<br>输入输入以及隐含层的设计如下图：</p>
<p><img src="https://img-blog.csdnimg.cn/20190824183652148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>激励函数：</strong></p>
<p>BP神经网络通常采用Sigmoid可微函数和线性函数作为网络的激励函数。本文选择S型正切函数tansig作为隐层神经元的激励函数。而由于网络的输出归一到[ -1, 1]范围内, 因此预测模型选取S 型对数函数tansig作为输出层神经元的激励函数。<br><strong>代码如下：</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">out1 =<span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-n1));    <span class="comment">% tansig函数的表达式，out1表示输入层的输出结果</span></span><br><span class="line">Z = (LW * out1) + <span class="built_in">repmat</span>(b2,<span class="number">1</span>,<span class="built_in">size</span>(testInput,<span class="number">2</span>)); </span><br><span class="line">out2 =<span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-Z));    <span class="comment">% tansig函数的表达式，out2表示输入层的输出结果</span></span><br></pre></td></tr></table></figure>
<p>将训练样本数据归一化后输入网络, 设定网络隐层和输出层激励函数分别为tansig, 网络训练函数为traingdx, 网络性能函数为mse,隐层神经元数初设为4。<br><strong>设定网络参数：</strong></p>
<p>网络迭代次数epochs为10000次, 期望误差goal为0.01, 学习速率lr为0.01，设置完毕，开始训练。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%设置训练参数</span></span><br><span class="line">net.trainparam.epochs = <span class="number">10000</span> ;</span><br><span class="line">net.trainparam.goal = <span class="number">0.01</span> ;</span><br><span class="line">net.trainParam.lr = <span class="number">0.01</span> ;</span><br></pre></td></tr></table></figure>

<p><strong>完整代码</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[NUM]=xlsread(<span class="string">'shujv'</span>,<span class="string">'A1:K400'</span>)</span><br><span class="line">[A]=xlsread(<span class="string">'shujv'</span>,<span class="string">'A1:J400'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">%特征值归一化</span></span><br><span class="line">[input,minI,maxI] = premnmx( [A ]')  ;</span><br><span class="line"><span class="comment">%构造输出矩阵</span></span><br><span class="line">s = <span class="built_in">size</span>(A,<span class="number">1</span>);</span><br><span class="line">output = <span class="built_in">zeros</span>( s , <span class="number">5</span>  ) ;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : s </span><br><span class="line">   output( <span class="built_in">i</span> , NUM(<span class="built_in">i</span>,<span class="number">11</span>)) = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">%创建神经网络</span></span><br><span class="line">net = newff( minmax(input) , [<span class="number">55</span> <span class="number">5</span>] , &#123; <span class="string">'logsig'</span> <span class="string">'logsig'</span> &#125; , <span class="string">'traingdx'</span> ) ; </span><br><span class="line"> </span><br><span class="line"><span class="comment">%设置训练参数</span></span><br><span class="line">net.trainparam.show = <span class="number">25</span> ;</span><br><span class="line">net.trainparam.epochs = <span class="number">10000</span> ;</span><br><span class="line">net.trainparam.goal = <span class="number">0.01</span> ;</span><br><span class="line">net.trainParam.lr = <span class="number">0.01</span> ;</span><br><span class="line"> </span><br><span class="line"><span class="comment">%开始训练</span></span><br><span class="line">net = train( net, input , output' ) ;</span><br><span class="line"> </span><br><span class="line"><span class="comment">%读取测试数据</span></span><br><span class="line">[NUMT]=xlsread(<span class="string">'shujv'</span>,<span class="string">'A401:K583'</span>)</span><br><span class="line">[C]=xlsread(<span class="string">'shujv'</span>,<span class="string">'A401:J583'</span>)</span><br><span class="line"><span class="comment">%测试数据归一化</span></span><br><span class="line">testInput = tramnmx ( [C]' , minI, maxI ) ;</span><br><span class="line"> </span><br><span class="line"><span class="comment">%仿真</span></span><br><span class="line">Y = sim( net , testInput ) </span><br><span class="line">IW = net.IW&#123;<span class="number">1</span>,<span class="number">1</span>&#125;;  <span class="comment">% net是训练得到的网络，IW表示隐含层的权矩阵</span></span><br><span class="line">                   <span class="comment">% 维数 = 隐含层神经元个数 * 特征数</span></span><br><span class="line">LW = net.LW&#123;<span class="number">2</span>,<span class="number">1</span>&#125;;  <span class="comment">% LW表示隐含层权矩阵，维数 = 1 * 隐含层神经元个数</span></span><br><span class="line">b1 = net.b&#123;<span class="number">1</span>&#125;    <span class="comment">% 输入层的阈值</span></span><br><span class="line">b2 = net.b&#123;<span class="number">2</span>&#125;    <span class="comment">% 隐含层的阈值</span></span><br><span class="line">t=<span class="built_in">size</span>(testInput,<span class="number">2</span>)</span><br><span class="line">u=IW * testInput;</span><br><span class="line">n1 = (IW * testInput) + <span class="built_in">repmat</span>(b1,<span class="number">1</span>,<span class="built_in">size</span>(testInput,<span class="number">2</span>));</span><br><span class="line">out1 =<span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-n1));    <span class="comment">% tansig函数的表达式，out1表示输入层的输出结果</span></span><br><span class="line">Z = (LW * out1) + <span class="built_in">repmat</span>(b2,<span class="number">1</span>,<span class="built_in">size</span>(testInput,<span class="number">2</span>));        <span class="comment">% purelin函数就是形如 y = x，所以直接可以得到out2</span></span><br><span class="line">out2 =<span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-Z));    <span class="comment">% tansig函数的表达式，out1表示输入层的输出结果</span></span><br><span class="line">out3=(<span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-LW))) * (<span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(- IW)));</span><br><span class="line">C= LW * IW;</span><br><span class="line">out4=<span class="number">1.</span>/(<span class="number">1</span>+<span class="built_in">exp</span>(-C));</span><br><span class="line"><span class="comment">%统计识别正确率</span></span><br><span class="line">[s1 , s2] = <span class="built_in">size</span>( Y ) ;</span><br><span class="line">hitNum = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : s2</span><br><span class="line">    [m , Index] = <span class="built_in">max</span>( Y( : ,  <span class="built_in">i</span> ) ) ;</span><br><span class="line">    <span class="keyword">if</span>( Index  ==  NUMT(<span class="built_in">i</span>,<span class="number">11</span>)   ) </span><br><span class="line">        hitNum = hitNum + <span class="number">1</span> ; </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">sprintf(<span class="string">'分类识别率是 %3.3f%%'</span>,<span class="number">100</span> * hitNum / s2 )</span><br></pre></td></tr></table></figure>
<h3 id="实验结果分析"><a href="#实验结果分析" class="headerlink" title="实验结果分析"></a>实验结果分析</h3><p>网络训练完成后，进行测试集测试训练结果，与分类的正确率。<br><img src="https://img-blog.csdnimg.cn/20190824183915670.png" alt="在这里插入图片描述"><br>实验结果：<br>网络输出误差与训练状态<br><img src="https://img-blog.csdnimg.cn/20190824183924364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">图 网络训练误差<br><img src="https://img-blog.csdnimg.cn/20190824183940438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">图 网络训练状态</p>
<h1 id="2-KNN算法分类"><a href="#2-KNN算法分类" class="headerlink" title="2. KNN算法分类"></a>2. KNN算法分类</h1><h3 id="KNN算法步骤"><a href="#KNN算法步骤" class="headerlink" title="KNN算法步骤"></a>KNN算法步骤</h3><p>KNN的算法原理描述与算法执行流程，我们在上一章的1.5章节已经介绍过，在这里不再重复介绍。本章节主要是KNN算法在印度肝病分类实验中的应用与分类效果。<br>KNN算法在分析印度肝病患者数据集时的具体算法步骤如下：<br>1）计算测试数据与各个训练数据之间的距离，也就是计算数据集中前400条训练数据与138条数据中各个属性之间的距离。<br>2）按照距离的递增关系进行排序，然后进行后续的坐标点的选择。<br>3）选取距离最小的K个点；<br>4）确定前K个点所在类别的出现频率；<br>5）返回前K个点中出现频率最高的类别作为测试数据的预测分类。</p>
<h2 id="实验设计-1"><a href="#实验设计-1" class="headerlink" title="实验设计"></a>实验设计</h2><p>（1）数据集分类<br>前400行前10列作为训练数据，第11列作为测试标签，后138行前10列作为测试属性，后138行第11列作为测试标签。<br>[NUM]=xlsread(‘shujv’,’A1:J400’)<br>[A]=xlsread(‘shujv’,’K1:K400’)</p>
<p>%读取测试数据<br>[NUMT]=xlsread(‘shujv’,’A401:J538’)<br>[C]=xlsread(‘shujv’,’K401:K538’)</p>
<p><img src="https://img-blog.csdnimg.cn/20190824184108676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>（2）数据归一化<br>[mtrain,ntrain] = size(NUM);<br>[mtest,ntest] = size(NUMT);<br>dataset = [NUM;NUMT];<br>[dataset_scale,ps] = mapminmax(dataset’,0,1);<br>dataset_scale = dataset_scale’;<br>train_data = dataset_scale(1:mtrain,:);<br>test_data = dataset_scale( (mtrain+1):(mtrain+mtest),: );</p>
<p>（3）算法代码<br>[NUM]=xlsread(‘shujv’,’A1:J400’)<br>[A]=xlsread(‘shujv’,’K1:K400’)<br>[NUMT]=xlsread(‘shujv’,’A401:J538’)<br>[C]=xlsread(‘shujv’,’K401:K538’)</p>
<p>mdl = ClassificationKNN.fit(NUM,A,’NumNeighbors’,1);<br>predict_label   =     predict(mdl, NUMT);<br>accuracy   =   length(find(predict_label == C))/length(C)<em>100<br>*</em>测试分类标签和预测分类标签。（左侧为测试分类标签，右侧为预测分类标签）**<br><img src="https://img-blog.csdnimg.cn/20190824184135863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>正确率：正确率 = 预测标签 / 测试标签<br>accuracy   =   length(find(predict_label == C))/length(C)*100</p>
<p><img src="https://img-blog.csdnimg.cn/20190824184205848.png" alt="在这里插入图片描述"><br>由实验结果可以看出来印度肝病患者这个数据集用BP网络训练的模型，分类的准确率更高。KNN自身的优点具有：计算简单，易于理解，可解释性强；比较适合处理有缺失属性的样本；能够处理不相关的特征；在相对短的时间内能够对大型数据源做出可行且效果良好的结果。缺点是往往忽略了数据之间的相关性；BP神经网络实质上实现了一个从输入到输出的映射功能，数学理论证明三层的神经网络就能够以任意精度逼近任何非线性连续函数。这使得其特别适合于求解内部机制复杂的问题，即BP神经网络具有较强的非线性映射能力。BP神经网络在其局部的或者部分的神经元受到破坏后对全局的训练结果不会造成很大的影响，也就是说即使系统在受到局部损伤时还是可以正常工作的。即BP神经网络具有一定的容错能力。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>BP</tag>
        <tag>KNN</tag>
      </tags>
  </entry>
  <entry>
    <title>递归算法及经典递归实现</title>
    <url>/2019/08/10/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%8F%8A%E7%BB%8F%E5%85%B8%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>﻿# 递归</p>
<p>递归就是方法自己调用自己，每次调用时传入不同的变量，递归有助于编程者解决复杂的问题，同时可以让代码变得简洁。</p>
<p><strong>递归：</strong>   在定义自身的同时又出现了对自身的调用<br><strong>直接递归函数：</strong>   在定义函数体中直接调用自己<br><strong>间接递归函数：</strong>   一个函数经过一系列中间调用语句，通过其他函数调用自己，如P调用Q，Q再调用P     </p>
<a id="more"></a>

<p>使用 递归算法的 前提有两个：<br>（1） 原问题可以层层分解为类似的子问题，且子问题比原问题的规模更小。<br>（2）规模更小的子问题具有直接解</p>
<p>设计递归算法的原则是用自身的简单情况来定义自身设计递归算法的方法是：<br>（1）寻找分解方法，将原问题转化为子问题求解<br>（2）设计递归出口，也就是说根据最小的子问题，确定递归终止的条件。</p>
<h5 id="递归过程的实现"><a href="#递归过程的实现" class="headerlink" title="递归过程的实现"></a>递归过程的实现</h5><p>递归的过程 ，递归进程和递归退层。<br> 递归进程，也就是说递归的过程 i 到 i+1 层，系统需要做三件工作：<br>（1）保留本层参数与返回地址；<br>（2）给下层参数赋值<br>（3）将程序转移到被掉函数的入口</p>
<p>递归退层：也就是从i+1层到i层，系统也应该完成三件工作<br>（1）保留被调函数的计算结果<br>（2）恢复上层参数，也就是释放被调函数的数据区<br>（3）依照被调函数保存的返回地址，将控制转移回调用函数。、</p>
<p>递归函数的运行，以及递归中进层退层的实现，都需要递归机制的支持。</p>
<h4 id="什么是递归机制？"><a href="#什么是递归机制？" class="headerlink" title="什么是递归机制？"></a>什么是递归机制？</h4><h5 id="递归机制支持？"><a href="#递归机制支持？" class="headerlink" title="递归机制支持？"></a>递归机制支持？</h5><p>系统设置一个递归工作栈作为递归函数运行使用的存储区，每次递归需要所需信息构成一个工作记录，包括实参，局部变量以及上一层的返回地址。每进入一层递归，就产生一个新的工作记录压入栈顶，每退出一层递归，就从栈顶弹出一个工作记录。</p>
<p>我们可以通过一个简单的阶乘例子来看一下递归调用机制的过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.recusion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">printDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		test(<span class="number">4</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (n&gt;<span class="number">2</span>) &#123;</span><br><span class="line">			test(n-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"n="</span>+n);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们的程序执行的时候，首先进入的是主方法。<br>具体过程我们可以通过虚拟机的调用顺序来看一下详细过程</p>
<p>Java虚拟机主要分成三个部分：<br>栈空间，堆空间，另外还有一个空间是代码区包括常量<br><img src="https://img-blog.csdnimg.cn/20191023160828432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们的程序执行到主方法的时候，会首先在栈中开辟一个空间 ，这个空间我们可以叫做main[ 栈 ]，在这里面调用了  test(4),根据调用规则，会另外开辟新栈。n=4 ，会进行判断，n&gt;2时，又执行test(3) ，当执行到这里的时候，下面的代码不会执行，仍然会开辟一个新的栈，继续进行判断，test（2），进行判断，然后继续开辟新的栈。继续判断，不符合之后会执行下面的指令。（会首先执行顶级的栈）所以首先会在控制台输出n=2，<br>执行完之后弹出，继续执行下面的栈。</p>
<p>执行过程：图解如下</p>
<p><img src="https://img-blog.csdnimg.cn/20191023160850637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>递归调用规则：    </p>
<ol>
<li>当程序执行到一个方法时，就会开辟一个独立的空间(栈)</li>
<li>每个空间的数据（局部变量）是独立的，由上面的过程我们可以发现，在每一个栈中，我们都有一个局部变量n=4，n=3….这些局部变量之间是相互独立的。</li>
</ol>
<p>下面我们来看一下，递归实现阶乘的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阶乘问题</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> factorial(n-<span class="number">1</span>)*n;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归能解决的问题？</p>
<ol>
<li>各种数学问题，如8皇后，汉诺塔，阶乘问题，迷宫问题，球和篮子的问题（Google编程大赛）</li>
<li>各种各种算法也会用到递归，比如归并排序，二分查找，分治算法等</li>
<li>将用栈解决的问题，使用递归解决比较简单</li>
</ol>
<h4 id="递归使用时需要遵守的重要规则"><a href="#递归使用时需要遵守的重要规则" class="headerlink" title="递归使用时需要遵守的重要规则"></a>递归使用时需要遵守的重要规则</h4><p>递归需要在遵守的重要规则：      </p>
<ol>
<li>执行一个方法时，就是创建一个新的受保护的独立空间（栈空间）    </li>
<li>方法的局部变量是独立的，不会相互影响，比如上面例子中的n变量，在每一个栈空间中是独立的。   </li>
<li>如果方法中使用的是引用类型变量，比如说是数组，就会共享该引用类型的数据</li>
<li>递归必须向退出递归的条件逼近，否则就是无限递归，进入死循环。</li>
<li>当一个方法执行完毕，或者是遇到return。就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。</li>
</ol>
<h4 id="递归经典算法"><a href="#递归经典算法" class="headerlink" title="递归经典算法"></a>递归经典算法</h4><h6 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h6><p>迷宫问题说明：<br>1）小球得到的路径，和程序员设置的找路策略有关，即找路的上下左右的顺序相关<br>2）再提到小球路径时，可以先使用（下右上左），再改成（上右下左），看看路径是不是有变<br>3）测试回溯现象</p>
<p><img src="https://img-blog.csdnimg.cn/20191023161122540.png" alt="在这里插入图片描述"><br>小球得到的路径，和程序设置的找路径策略有关：即找路的上下左右的顺序有关，在得到小球的路径时，可以先使用 下-右—上–左 ，如果不行再改用  上–右–下–左   ， 看看路径是不是有变化，测试回溯现象（我们可以多增加几个墙，这样可以测试回溯现象）。</p>
<p><strong>Q：如何求出最短的路径？</strong></p>
<p>我们可以使用递归进行实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.recusion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiGong</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//先创建一个二维数组，模拟迷宫</span></span><br><span class="line">		<span class="comment">//写一个地图，用二维数组表示地图8行7列的二维数组</span></span><br><span class="line">		<span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line">		<span class="comment">//在地图中我们使用1表示墙</span></span><br><span class="line">		<span class="comment">//上下全部置为1</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">			map[<span class="number">0</span>][i] =<span class="number">1</span>;</span><br><span class="line">			map[<span class="number">7</span>][i] =<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//左右全部置为1</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>;i++)&#123;</span><br><span class="line">			map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		map[<span class="number">3</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		map[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//输出地图</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">7</span>;j++)&#123;</span><br><span class="line">				System.out.print(map[i][j]+<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用递归回溯给小球找路</span></span><br><span class="line">		setWay(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//输出地图，小球走过，并标识过的地图</span></span><br><span class="line">		System.out.println(<span class="string">"地图的情况，走过标记过的地图"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">7</span>;j++)&#123;</span><br><span class="line">				System.out.print(map[i][j]+<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//使用递归回溯来给小球找路</span></span><br><span class="line">	<span class="comment">//说明</span></span><br><span class="line">	<span class="comment">//1. map 表示地图</span></span><br><span class="line">	<span class="comment">//2. i,j 表示从地图的哪个地方开始出发（1,1）</span></span><br><span class="line">	<span class="comment">//3. 如果小球能到 map[6][5] 位置，则说明通路找到</span></span><br><span class="line">	<span class="comment">//4. 约定：当map[i][j] 为0表示该点没有走过，当为1表示墙,当为2时是通路可以走的，为3表示该位置已经走过但是走不通</span></span><br><span class="line">	<span class="comment">//5. 在走迷宫时需要确定一个策略，也就是一个规则，先走下面，下面不同，再走右面，右面不同在走上面，上面不通，再走左面。如果该点走不通，再回溯</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 	1 1 1 1 1 1 1 </span></span><br><span class="line"><span class="comment">		1 0 0 0 0 0 1 </span></span><br><span class="line"><span class="comment">		1 0 0 0 0 0 1 </span></span><br><span class="line"><span class="comment">		1 1 1 0 0 0 1 </span></span><br><span class="line"><span class="comment">		1 0 0 0 0 0 1 </span></span><br><span class="line"><span class="comment">		1 0 0 0 0 0 1 </span></span><br><span class="line"><span class="comment">		1 0 0 0 0 0 1 </span></span><br><span class="line"><span class="comment">		1 1 1 1 1 1 1 </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * map表示地图</span></span><br><span class="line"><span class="comment">	 * i，j表示从 哪个位置开始找</span></span><br><span class="line"><span class="comment">	 * 如果找到通路返回true，如果找不到返回false</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setWay</span><span class="params">(<span class="keyword">int</span>[][] map,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(map[<span class="number">6</span>][<span class="number">5</span>] ==<span class="number">2</span> )&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (map[i][j] == <span class="number">0</span>) &#123;<span class="comment">//如果当前点还没有走过</span></span><br><span class="line">				<span class="comment">//按照策略走</span></span><br><span class="line">				map[i][j] = <span class="number">2</span>;<span class="comment">//假定该点可以走通</span></span><br><span class="line">				<span class="keyword">if</span> (setWay(map, i+<span class="number">1</span>, j)) &#123;<span class="comment">//先向下走</span></span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i, j+<span class="number">1</span>)) &#123;<span class="comment">//向右走</span></span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i-<span class="number">1</span>, j))&#123;<span class="comment">//向上走 </span></span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i, j-<span class="number">1</span>))&#123;<span class="comment">//向左走</span></span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//下右上左都走不通，说明这个点是不同的，</span></span><br><span class="line">					map[i][j]=<span class="number">3</span>; <span class="comment">//标记为此路不同别走</span></span><br><span class="line">					<span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;<span class="comment">//如果该点不等于0，map可能是1,2,3  1表示墙，2 走过了  3 是死路</span></span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="递归经典算法八皇后问题：回溯算法"><a href="#递归经典算法八皇后问题：回溯算法" class="headerlink" title="递归经典算法八皇后问题：回溯算法"></a>递归经典算法八皇后问题：回溯算法</h5><p>八皇后问题介绍;<br>八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。在8*8格的国家象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行，同一列，或者是同一斜线上，问有多少中摆法？<br>解法：我们可以使用回溯法进行解决。</p>
<p>八皇后问题算法思路分析：<br>（1） 第一个皇后先放第一行第一列<br>（2） 第二个皇后放在第二行的第二列，然后判断是否OK，即是判断是否冲突，如果不OK，继续放在第二列，第三列，依次把所有的列都放完，找到一个合适的。<br>（3） 继续第三个皇后，还是第一列，第二列…..直到第8个皇后也能放在一个不冲突的位置，算是找到了一个正确解。<br>（4）当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解全部得到。<br>（5）然后回头继续将第一个皇后放到第二列，后面继续循环执行1,2,3的步骤</p>
<p>需要说明的是，理论上需要创建一个二维数组表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题。<br>（也就是经过分析，我们先找出一个可能的解，在每一行中填上数组的下标，当前位置表示已经放上皇后， {0,4,7,5,2,6,1,3} 表示提前在此位置上放上八个皇后）<br>arr[8] = {0,4,7,5,2,6,1,3}  对应的数组下标表示的是第几行，即第几个皇后，arr[i] = val ， val表示第i+1个皇后，放在第i+1行的第val+1列。</p>
<p>编程思路： </p>
<ol>
<li><p>定义一个数组，用于保存皇后放置位置的结果，比如 arr = {0， 4 ，7，5，2，6，1，3}</p>
</li>
<li><p>编写一个方法，放置第n个皇后check()，</p>
</li>
<li><p>查看当我们放置第n个皇后，就去检测该皇后和前面已经摆放好的皇后冲突</p>
</li>
</ol>
<p>【说明】<br>【n 表示第n个皇后，n从0开始，arr[i] = val val的值表示第几个皇后，例如 {0,4,7,5,2,6,1,3} 中，4表示第2个皇后在第四列。（通过在这里我们可以发现，arr数组中里面存放的是列数，然后arr[n] 代表的是这个皇后在的列数 ）<br>我们需要进行位置 判断，首先判断两个元素是否是在同一行，然后进行是否在同一行进行判断，但是我们提前定义数组的时候，使用的是一维数组表示位置，按照这种方法定义，我们就可以使用array[i] == array[n] 进行是否值在同一行进行判断。然后还需要判断是否是在同一列进行判断，使用两个位置连线的斜率绝对值等于1进行判断    】</p>
<p>写一个方法，可以将皇后摆放的位置输出<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.recusion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queen8</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//首先定义表示共有多少个皇后</span></span><br><span class="line">	<span class="keyword">int</span>  max =<span class="number">8</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//用于统计总方案数</span></span><br><span class="line">	<span class="comment">//定义数组array，保存皇后放置位置的结果，比如 arr = &#123;0,4,7,5,2,6,1,3&#125;</span></span><br><span class="line">	<span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Queen8 queen8 = <span class="keyword">new</span> Queen8();</span><br><span class="line">		queen8.check(<span class="number">0</span>);</span><br><span class="line">		System.out.println(<span class="string">"一共有解法"</span>+count);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 放置皇后，编写一个方法，放置第n个皇后</span></span><br><span class="line">	<span class="comment">//特别注意，check是每一次递归时，进入到check中都有一套for循环for (int i = 0; i &lt; max; i++) 因此会有回溯</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (n==max) &#123; <span class="comment">//n=8表示放置到第九个皇后，8个皇后已经放好</span></span><br><span class="line">			print();</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//依次放入皇后，并判断是否是冲突的</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">			array[n]=i;</span><br><span class="line">			<span class="comment">//判断当放置第n个皇后到i列时，判断是否是冲突的</span></span><br><span class="line">			<span class="keyword">if</span> (judge(n)) &#123;</span><br><span class="line">				<span class="comment">//接着放n+1个皇后，即开始递归</span></span><br><span class="line">				check(n+<span class="number">1</span>); <span class="comment">//如果有8个皇后，每一层都会遍历8个列，会产生回溯现象的</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//如果冲突，就继续执行array[n] =i ;即将第n个皇后，放置在本行的后移一个位置</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//检测位置  编写方法，当我们放置第n个皇后时，就去检测该皇后是否和前面已经摆放好的皇后位置是否冲突</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * n 表示第几个皇后</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * 说明</span></span><br><span class="line"><span class="comment">			 * 1. array[i] == array[n] 表示判断 第n个皇后是否和前面的n-1个皇后在同一列</span></span><br><span class="line"><span class="comment">			 * 2. Math.abs(n-i)== Math.abs(array[n]-array[i]) 表示判断第n个皇后是否和第i个皇后在同一斜线上</span></span><br><span class="line"><span class="comment">			 * n = 1 放置第二列为1， n=1时，array[1]=1</span></span><br><span class="line"><span class="comment">			 * Math.abs(1-0) ==1 Math.abs(array[n]-array[i]) = Math.abs(1-0) =1</span></span><br><span class="line"><span class="comment">			 * 3. 判断是否在同一行，这一个不用判断，因为for循环中直接限制过了，没有必要进行判断了</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (array[i]==array[n] || Math.abs(n-i)== Math.abs(array[n]-array[i])) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//写一个打印数据，也就是皇后放置位置的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">		count++;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">			System.out.print(array[i]+<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>递归算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构--栈</title>
    <url>/2019/07/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
    <content><![CDATA[<h2 id="1-栈"><a href="#1-栈" class="headerlink" title="1. 栈"></a>1. 栈</h2><p>栈是指允许在一端就行插入或删除操作的线性表，首先需要确定的是栈是一种线性表。</p>
<p>1)栈的英文为 (stack)</p>
<p>2)栈是一个先入后出 (FILO first In Last Ou的有序列表</p>
<p>3)( stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端,为变化的一端,称为機项(Top),另端为固定的一端,称为底( Bottom)</p>
<p>4)根据栈的定义可知,最先放入中元素在機底,最后放入的元素在项,而除元素刚好相反,最后放入的元素最先删除,最先放入的元素最后删除</p>
<a id="more"></a>


<h3 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h3><p>1)子程序的调用:在跳往子程序前,会先将下个指令的地址存到堆栈中,直到子程序执行完后再将地址取出,以回到原来的程序中。 </p>
<p>2)处理递归调用:和子程序的调用类似,只是除了備存下一个指令的地址外也将参数、区域变量等数据存入堆栈中。</p>
<p>3)表达式的转换与求值(实际解决)。</p>
<p>4)二叉树的遍历。</p>
<p>5)图形的深度优先{ depth- first)搜素法。</p>
<p>##栈的实现</p>
<p>栈的顺序存储称为顺序栈，它是利用一组地址连续的存储单元存放自栈底到栈顶的数据元素</p>
<p>使用Java语言对栈进行一个简单实现</p>
<p>用数组模拟栈的使用，由于栈是一种有序表，当然可以使用数据的结构来存储栈的内容、</p>
<p>【思路分析】</p>
<ol>
<li>使用数组模拟栈</li>
<li>定义变量top表示栈顶，初始化为-1</li>
<li>入栈，当有数据加入栈时，top++。stack（top）=data</li>
<li>出栈，从栈顶取出数据，定义变量value用来存储栈顶的数据，然后把top–，return value</li>
</ol>
<h5 id="需要注意的是，入栈是栈顶元素先top-，再放数据。出栈是先取数据，再top–。"><a href="#需要注意的是，入栈是栈顶元素先top-，再放数据。出栈是先取数据，再top–。" class="headerlink" title="需要注意的是，入栈是栈顶元素先top++，再放数据。出栈是先取数据，再top–。"></a>需要注意的是，入栈是栈顶元素先top++，再放数据。出栈是先取数据，再top–。</h5><p>用Java定义一个栈，并定义栈中的各种操作方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//定义一个ArrayStack  表示栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">//栈的大小</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] stack; <span class="comment">//数组，数组模拟栈，数据放在该数组中</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> top = -<span class="number">1</span>; <span class="comment">// top表示栈顶，初始化为1</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">		stack = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.maxSize];  <span class="comment">//我们上面定义完数组，没有进行初始化，我们需要进行初始化</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断沾满的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断栈空的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//入栈的操作</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">			System.out.println(<span class="string">"栈满"</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		top++;</span><br><span class="line">		stack[top] = value;</span><br><span class="line">			</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//出栈的操作，将栈顶的数据返回</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			System.out.println(<span class="string">"栈空"</span>);</span><br><span class="line">			<span class="keyword">new</span> IllegalArgumentException(<span class="string">"栈空,没有数据"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> value = stack[top];</span><br><span class="line">		top--;</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">			</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//遍历栈，需要从栈顶往下遍历</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">			System.out.println(<span class="string">"栈空"</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = top; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">			System.out.printf(<span class="string">"stack[%d]=%d\n"</span>,i,stack[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写测试方法，测试操作能否正常执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//测试栈</span></span><br><span class="line">	<span class="comment">//先创建一个ArrayStack对象，表示栈</span></span><br><span class="line">	ArrayStack stack = <span class="keyword">new</span> ArrayStack(<span class="number">4</span>);</span><br><span class="line">	</span><br><span class="line">	stack.push(<span class="number">2</span>);</span><br><span class="line">	stack.push(<span class="number">3</span>);</span><br><span class="line">	stack.push(<span class="number">6</span>);		</span><br><span class="line">	stack.list();		</span><br><span class="line">	System.out.println(stack.pop());</span><br><span class="line">	stack.list();</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们使用一个计算的式子计算过程来进一步了解栈的实际应用。</p>
<p>eg：使用栈完成计算一个表达式的结果：<br>7<em>2</em>2-5+1-5+3-4=？</p>
<p>我们需要定义两个栈，一个是数据栈numStack，用来存放计算式中数据。一个是符号栈，用来存放计算式中的符号。</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568774508177.png" alt="1568774508177"></p>
<p>使用栈完成表达式的计算思路：</p>
<ol>
<li><p>通过一个index值也就是索引，来遍历我们的表达式</p>
</li>
<li><p>如果我们发现当前索引值是一个数据，就直接入数栈</p>
</li>
<li><p>如果发现扫描到是一个符号，就分为以下情况进行考虑    </p>
<ol start="3">
<li><ol>
<li>如果发现当前的符号栈为空，就直接入栈</li>
</ol>
</li>
<li><ol start="2">
<li>如果符号栈有操作符，就进行比较。如果当前的操作符的优先级小于或者是等于栈中的操作符，就需要从数据栈中pop出两个数，再从符号栈中pop出一个符号，进行运算，将计算得到的结果，放入数据栈，然后将当前的操作符放入符号栈。如果当前的操作符的优先级大于栈中的操作符，就直接入符号栈中。</li>
</ol>
</li>
</ol>
</li>
<li><p>当表达式扫描完毕之后，就顺序的从符号栈和数据栈中pop出相应的数和符号，并运行。</p>
</li>
<li><p>最后数据栈之后一个数字，就是我们的计算结果。</p>
</li>
</ol>
<p>我们根据上面的思路，使用编程实现计算上面中缀表达式的过程。</p>
<h3 id="引入：中缀表达式"><a href="#引入：中缀表达式" class="headerlink" title="引入：中缀表达式"></a>引入：中缀表达式</h3><p>形如上面定义的表达式   5+3-6/2 这样的式子就是中缀表达式，是一个通用的算术或逻辑公式表示方法， 操作符是以中缀形式处于操作数的中间（例：3 + 4），中缀表达式是人们常用的算术表示方法。<br>与前缀表达式（例：+ 3 4）或后缀表达式（例：3 4 +）相比，中缀表达式不容易被计算机解析，但仍被许多程序语言使用，因为它符合人们的普遍用法。</p>
<p>一般是转换为后缀表达式跟容易的计算。</p>
<p>==++++++++++++++++++++++++++++++++++++++++++++++</p>
<h5 id="中缀表达式转换为后缀表达式的过程如下："><a href="#中缀表达式转换为后缀表达式的过程如下：" class="headerlink" title="中缀表达式转换为后缀表达式的过程如下："></a>中缀表达式转换为后缀表达式的过程如下：</h5><p>后缀表达式也叫逆波兰表达式，</p>
<p>规则：</p>
<p>中缀表达式a + b*c + (d * e + f) * g，其转换成后缀表达式则为a b c * + d e * f  + g * +。</p>
<p>转换过程需要用到栈，具体过程如下：</p>
<ul>
<li><p>1）如果遇到操作数，我们就直接将其输出。</p>
</li>
<li><p>2）如果遇到操作符，则我们将其放入到栈中，遇到左括号时我们也将其放入栈中。</p>
</li>
<li><p>3）如果遇到一个右括号，则将栈元素弹出，将弹出的操作符输出直到遇到左括号为止。注意，左括号只弹出并不输出。</p>
</li>
<li><p>4）如果遇到任何其他的操作符，如（“+”， “*”，“（”）等，从栈中弹出元素直到遇到发现更低优先级的元素(或者栈为空)为止。弹出完这些元素后，才将遇到的操作符压入到栈中。有一点需要注意，只有在遇到” ) “的情况下我们才弹出” ( “，其他情况我们都不会弹出” ( “。</p>
</li>
<li><p>5）如果我们读到了输入的末尾，则将栈中所有元素依次弹出。</p>
</li>
</ul>
<p>—+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<p>但是在实际应用时，中缀表达式是应用最多的，下面使用栈模拟计算机计算中缀表达式的过程。</p>
<p>要实现计算中缀表达式的过程，还要在上面我们定义的栈类中新增几个方法。</p>
<ol>
<li>新增定义运算符优先级的方法：     </li>
</ol>
<p>返回运算符的优先级，优先级是程序员来定的，优先级使用数字表示，数字越大优先级越高。<br>我们假定计算式中只含有加减乘除      </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 返回运算符的优先级，优先级是程序员来定的，优先级使用数字表示，数字越大优先级越高。</span></span><br><span class="line"><span class="comment">//我们假定计算式中只含有加减乘除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">priority</span><span class="params">(<span class="keyword">int</span> oper)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (oper == <span class="string">'*'</span> || oper == <span class="string">'/'</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">'+'</span> || oper == <span class="string">'-'</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>判断是否是运算符方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是不是一个运算符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOper</span><span class="params">(<span class="keyword">char</span> val)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> val == <span class="string">'+'</span> || val == <span class="string">'-'</span> || val ==<span class="string">'*'</span> || val == <span class="string">'/'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>计算方法，从栈中弹出的两个数字需要进行运算</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//计算方法，从栈中弹出的两个数需要进行计算</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2,<span class="keyword">int</span> oper)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> result =<span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">switch</span> (oper) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">			result = num1 + num2;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">			result = num2 - num1;<span class="comment">//注意顺序，这里是num2是栈底元素</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">			result = num1 * num2;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">			result = num2 / num1;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>增加一个用于返回当前栈顶的值，不是真正的pop操作，用于进行栈顶元素的比较</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增加一个方法，可以返回当前栈顶的值，但不是真正的pop</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> stack[top];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面我们进行程序的编写。   </p>
<p>我们需要定义两个栈，一个是数据栈numStack，用来存放计算式中数据。一个是符号栈，用来存放计算式中的符号。</p>
<ol>
<li><p>通过一个index值也就是索引，来遍历我们的表达式</p>
</li>
<li><p>如果我们发现当前索引值是一个数据，就直接入数栈</p>
</li>
<li><p>如果发现扫描到是一个符号，就分为以下情况进行考虑    </p>
<ol start="3">
<li><ol>
<li>如果发现当前的符号栈为空，就直接入栈</li>
</ol>
</li>
<li><ol start="2">
<li>如果符号栈有操作符，就进行比较。如果当前的操作符的优先级小于或者是等于栈中的操作符，就需要从数据栈中pop出两个数，再从符号栈中pop出一个符号，进行运算，将计算得到的结果，放入数据栈，然后将当前的操作符放入符号栈。如果当前的操作符的优先级大于栈中的操作符，就直接入符号栈中。</li>
</ol>
</li>
</ol>
</li>
<li><p>当表达式扫描完毕之后，就顺序的从符号栈和数据栈中pop出相应的数和符号，并运行。</p>
</li>
<li><p>最后数据栈之后一个数字，就是我们的计算结果。</p>
</li>
</ol>
<p>具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jisuanshi</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//根据上面的思路，进行代码的实现，完成表达式的运算过程</span></span><br><span class="line">		</span><br><span class="line">		String expression = <span class="string">"2+6*8-4"</span>;</span><br><span class="line">		<span class="comment">//创建两个栈，一个是数据栈，一个是符号栈</span></span><br><span class="line">		ArrayStack2 numStack = <span class="keyword">new</span> ArrayStack2(<span class="number">20</span>);</span><br><span class="line">		ArrayStack2 operStack = <span class="keyword">new</span> ArrayStack2(<span class="number">20</span>);</span><br><span class="line">		<span class="comment">//定义需要的相关变量</span></span><br><span class="line">		<span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//用于扫描</span></span><br><span class="line">		<span class="keyword">int</span> num1 =<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> num2 =<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> oper = <span class="number">0</span>; <span class="comment">//char和int类型是一样的</span></span><br><span class="line">		<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">char</span> ch = <span class="string">' '</span>;<span class="comment">//将每次扫描得到char保存到ch中</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//开始使用while循环的扫描expression</span></span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="comment">//依次得到expression中的每个字符</span></span><br><span class="line">			ch = expression.substring(index, index+<span class="number">1</span>).charAt(<span class="number">0</span>);</span><br><span class="line">			<span class="comment">//判断ch是什么然后做相应的处理</span></span><br><span class="line">			<span class="keyword">if</span> (operStack.isOper(ch)) &#123;<span class="comment">//如果是运算符</span></span><br><span class="line">				<span class="comment">//判断当前的符号栈是否为空</span></span><br><span class="line">				<span class="keyword">if</span> (!operStack.isEmpty()) &#123;</span><br><span class="line">					<span class="comment">//如果符号栈有操作符，就进行比较，如果当前的操作符的优先级小于或者等于栈中的操作符，就进行下面的操作</span></span><br><span class="line">					<span class="comment">//再从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈</span></span><br><span class="line">					</span><br><span class="line">					<span class="keyword">if</span> (operStack.priority(ch) &lt;= operStack.priority(operStack.peek())) &#123;</span><br><span class="line">						<span class="comment">//从数据栈pop两个数进行计算</span></span><br><span class="line">						num1 = numStack.pop();</span><br><span class="line">						num2 = numStack.pop();</span><br><span class="line">						oper = operStack.pop();</span><br><span class="line">						result = numStack.cal(num1, num2, oper);</span><br><span class="line">						<span class="comment">//把运算结果入数栈</span></span><br><span class="line">						numStack.push(result);</span><br><span class="line">						<span class="comment">//然后把操作符入符号栈</span></span><br><span class="line">						operStack.push(ch);</span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						<span class="comment">//如果当前的操作符优先级大于栈中的操作符，就直接入符号栈</span></span><br><span class="line">						operStack.push(ch);</span><br><span class="line">					&#125;	</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="comment">//如果为空直接入符号栈</span></span><br><span class="line">					operStack.push(ch);	</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="comment">//处理是数的情况。则直接入数据栈。因为上面把它转换为字符了，所以需要进行转换</span></span><br><span class="line">				numStack.push(ch - <span class="number">48</span>);				</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//让index加1，并判断是否扫描到expression的最后</span></span><br><span class="line">			index++;</span><br><span class="line">			<span class="keyword">if</span> (index &gt;= expression.length()) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;				</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//当表达式扫描完毕，就顺序的从数据栈和符号栈中pop出相应的数据和符号。并运算</span></span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="comment">//如果符号栈为空，则计算到最后的结果，数据栈中只有一个数字，这个就是结果</span></span><br><span class="line">			<span class="keyword">if</span> (operStack.isEmpty()) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">				num1 = numStack.pop();</span><br><span class="line">				num2 = numStack.pop();</span><br><span class="line"></span><br><span class="line">				oper = operStack.pop();</span><br><span class="line">				result = numStack.cal(num1, num2, oper);</span><br><span class="line">				numStack.push(result);<span class="comment">//入栈		</span></span><br><span class="line">			&#125;			</span><br><span class="line">			<span class="comment">//将数据栈中最后的数pop出来，就是结果</span></span><br><span class="line">				<span class="keyword">int</span> res2 = numStack.pop();</span><br><span class="line">			System.out.printf(<span class="string">"表达式%s = %d"</span>, expression,res2);</span><br><span class="line">		</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运算结果：表达式2+6*8-4 = 46</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构--线性表</title>
    <url>/2019/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<p>线性结构是最简单最直接的数据关系，数据元素之间一一对应。</p>
<a id="more"></a>

<h3 id="线性表的概念"><a href="#线性表的概念" class="headerlink" title="线性表的概念"></a>线性表的概念</h3><p>线性表是由n个类型相同数据元素的有限序列。</p>
<p>线性表的特点：</p>
<pre><code>同一性：线性表是由同类数据元素组成的，每一个a必须是同一数据对象

有穷性：线性表是由有限个数据元素组成，表长度就是表中数据元素的个数

有序性：线性表中相邻数据元素之间存在着序偶关系</code></pre><p>抽象数据类型的使用：</p>
<p>由于抽象数据类型定义了相应模型上的基本 运算集，可如同使用整形类型的加减乘除运算集合一样，只要列出线性表抽象数据类型LinearList  就可以直接使用其上的基本运算集</p>
<h5 id="抽象数据类型的使用："><a href="#抽象数据类型的使用：" class="headerlink" title="抽象数据类型的使用："></a>抽象数据类型的使用：</h5><p>抽象数据类型一经定义，就可以多次使用<br>在实际问题中可利用线性表抽象数据类型的9种基本运算的组合实现对线性表进行合并、分拆、排序等多种需求。</p>
<p>1、线性结构的特点</p>
<p>线性结构是最简单、最基本的结构，数据元素间是一一对应关系。</p>
<p>2、线性表定义</p>
<p>是由n个数据元素的有限序列。除第一个和最后一个元素以外，其余的每个元素都只有唯一的直接前驱和直接后继。</p>
<p>3、线性表抽象数据类型定义</p>
<p>线性表ADT包括抽象数据类型的名称及数据元素、结构关系、基本操作集合三部分。</p>
<h2 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h2><p>节点顺序存，节点线性化    </p>
<p>类型和变量的区别：<br> 例如：两室一厅就是一个类型的定义，是一个类型是一个规格，这样301,302 这种门牌号都可以使具有这种规格的空间，这就是变量。</p>
<p>自定义类型定义了一种规格，如顺序表的数据类型定义SeqList</p>
<pre><code>typedef  struct
{
    ElemType elem[MAXSIZE]   //线性表占用的数组空间
    int last;                //线性表的最后一个元素在数组中的位置下标

}SeqList;</code></pre><p>(2)变量是规格类型的具体空间,两种定义方式</p>
<ul>
<li><p>将L定义为 Seql list:类型的变量,如 Seqlist L   将顺序表定义为一个变量。使用的时候我们<br>可通过属性访问方式L.elem[i-1]访问顺序表中序号为i的元素ai。</p>
</li>
<li><p>将L定义为指向 Seqlist类型的指针变量,如 SeqList *L  可通过指针访问方式L-&gt;elem[i-1]访问顺序表中序号为i的元素ai。</p>
</li>
</ul>
<p>类型是一种规格的定义，而变量是一种空间的定义。</p>
<h2 id="线性表的基本运算"><a href="#线性表的基本运算" class="headerlink" title="线性表的基本运算"></a>线性表的基本运算</h2><p>增删改查</p>
<p>在上面的定义中，我们通过一个结构体，进行了一个简单线性表的定义，我们在C语言或者C++z中可以通过一个结构体来进行定义，在Java中没有结构体，我么可以通过一个类来进行线性表的表示。</p>
<p>使用Java语言先定义一个线性表 ，然后我们再定义其中的基本操作</p>
<p>Java JDK中有ArrayList和LinkedList两个类很好的实现了顺序存储和链式存储。因此学习数据结构的最好方式是去研究JDK源码。</p>
<p>我们可以看一下Java中ArrayList和LinkedList的区别：</p>
<ol>
<li><p>ArrayList和LinkedList可想从名字分析，它们一个是Array(动态数组)的数据结构，一个是Link(链表)的数据结构，此外，它们两个都是对List接口的实现。ArrayList是数组队列，相当于动态数组；LinkedList为双向链表结构，也可当作堆栈、队列、双端队列</p>
</li>
<li><p>当随机访问List时（get和set操作），ArrayList比LinkedList的效率更高，因为LinkedList是线性的数据存储方式，所以需要移动指针从前往后依次查找。</p>
</li>
<li><p>当对数据进行增加和删除的操作时(add和remove操作)，LinkedList比ArrayList的效率更高，因为ArrayList是数组，所以在其中进行增删操作时，会对操作点之后所有数据的下标索引造成影响，需要进行数据的移动。</p>
</li>
<li><p>从利用效率来看，ArrayList自由性较低，因为它需要手动的设置固定大小的容量，但是它的使用比较方便，只需要创建，然后添加数据，通过调用下标进行使用；而LinkedList自由性较高，能够动态的随数据量的变化而变化，但是它不便于使用。</p>
</li>
</ol>
<p>下面使用Java实现一个顺序表</p>
<p>首先定义一个线性表，并定义线性表中的插入删除的相关的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.shunxubiao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lei</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//定义一个用来保存数据的数组</span></span><br><span class="line">	<span class="keyword">private</span> Object arr[];	</span><br><span class="line">	<span class="comment">//定义一个空数组，用来初始化空数组</span></span><br><span class="line">	<span class="keyword">private</span> Object[] DEFAULT_EMPTY = &#123;&#125;;</span><br><span class="line">	<span class="comment">//数组的初始容量，我们可以参照ArrayList源码，数组的初始容量为10</span></span><br><span class="line">	<span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//数组的大小,也就是数组的最大容量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">	<span class="comment">//定义线性表的大小，线性表的当前个数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//带参构造方法，提供能构造指定容量的空列表</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">(<span class="keyword">int</span> inittalSize)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (inittalSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.arr = <span class="keyword">new</span> Object[inittalSize];</span><br><span class="line">			<span class="keyword">this</span>.maxSize = inittalSize;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (inittalSize == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.arr = DEFAULT_EMPTY;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"不能为负，非法容量"</span>+inittalSize);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//空参构造，用来初始化一个空数组</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.arr = DEFAULT_EMPTY;</span><br><span class="line">	&#125;</span><br><span class="line">	   </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">   <span class="comment">//往线性表中指定位置插入数据</span></span><br><span class="line"><span class="comment">//在指定位置插入元素，首先就是需要判断插入位置是否正确，然后判断数组长度是否越界，</span></span><br><span class="line"><span class="comment">//如果已经满了我们需要重新增加数组的长度，一般是增加1.5倍长度，ArrayList JDK源码中也是增加1.5倍的数组长度。</span></span><br><span class="line"><span class="comment">//然后移动数组元素，空出需要插入的位置，最后把数据插入到数组中。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//在数组的指定位置插入元素。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,Object elem)</span></span>&#123;</span><br><span class="line">	<span class="comment">//首先判断数组插入的位置是否合法</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">new</span> IllegalArgumentException(<span class="string">"插入位置不合法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i &gt; size)&#123;</span><br><span class="line">		<span class="keyword">new</span> IllegalArgumentException(<span class="string">"插入位置越界，当前数组的大小为："</span>+size);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Object oldArr[];</span><br><span class="line">	Object newArr[];<span class="comment">//用来存放扩容后的容量</span></span><br><span class="line">	<span class="comment">//如果当前线性表中数组为满的，需要增加数组的存储空间</span></span><br><span class="line">	<span class="keyword">if</span> (i == maxSize) &#123;		</span><br><span class="line">		oldArr = arr;			</span><br><span class="line">		newArr = <span class="keyword">new</span> MyArrayList[(<span class="keyword">int</span>) (maxSize*<span class="number">1.5</span>)];</span><br><span class="line">		<span class="comment">//把旧数组中的元素赋值到新的数组中</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; newArr.length; j++) &#123;</span><br><span class="line">			newArr[j] = oldArr[j];</span><br><span class="line">		&#125;			</span><br><span class="line">		maxSize = (<span class="keyword">int</span>) (maxSize*<span class="number">1.5</span>);</span><br><span class="line">		arr = newArr;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//如果插入的位置是最后一个元素，不需要移动元素</span></span><br><span class="line">	<span class="keyword">if</span> (i == size) &#123;</span><br><span class="line">		arr[i] = elem;</span><br><span class="line">		size++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//如果插入的不是最后一个位置，需要移动元素，先移动位置，空出带插入位置元素</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = size;j &gt; i;j--) &#123;</span><br><span class="line">		arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//移动完之后，插入元素</span></span><br><span class="line">	arr[i] = elem;</span><br><span class="line">	size++;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//查看数组中的元素</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">		System.out.print(<span class="string">"  "</span> +arr[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>时间复杂度分析：</p>
<p>最好情况：在线性表的末尾插入，（i = size）元素后移的语句将不再执行，时间复杂度为O(1)</p>
<p>最坏情况：在表头插入，（即i=0）元素后移的语句将执行n次，时间复杂度为O(n)</p>
<p>平均情况：n/2</p>
<p>因此，线性表插入算法的时间复杂度为O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">   <span class="comment">//移除指定位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i,Object elem)</span></span>&#123;</span><br><span class="line">	<span class="comment">//首先判断移除的位置时候合法</span></span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">new</span> IllegalArgumentException(<span class="string">"插入位置为负，不合法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (i &gt; size) &#123;</span><br><span class="line">		<span class="keyword">new</span> IllegalArgumentException(<span class="string">"移除位置超越数组长度，当前长度为："</span>+size);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断是否是移动的最后一个元素，如果是最后一个元素不需要移动元素</span></span><br><span class="line">	<span class="keyword">if</span> (i == size-<span class="number">1</span>) &#123;</span><br><span class="line">		arr[i] = <span class="keyword">null</span>;</span><br><span class="line">		size--;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//一般情况的处理</span></span><br><span class="line">	arr[i] = <span class="keyword">null</span>;</span><br><span class="line">	<span class="comment">//移动元素</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&lt;size-<span class="number">1</span>;j++) &#123;</span><br><span class="line">		arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	arr[size-<span class="number">1</span>]=<span class="keyword">null</span>;<span class="comment">//最后一个元素为空</span></span><br><span class="line">	size--;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//查看数组中的元素</span></span><br><span class="line">	<span class="keyword">if</span> (arr != <span class="keyword">null</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">""</span>);</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">               System.out.print(<span class="string">" "</span> + arr[j]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度分析：</p>
<p>最好情况：在线性表的末尾移除，（i = size）元素后移的语句将不再执行，时间复杂度为O(1)</p>
<p>最坏情况：在表头移除，（即i=0）元素后移的语句将执行n次，时间复杂度为O(n)</p>
<p>平均情况：n-1/2</p>
<p>因此，线性表插入算法的时间复杂度为O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">arrs[i] = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是最一种线性表的操作，下面再看一下线性表中对两个顺序表的合并操作。  </p>
<p>【编写算法】:有两个顺序表LA和LB,其元素均为递增有序排列,编写算法,将两个有序表合并成一个递增有序的顺序表LC</p>
<p>【算法思路】</p>
<ul>
<li><p>1)初始化:LC为空表,设LC表的指示器k=0</p>
</li>
<li><p>设两个指示器i,j分别指向表LA和LB的当前位置,初值均为0。</p>
</li>
<li><p>2)比较循环:将LA.elem[]和LB.elem[]两元素进行比较,较小元素放入表LC中,且该表的指示器和G表的指示器k均加1移向下一个位置。如此下去,直到LA或LB表中一个表处理完毕为止。都是当前位置的元素做比较。</p>
</li>
<li><p>3)复制循环:将未处理完的表中剩余元素通过循环逐一复制到LC表中。</p>
</li>
</ul>
<p>【算法分析】由于两个待归并的表LA、LB本身就是有序表,且表LC的建立采用的是尾插法建表,插入时不需要移动元素,所以算法的时间复杂度O(LA-&gt;last+LB-&gt;last) </p>
<p>上面的代码，我们依旧使用Java进行实现。</p>
<p>我们首先定义一个线性表的结构，也就是定义一个线性表的类，线性表中定义一个数组然后定义一个指向数组最后一个元素的变量，提供该类的初始化有参构造方法。</p>
<p>SeqList.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hebing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeqList</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] array1;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> last;	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SeqList</span><span class="params">(<span class="keyword">int</span>[] array1)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.array1=array1;</span><br><span class="line">		<span class="keyword">if</span>(array1!=<span class="keyword">null</span>) &#123;<span class="comment">//判断是否为空</span></span><br><span class="line">			last=array1.length;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后写线性表的合并方法，定义一个合并的类，我们按照上面的算法思路实现这个合并类。定义一个空表C 用来存放合并后的类。然后对表A和表B中的元素依次判断放到表C中。</p>
<p>Combine.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hebing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Combine</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Combine</span><span class="params">(SeqList A,SeqList B,SeqList C)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(a&lt;A.last&amp;&amp;b&lt;B.last) &#123;</span><br><span class="line">			<span class="keyword">if</span>(A.array1[a]&lt;B.array1[b]) &#123;</span><br><span class="line">				C.array1[c++]=A.array1[a++];</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				C.array1[c++]=B.array1[b++];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(a&lt;A.last) &#123;</span><br><span class="line">			C.array1[c++]=A.array1[a++];</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(b&lt;B.last) &#123;</span><br><span class="line">			C.array1[c++]=B.array1[b++];</span><br><span class="line">		&#125;</span><br><span class="line">		C.last=c;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hebing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SeqList a = <span class="keyword">new</span> SeqList(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span> ,<span class="number">11</span>&#125;); </span><br><span class="line">		SeqList b = <span class="keyword">new</span> SeqList(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">2</span>,<span class="number">8</span>,<span class="number">10</span>&#125;); </span><br><span class="line">		SeqList c = <span class="keyword">new</span> SeqList(<span class="keyword">new</span> <span class="keyword">int</span>[a.array1.length + b.array1.length]);</span><br><span class="line">		</span><br><span class="line">		Combine cob=<span class="keyword">new</span> Combine();</span><br><span class="line">		cob.Combine(a, b, c);</span><br><span class="line">		</span><br><span class="line">		  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.array1.length;i++) &#123;</span><br><span class="line">			  System.out.print(c.array1[i]+<span class="string">" "</span>);</span><br><span class="line">		  &#125;</span><br><span class="line">		  		  </span><br><span class="line">		  </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线性表的链式存储"><a href="#线性表的链式存储" class="headerlink" title="线性表的链式存储"></a>线性表的链式存储</h2><p>上面学习的顺序存储结构是：一组连续单元依次存放表中各个元素<br>顺序存储结构的特点：便于随机存取，不适合动态的变化。</p>
<p>逻辑上相邻的元素在物理存储位置上也相邻。链式存储结构中，逻辑上相邻的元素在物理存储上不一定相邻。因此设计出结点来对应线性表的元素及元素之间的关系。结点包括两部分 ：结点本身数据信息，元素之间的关联关系。线性表采用链式方式将结点链接起来的存储结构称为链表。</p>
<p>链式存储结构中结点包括两部分不仅包括结点本身信息,还要包括关联关系部分。线性表采用链式方式将结点链接起来的存储结构称为链表。</p>
<p>链式存储结构分为单链表、循环单链表、双向链表和静态链表。</p>
<ul>
<li>从链接方式看,可分为单链表、循环链表和双向链表</li>
<li>从实现角度看,可分为动态链表和静态链表。</li>
</ul>
<ol>
<li>单链表结构</li>
</ol>
<p>链表中的结点包括数据域和指针域两个域</p>
<p>数据域data用来存储结点的值</p>
<p>指针域next用来存储结点本身的信息,邻接关系由后继指针指示其位置。</p>
<p>线性链表(单链表):</p>
<p>用一组任意的存储单元存放线性表的结点，每个结点的唯一后继依靠一个结点指针维持。</p>
<p>(这组存储单元可以是连续的也可以是不连续的、甚至是零散的存储在内存的任何位置。即链表结点的逻辑顺序和物理顺序不一定相同。)</p>
<ul>
<li>头指针H指向第一个结点。</li>
<li>最后一个结点的指针域为“空”（NULL）</li>
</ul>
<p>*<em>注意: 链表中头指针，头结点，首结点的关系<br>    链表中头指针指向单链表开始（H）<br>    带头结点的链表中，头指针指向头结点，头结点指向首结点。<br>    无头结点的链表中，头指针指向首结点。<br>*</em></p>
<h3 id="单链表的基本运算"><a href="#单链表的基本运算" class="headerlink" title="单链表的基本运算"></a>单链表的基本运算</h3><p>链表是一种重要的数据结构，在Java中，HashMap等集合的底层结构都是链表结构。</p>
<p>链表以结点作为存储单元，这些存储单元可以是不连续的。每个结点由两部分组成：存储的数值+前序结点和后序结点的指针。即有前序结点的指针又有后序结点的指针的链表称为双向链表，只包含后续指针的链表为单链表</p>
<p>链表是一种线性表但是并不会按顺序来存储元素</p>
<p>Java中单链表采用Node实体类类标识，其中data为存储的数据，next为下一个节点的指针：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.lianbiao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表结点的实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">	Node next = <span class="keyword">null</span>;<span class="comment">//下一个结点</span></span><br><span class="line"><span class="keyword">int</span> data;<span class="comment">//结点数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>往链表中插入元素</li>
</ol>
<p>网链表中插入元素有两种方法，一种是采用头插法。一种是采用尾插法，头插法就是每次网表头插入元素，尾插法就是从表单额末尾依次插入元素。</p>
<p>采用尾插法，必须增加一个节点用来指示链表的末尾节点。</p>
<p>用Java实现尾插法建立链表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**链表的根结点*/</span><br><span class="line">   </span><br><span class="line">Node root = null;</span><br><span class="line">       </span><br><span class="line">   /**</span><br><span class="line">    * 链表添加结点:</span><br><span class="line">    * 找到链表的末尾结点，把新添加的数据作为末尾结点的后续结点</span><br><span class="line">    * @param data</span><br><span class="line">    */</span><br><span class="line">   public void addNode(int data)&#123;</span><br><span class="line">       Node newNode = new Node(data);</span><br><span class="line">       if(root == null)&#123;</span><br><span class="line">           root = newNode;</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       Node temp = root;</span><br><span class="line">       while(temp.next != null)&#123;</span><br><span class="line">           temp = temp.next;</span><br><span class="line">       &#125;</span><br><span class="line">       temp.next = newNode;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<ol start="2">
<li>删除链表中的数据</li>
</ol>
<p>删除链表中的数据，有两种方式进行删除，首先我们可以删除指定位置上的元素。我们还可以按值删除链表中的元素。</p>
<p>首先<br>按值删除链表中的元素。</p>
<p>删除结点，主要是查找删除结点的前驱结点。然后改变前驱结点的指向就可以了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteNodeData</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">  	Node curNode = root;</span><br><span class="line">  	</span><br><span class="line">  	<span class="keyword">if</span> (curNode != <span class="keyword">null</span> &amp;&amp; curNode.data == data) &#123;</span><br><span class="line">	root = curNode.next;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">  	</span><br><span class="line">  	<span class="keyword">if</span> (curNode != <span class="keyword">null</span> ) &#123;    		</span><br><span class="line">  		<span class="keyword">while</span>(curNode.next.data != data)&#123;</span><br><span class="line">  			curNode = curNode.next;</span><br><span class="line">  		&#125;    		</span><br><span class="line">  		curNode.next = curNode.next.next;</span><br><span class="line">&#125;</span><br><span class="line">  	</span><br><span class="line">  	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>按位置删除链表中的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index&lt;<span class="number">1</span> || index&gt;length())&#123;<span class="comment">//待删除结点不存在</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == <span class="number">1</span>)&#123;<span class="comment">//删除头结点</span></span><br><span class="line">        root = root.next;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node preNode = root;</span><br><span class="line">    Node curNode = preNode.next;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(curNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==index)&#123;<span class="comment">//寻找到待删除结点</span></span><br><span class="line">            preNode.next = curNode.next;<span class="comment">//待删除结点的前结点指向待删除结点的后结点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当先结点和前结点同时向后移</span></span><br><span class="line">        preNode = preNode.next;</span><br><span class="line">        curNode = curNode.next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>求单链表的长度操作</li>
</ol>
<p>在顺序表中,线性表的长度是它的属性,数组定义时就已确定</p>
<p>在单链表中,整个链表由“头指针”来表示,单链表的长度在从头到尾遍历的过程中统计计数得到</p>
<p>【算法思路】采用“数”结点的方法求出单链表的长度。即从“头”开始“数”用指针p依次指向各个结点,一直“数”到最后一个结点(p-&gt;nextNUL),从而得到单链表的长度</p>
<ul>
<li>顺链头开始,计数器j初值为0</li>
<li>当前指针ρ指向链表L的首元结点 p=L-&gt;next</li>
<li>p依次往后(计数j+)直到表尾(p==NULL)</li>
</ul>
<p>求表长度的操作就是计算单链表中数据结点的个数，需要从第一个结点开始顺序访问表中的每一个结点，为此需要设置一个计数器变量，每访问一个结点，计数器加1，直到访问出空节点为止。</p>
<p>java代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求链表的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    Node curNode = root;</span><br><span class="line">    <span class="keyword">while</span>(curNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">        length++;</span><br><span class="line">        curNode = curNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>输出链表中的数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLink</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Node curNode = root;</span><br><span class="line">    <span class="keyword">while</span>(curNode !=<span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.print(curNode.data+<span class="string">" "</span>);</span><br><span class="line">        curNode = curNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>反转链表</li>
</ol>
<p>在反转指针前一定要保存下个结点的指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转链表，在反转指针前一定要保存下个结点的指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reserveLink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node curNode = root;<span class="comment">//根结点</span></span><br><span class="line">        Node preNode = <span class="keyword">null</span>;<span class="comment">//前一个结点</span></span><br><span class="line">        <span class="keyword">while</span>(curNode != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Node nextNode = curNode.next;<span class="comment">//保留下一个结点</span></span><br><span class="line">            curNode.next = preNode;<span class="comment">//指针反转</span></span><br><span class="line">            preNode = curNode;<span class="comment">//前结点后移</span></span><br><span class="line">            curNode = nextNode;<span class="comment">//当前结点后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        root = preNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>反向输出链表</li>
</ol>
<p>反向输出链表有三种方式</p>
<ul>
<li>方式一：先反转链表，再输出链表，需要链表遍历两次</li>
<li>方式二：把链表中的数字放入栈中再输出，需要维护额外的栈空间</li>
<li>方式三：依据栈的思想，通过递归来实现，就是将先执行的数据压如栈中，再一次出栈</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//反转链表</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reservePrt</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">           reservePrt(node.next);</span><br><span class="line">           System.out.print(node.data+<span class="string">" "</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>在不知道头结点的情况下删除指定结点</li>
</ol>
<p>删除结点的重点在于找出其前结点，使其前结点的指针指向其后结点，即跳过待删除结点，</p>
<p>1、如果待删除的结点是尾结点，由于单链表不知道其前结点，没有办法删除<br>2、如果删除的结点不是尾结点，则将其该结点的值与下一结点交换，然后该结点的指针指向下一结点的后续结点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteSpecialNode</span><span class="params">(Node n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n.next == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//交换结点和其后续结点中的数据</span></span><br><span class="line"><span class="keyword">int</span> temp = n.data;</span><br><span class="line">n.data = n.next.data;</span><br><span class="line">n.next.data = temp;</span><br><span class="line"><span class="comment">//删除后续结点</span></span><br><span class="line">n.next = n.next.next;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>总结：</p>
<ul>
<li>1.单链表主要的有点是，不需要对数据元素的最大个数进行预设，可以无限量地存储数据元素。   </li>
<li>2.单链表插入和删除时，不需要移动大量的数据元素，可提高效率。</li>
</ul>
<p>单链表主要的缺点是，每个节点中需要有一个指针，因此单链表的空间利用率略低于顺序表，</p>
<h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>定义：即首尾相接的链表</p>
<p>结构：尾结点的指针域指向头结点或表的首元结点。</p>
<p>特点：表中所有结点都链接在一个环上</p>
<p>循环单链表和单链表的区别在于，表中最后一个结点不是指向null ，而是改为指向头节点中，从而整个链表形成一个环。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB基本配置</title>
    <url>/2019/03/02/MongoDB%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>MongDB是一个文档型数据库，里面包含一些术语和概念，我们先来了解一下MongoDB的基本概念，再看一下中间的基本操作</p>
<a id="more"></a>



<h2 id="1-1-基础概念"><a href="#1-1-基础概念" class="headerlink" title="1.1 基础概念"></a>1.1 基础概念</h2><p>在mongoDB中是通过数据库、集合、文档、的方式来管理数据、先看一下mongoDB与关系型数据库的一些概念对比：</p>
<table>
<thead>
<tr>
<th>SQL术语/概念</th>
<th>MongoDB术语/概念</th>
<th>解释说明</th>
</tr>
</thead>
<tbody><tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表/集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据库行/文档</td>
</tr>
<tr>
<td>column</td>
<td>field</td>
<td>数据字段/域</td>
</tr>
<tr>
<td>index</td>
<td>index</td>
<td>索引</td>
</tr>
<tr>
<td>table joins</td>
<td></td>
<td>表连接（MongDB不支持表连接）</td>
</tr>
<tr>
<td>primary key</td>
<td>primary</td>
<td>主键，MongoDB自动在每个集合中添加_id的主键</td>
</tr>
</tbody></table>
<ul>
<li><ol>
<li>一个mongodb实例可以创建多个数据库</li>
</ol>
</li>
<li><ol start="2">
<li>一个数据库可以创建多个集合</li>
</ol>
</li>
<li><ol start="3">
<li>一个集合可以包含多个文档</li>
</ol>
</li>
</ul>
<h2 id="1-2-连接mongodb"><a href="#1-2-连接mongodb" class="headerlink" title="1.2 连接mongodb"></a>1.2 连接mongodb</h2><p>mongodb的使用方式是客户服务器模式，即使用一个客户端连接mongodb数据库（服务端）。</p>
<ol>
<li>命令模式<br>mongodb://[username:password@]host1[:port1][,host2[:port2],…[,hostN[:portN]]][/[database][? options]]</li>
</ol>
<p>mongodb:// 固定前缀<br>username：账号，可不填<br>password：密码，可不填<br>host：主机名或ip地址，只有host主机名为必填项。<br>port：端口，可不填，默认27017<br>/database：连接某一个数据库<br>?options：连接参数，key/value对</p>
<p>例如：<br>    mongodb://localhost 连接本地数据库27017端口<br>    mongodb://root:123456@localhost 使用用户名root密码为123456连接本地数据库27017端口<br>    mongodb://localhost,localhost:27018,localhost:27019，连接三台主从服务器，端口为27017、27018、2701</p>
<p>我们直接在命令行输入mongo  就可以使用输入命令来操作mongodb数据库了</p>
<h2 id="1-3-数据库使用"><a href="#1-3-数据库使用" class="headerlink" title="1.3 数据库使用"></a>1.3 数据库使用</h2><ol>
<li><p>查询数据库</p>
<p> show dbs   查询全部的数据库<br> db     显示当前数据库</p>
</li>
<li><p>创建数据库<br>命令格式  </p>
<p> use DATABASE_NAME</p>
<p> 例子：<br> use  test02<br> 执行这一行命令之后，如果有test02数据库则切换到此数据库中，如果没有则创建<br> 这里我们需要注意的是，新创建的数据库不会显示，因为这个数据库中至少需要包含一种集合。</p>
</li>
<li><p>删除数据库</p>
<p> 命令格式</p>
<p> db.dropDatabase()</p>
<p> eg：<br> 删除test02数据库<br> 先切换到数据库中  use  test02<br> 在执行删除  db.dropDatabase()  </p>
</li>
</ol>
<h2 id="1-4-集合"><a href="#1-4-集合" class="headerlink" title="1.4 集合"></a>1.4 集合</h2><p>MongoDB中的集合相当于数据库中的表。一个数据库可以创建多个集合，一个集合是将相同类型的文档管理起来。</p>
<ol>
<li><p>创建集合</p>
<p> db.createCollection(name,options)<br> name:新创建的集合名称<br> options：创建参数</p>
</li>
<li><p>删除集合</p>
<p> db.collection.drop()<br> 例子：<br> db.student.drop() 删除student集合</p>
</li>
</ol>
<h2 id="1-5-文档"><a href="#1-5-文档" class="headerlink" title="1.5 文档"></a>1.5 文档</h2><h3 id="1-5-1-插入文档"><a href="#1-5-1-插入文档" class="headerlink" title="1.5.1 插入文档"></a>1.5.1 插入文档</h3><pre><code>mongodb中的文档格式是json格式吗，下边就是一个文档，包括两个key：_id  主键和name

{
&quot;_id&quot; : ObjectId
(&quot;5b2cc4bfa6a44812707739b5&quot;),      
&quot;name&quot; : &quot;郑州大学&quot;
}</code></pre><p>插入命令：</p>
<pre><code>db.COLLECTION_NAME.insert(document)`</code></pre><p>每个文档默认以_id作为主键，主键默认类型为ObjectId（对象类型），mongodb会自动生成主键值。  </p>
<p>例子  </p>
<pre><code>db.student.insert({&quot;name&quot;:&quot;郑州大学&quot;,&quot;age&quot;:10})</code></pre><p>注意：同一个集合中的文档的key可以不相同！但是建议设置为相同的。 </p>
<h3 id="1-5-2-更新文档"><a href="#1-5-2-更新文档" class="headerlink" title="1.5.2 更新文档"></a>1.5.2 更新文档</h3><p>命令格式：</p>
<pre><code>db.collection.update(
&lt;query&gt;,
&lt;update&gt;,    
&lt;options&gt; 
) 

query:查询条件，相当于sql语句的where  
update：更新文档内容 
options：选项</code></pre><ol>
<li><p>替换文档</p>
<p> 将符合条件  “name” “郑州大学” 的第一个文档替换为  {“name”：“郑州大学学生”，“age”：10}</p>
<pre><code>db.student.update({&quot;name&quot;:&quot;郑州大学&quot;}，{“name”：“郑州大学学生”，“age”：10})</code></pre></li>
</ol>
<ol start="2">
<li><p>$set修改器<br> 使用$set修改器指定要更新的key，key不存在则创建，存在则更新。 </p>
<p> 将符合条件 “name”:”郑州大学”的所有文档更新name和age的值。</p>
<pre><code>db.student.update({&quot;name&quot;:&quot;郑州大学&quot;},{$set:{&quot;name&quot;:&quot;郑州大学学生&quot;,&quot;age&quot;:10}},{multi:true})   
multi：false表示更新第一个匹配的文档，true表示更新所有匹配的文档</code></pre></li>
</ol>
<h3 id="1-5-3-删除文档"><a href="#1-5-3-删除文档" class="headerlink" title="1.5.3 删除文档"></a>1.5.3 删除文档</h3><p>命令格式：</p>
<pre><code>db.student.remove(&lt;query&gt;) 
query：删除条件，相当于sql语句中的where</code></pre><ol>
<li><p>删除所有文档</p>
<pre><code>db.student.remove({})</code></pre></li>
<li><p>删除符合条件的文档</p>
<p> <code>db.student.remove({&quot;name&quot;:&quot; 郑州大学&quot;})</code></p>
</li>
</ol>
<h3 id="1-5-4-查询文档"><a href="#1-5-4-查询文档" class="headerlink" title="1.5.4 查询文档"></a>1.5.4 查询文档</h3><p>命令格式：</p>
<pre><code>db.collection.find(query, projection) 
query：查询条件，可不填 
projection：投影查询key，可不写</code></pre><ol>
<li><p>查询全部</p>
<p> db.student.find()</p>
</li>
<li><p>查询符合条件的记录<br> 查询name等于 “郑州大学”的文档</p>
<pre><code>db.student.find({&quot;name&quot;,&quot;郑州大学&quot;})</code></pre></li>
<li><p>投影查询</p>
<p> 只显示name和age两个key，_id主键不显示</p>
<p> db.student.find({“name”：“郑州大学”},{name：1，age：1，_id:0})</p>
</li>
</ol>
<h2 id="1-6-用户"><a href="#1-6-用户" class="headerlink" title="1.6 用户"></a>1.6 用户</h2><h3 id="1-6-1-创建用户"><a href="#1-6-1-创建用户" class="headerlink" title="1.6.1 创建用户"></a>1.6.1 创建用户</h3><pre><code>mongo&gt;db.createUser( 
{ 
user: &quot;&lt;name&gt;&quot;,   
pwd: &quot;&lt;cleartext password&gt;&quot;,   
customData: { &lt;any information&gt; },  
roles: [     
    { role: &quot;&lt;role&gt;&quot;, db: &quot;&lt;database&gt;&quot; } | &quot;&lt;role&gt;&quot;,   
      ...   
 ]} 
)</code></pre><p>例子：<br>创建root用户，角色为root</p>
<pre><code>use admin 
db.createUser(     
{        
user : &quot;root&quot;,
pwd : &quot;123456&quot;,
roles:[{role:&quot;root&quot;,db:&quot;admin&quot;}]      
}   
)</code></pre><p>内置角色如下：</p>
<pre><code>1. 数据库用户角色：read、readWrite; 
2. 数据库管理角色：dbAdmin、dbOwner、userAdmin
3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； 
4. 备份恢复角色：backup、restore； 
5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、 dbAdminAnyDatabase 
6. 超级用户角色：root</code></pre><h3 id="1-6-2-认证登录"><a href="#1-6-2-认证登录" class="headerlink" title="1.6.2 认证登录"></a>1.6.2 认证登录</h3><pre><code>如果不配置认证， 我们登陆mongo数据库的时候，是不需要进行账号密码登陆的。   
为了安全需要，Mongodb要打开认证开关，即用户连接Mongodb要进行认证。</code></pre><p>1、在mono.conf中设置 auth=true<br>2、重启Mongodb<br>3、使用账号和密码连接数据库</p>
<p>1）mongo.exe连接</p>
<p>mongo.exe ‐u root ‐p 123456 ‐‐authenticationDatabase admin</p>
<p>2）Studio 3T连接</p>
<pre><code>输入账号密码进行登陆。</code></pre><p>Windows下Mongodb最初未开启认证，如何开启authentication<br>博客分类： mongodb</p>
<p>cmd-&gt; regedit-&gt; HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services-&gt;MongoDB</p>
<p>（mongodb注册的名称，我的是MongoDB)</p>
<p>在它的ImgPath中，我们修改一下，加入 –auth</p>
<p>如下</p>
<p>“E:\develop Software\Mongodb\mongodb-win32-x86_64-2.2.3\mongodb-win32-x86_64-2.2.3\bin\mongod.exe” -dbpath “E:\develop Software\Mongodb\mongodb-win32-x86_64-2.2.3\mongodb-win32-x86_64-2.2.3\data\db” –logpath “E:\develop Software\Mongodb\mongodb-win32-x86_64-2.2.3\mongodb-win32-x86_64-2.2.3\data\log\mongodb.log” –auth –service</p>
<h3 id="1-6-3-查询所有用户"><a href="#1-6-3-查询所有用户" class="headerlink" title="1.6.3 查询所有用户"></a>1.6.3 查询所有用户</h3><p>查询当前库下的所有用户</p>
<pre><code>show users</code></pre><h3 id="1-6-4-删除用户"><a href="#1-6-4-删除用户" class="headerlink" title="1.6.4 删除用户"></a>1.6.4 删除用户</h3><p>db.dropUser(“用户名”)   </p>
<pre><code>例子：   
删除 test1用户
db.dropUser(&quot;test1&quot;)</code></pre><h3 id="1-6-5-修改用户"><a href="#1-6-5-修改用户" class="headerlink" title="1.6.5 修改用户"></a>1.6.5 修改用户</h3><pre><code>语法格式

db.updateUser( 
“&lt;username&gt;”
{     
customData : { &lt;any information&gt; },     
roles : [              
     { role: &quot;&lt;role&gt;&quot;, db: &quot;&lt;database&gt;&quot; } | &quot;&lt;role&gt;&quot;,            
       ...             
    ],     
 pwd: &quot;&lt;cleartext password&gt;&quot;     
  },     
  writeConcern: { &lt;write concern&gt; })</code></pre><p>先创建test1用户</p>
<pre><code>db.createUser(     
 {        
user:&quot;test1&quot;,        
pwd:&quot;test1&quot;,        
roles:[{role:&quot;root&quot;,db:&quot;admin&quot;}]      
}   )</code></pre><p>修改test1用户的角色为readWriteAnyDatabase</p>
<pre><code>use admin 
db.updateUser(&quot;test1&quot;,{roles:[{role:&quot;readWriteAnyDatabase&quot;,db:&quot;admin&quot;}]})</code></pre><h3 id="1-6-6-修改密码"><a href="#1-6-6-修改密码" class="headerlink" title="1.6.6 修改密码"></a>1.6.6 修改密码</h3><pre><code>语法格式

db.changeUserPassword(&quot;username&quot;,&quot;newPasswd&quot;)</code></pre><p>例子：<br>修改test1用户的密码为123</p>
<pre><code>use admin  
db.changeUserPassword(&quot;test1&quot;,&quot;123&quot;）</code></pre><p>每一个集合中的不同文档是可以有不同的域，这是比较灵活的，但是有时候为了保证性能，同一个集合中文档，域设置成一样的。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架整合案例</title>
    <url>/2019/01/02/2019-01-02-SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>本片文章主要是对ssm框架的整合（springMVC+spring+mybatis）</p>
<h1 id="1-搭建整合环境"><a href="#1-搭建整合环境" class="headerlink" title="1. 搭建整合环境"></a>1. 搭建整合环境</h1><h3 id="1-1整合说明："><a href="#1-1整合说明：" class="headerlink" title="1.1整合说明："></a>1.1整合说明：</h3><p>编程环境：IDEA<br>Maven<br>SSM整合可以使用多种方式，咱们会选择XML + 注解的方式 </p>
<a id="more"></a>

<h3 id="1-2整合的思路"><a href="#1-2整合的思路" class="headerlink" title="1.2整合的思路"></a>1.2整合的思路</h3><ol>
<li>先搭建整合的环境 </li>
<li>先把Spring的配置搭建完成</li>
<li>再使用Spring整合SpringMVC框架 </li>
<li>最后使用Spring整合MyBatis框架 </li>
</ol>
<h3 id="1-3创建数据库和表结构"><a href="#1-3创建数据库和表结构" class="headerlink" title="1.3创建数据库和表结构"></a>1.3创建数据库和表结构</h3><p>本文主要是对ssm整合的一个环境搭建，所以使用了MySQL创建了一张account表进行测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> ssm; </span><br><span class="line"><span class="keyword">use</span> ssm; </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(    </span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,    </span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),    </span><br><span class="line">money <span class="keyword">double</span> );</span><br></pre></td></tr></table></figure>

<h3 id="1-4-创建maven工程"><a href="#1-4-创建maven工程" class="headerlink" title="1.4 创建maven工程"></a>1.4 创建maven工程</h3><p><img src="https://img-blog.csdnimg.cn/20190531143449321.png" alt="在这里插入图片描述"><br>未解决maven项目刚开始创建过慢问题，我们可以创建项目的时候增加如下键值对<br><strong>archetypeCatalog<br>   internal</strong><br><img src="https://img-blog.csdnimg.cn/2019053114374136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>项目创建成功，创建需要的目录文件</p>
<p><img src="https://img-blog.csdnimg.cn/20190531144123531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后在pom文件中导入相应的依赖jar包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">  &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">  &lt;spring.version&gt;5.0.2.RELEASE&lt;/spring.version&gt;</span><br><span class="line">  &lt;slf4j.version&gt;1.6.6&lt;/slf4j.version&gt;</span><br><span class="line">  &lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt;</span><br><span class="line">  &lt;mysql.version&gt;5.1.6&lt;/mysql.version&gt;</span><br><span class="line">  &lt;mybatis.version&gt;3.4.5&lt;/mybatis.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;!-- spring --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.8&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- log start --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;!-- log end --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;c3p0&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9.1.2&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">  &lt;finalName&gt;ssmZhengHe&lt;/finalName&gt;</span><br><span class="line">  &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">      &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2.2&lt;/version&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.5.2&lt;/version&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.8.2&lt;/version&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/pluginManagement&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>
<h3 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zzu.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写dao接口"><a href="#编写dao接口" class="headerlink" title="编写dao接口"></a>编写dao接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zzu.dao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> zzu.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controllerDao层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查找账户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存账户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写service接口和实现类"><a href="#编写service接口和实现类" class="headerlink" title="编写service接口和实现类"></a>编写service接口和实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zzu.servlice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zzu.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查找账户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存账户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>service实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zzu.servlice.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> zzu.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> zzu.domain.Account;</span><br><span class="line"><span class="keyword">import</span> zzu.servlice.AccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有的账户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是service业务层的操作"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存账户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-spring框架代码的编写"><a href="#2-spring框架代码的编写" class="headerlink" title="2.spring框架代码的编写"></a>2.spring框架代码的编写</h1><p>配置完基本环境和建立好必要的domain包和dao包接口之后，我们先进行spring框架的搭建</p>
<p>在ssmZhengHe项目中创建applicationContext.xml的配置文件，编写具体的配置信息。</p>
<h4 id="applicationContext-xml的配置文件"><a href="#applicationContext-xml的配置文件" class="headerlink" title="applicationContext.xml的配置文件"></a>applicationContext.xml的配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置不需要注解扫描的包,spring的注解扫描，我们需要扫描的是service层和dao层，不需要扫描Controller层，对service层和dao层使用依赖注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"zzu"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置要忽略的注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring框架的配置文件编写完之后，我们首先对spring框架进行测试。检测一下spring的配置是否起作用。</p>
<h5 id="我们配置完spring框架之后，就可以对service实现类进行依赖注入，在AccountServiceImpl-java中加入-Service（“accountService”）"><a href="#我们配置完spring框架之后，就可以对service实现类进行依赖注入，在AccountServiceImpl-java中加入-Service（“accountService”）" class="headerlink" title="我们配置完spring框架之后，就可以对service实现类进行依赖注入，在AccountServiceImpl.java中加入@Service（“accountService”）"></a>我们配置完spring框架之后，就可以对service实现类进行依赖注入，在AccountServiceImpl.java中加入@Service（“accountService”）</h5><p><img src="https://img-blog.csdnimg.cn/20190531162716128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>编写测试类，看spring配置文件，使用Junit单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//获取对象</span></span><br><span class="line">        AccountService as = (AccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        as.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果可以看到，spring配置正常加载</p>
<p><img src="https://img-blog.csdnimg.cn/2019053116551687.png" alt="在这里插入图片描述"></p>
<h1 id="3-springMVC框架的代码编写"><a href="#3-springMVC框架的代码编写" class="headerlink" title="3. springMVC框架的代码编写"></a>3. springMVC框架的代码编写</h1><p>首先编写springMVC的配置文件，springmvc.xml<br>springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描，只扫描Controller包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"zzu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器对象 往哪一个路径去跳转--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--需要解析的视图前缀文件路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--controller中返回的文件的后缀名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--前端控制器，哪些静态资源不拦截--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring开启注解mvc的支持  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在web-xml文件中配置加载springmvc-xml配置文件"><a href="#在web-xml文件中配置加载springmvc-xml配置文件" class="headerlink" title="在web.xml文件中配置加载springmvc.xml配置文件"></a>在web.xml文件中配置加载springmvc.xml配置文件</h2><p>web.xml文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 配置前端控制器：服务器启动必须加载，需要加载springmvc.xml配置文件 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 服务器启动的时候，让DispatcherServlet对象创建 --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在web-xml中配置DispatcherServlet过滤器解决中文乱"><a href="#在web-xml中配置DispatcherServlet过滤器解决中文乱" class="headerlink" title="在web.xml中配置DispatcherServlet过滤器解决中文乱"></a>在web.xml中配置DispatcherServlet过滤器解决中文乱</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置解决中文乱码的过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试SpringMVC的框架搭建是否成功"><a href="#测试SpringMVC的框架搭建是否成功" class="headerlink" title="测试SpringMVC的框架搭建是否成功"></a>测试SpringMVC的框架搭建是否成功</h2><h3 id="1-编写前端页面index-jsp"><a href="#1-编写前端页面index-jsp" class="headerlink" title="1.编写前端页面index.jsp"></a>1.编写前端页面index.jsp</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="account/findAll"&gt;查询账户&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-创建AccountController类，编写方法，进行测试"><a href="#2-创建AccountController类，编写方法，进行测试" class="headerlink" title="2. 创建AccountController类，编写方法，进行测试"></a>2. 创建AccountController类，编写方法，进行测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zzu.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> zzu.domain.Account;</span><br><span class="line"><span class="keyword">import</span> zzu.servlice.AccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户web层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找所有的账户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"web层查询所有的账户信息执行了"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-正确运行，springMVC框架配置正确"><a href="#3-正确运行，springMVC框架配置正确" class="headerlink" title="3.正确运行，springMVC框架配置正确"></a>3.正确运行，springMVC框架配置正确</h3><p><img src="https://img-blog.csdnimg.cn/20190601095033125.png" alt="在这里插入图片描述"></p>
<h1 id="4-Spring整合SpringMVC的框架"><a href="#4-Spring整合SpringMVC的框架" class="headerlink" title="4. Spring整合SpringMVC的框架"></a>4. Spring整合SpringMVC的框架</h1><p>spring整合springMVC框架的目的是，在controller层能调用service对象的方法，说明整合成功。</p>
<p><strong>上面步骤测试的时候，我们用Junit测试加载过spring的配置文件，能正常加载，但是我们需要在项目启动的时候就去加载spring的配置文件，这样才能进行依赖注入</strong><br>**<br>在项目启动的时候，就去加载applicationContext.xml的配置文件，在web.xml中配置 ContextLoaderListener监听器<br>（但是该监听器只能加载WEB-INF目录下的applicationContext.xml的配置文件，但是我们的配置文件放在了src下resources资源文件夹下，所以我们还需要配置配置文件的路径）。<br> **</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring的监听器，默认只加载WEB-INF目录下的applicationContext.xml配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置配置文件的路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>在controller中注入service对象，调用service对象的方法进行测试</strong><br>controller层<br><img src="https://img-blog.csdnimg.cn/20190601100044937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户web层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找所有的账户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"web层查询所有的账户信息执行了"</span>);</span><br><span class="line">        accountService.findAll();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果，service层的findall方法能成功执行，所用对象注入成功<br><img src="https://img-blog.csdnimg.cn/20190601095952620.png" alt="在这里插入图片描述"></p>
<h1 id="5-搭建mybatis框架代码"><a href="#5-搭建mybatis框架代码" class="headerlink" title="5. 搭建mybatis框架代码"></a>5. 搭建mybatis框架代码</h1><h3 id="1-在web项目中src下resources文件中编写SqlMapConﬁg-xml的配置文件，编写核心配置文件"><a href="#1-在web项目中src下resources文件中编写SqlMapConﬁg-xml的配置文件，编写核心配置文件" class="headerlink" title="1.在web项目中src下resources文件中编写SqlMapConﬁg.xml的配置文件，编写核心配置文件"></a>1.在web项目中src下resources文件中编写SqlMapConﬁg.xml的配置文件，编写核心配置文件</h3><p>SqlMapConﬁg.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--连接数据库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--持久层所在的包--&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 该包下所有的dao接口都可以使用 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"zzu.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：我们使用代理 dao的方式来操作持久层，所以此处 Dao的实现类就是多余的了</strong></p>
<p><strong>编写完mybatis的配置文件，我们需要mybatis配置文件是否能正常加载</strong> </p>
<p>首先我们需要在持久层Dao层进行查询语句的编写<br><strong>在AccountDao接口的方法上添加注解，编写SQL语句</strong><br>AccountDao.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zzu.dao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> zzu.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controllerDao层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找账户</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存账户信息</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into account (name,money) values(#&#123;name&#125;,#&#123;money&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>然后编写测试类，Junit测试</strong><br>testMybatis.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> zzu.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> zzu.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> zzu.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试账户查询的功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session= factory.openSession();</span><br><span class="line">        AccountDao dao = session.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Account&gt; list = dao.findAll();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加账户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//创建sqlsession对象</span></span><br><span class="line">        SqlSession session= factory.openSession();</span><br><span class="line">        <span class="comment">//获取AccountDao接口的代理对象</span></span><br><span class="line">        AccountDao dao = session.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"熊大"</span>);</span><br><span class="line">        account.setMoney(<span class="number">300</span>d);</span><br><span class="line">        dao.saveAccount(account);</span><br><span class="line"></span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过测试，程序能正常查询出数据库中account表中的信息，mybatis框架编写正确。下面就是把mybatis框架与spring框架进行整合。</p>
<h1 id="6-spring框架整合mybatis框架"><a href="#6-spring框架整合mybatis框架" class="headerlink" title="6. spring框架整合mybatis框架"></a>6. spring框架整合mybatis框架</h1><p>spring框架与mybatis框架整合的目的就是把mybatis框架的配置文件sqlMapconfig.xml加载进spring配置文件applicationContext.xml文件中</p>
<p><strong>添加过mybatis配置信息的spring配置文件applicationContext.xml完整文件如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置不需要注解扫描的包,spring的注解扫描，我们需要扫描的是service层和dao层，不需要扫描Controller层，对service层和dao层使用依赖注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"zzu"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置要忽略的注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Spring整合MyBatis框架--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置SqlSessionFactory工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AccountDao接口所在包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScanner"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"zzu.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Spring框架声明式事务管理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* zzu.servlice.impl.*ServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：把mybatis的配置信息添加进spring进行管理之后，mybatis的配置文件sqlMapConfig.xml配置文件中，sqlMapConfig.xml的配置文件就可以删除不用了。只需要用applicationContext.xml就可以了</p>
<p>** 在AccountDao接口中添加@Repository注解**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zzu.dao;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> zzu.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controllerDao层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找账户</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存账户信息</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into account (name,money) values(#&#123;name&#125;,#&#123;money&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在AccountServiceImpl.java中</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zzu.servlice.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> zzu.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> zzu.domain.Account;</span><br><span class="line"><span class="keyword">import</span> zzu.servlice.AccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">//查找所有的账户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是service业务层的操作"</span>);</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存账户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在AccountControlle.java中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户web层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找所有的账户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"web层查询所有的账户信息执行了"</span>);</span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把查询的结果，在返回的list.jsp页面进行展示<br>list.jsp页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></span><br><span class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">Lei</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2019</span>/<span class="attr">6</span>/<span class="attr">1</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Time:</span> <span class="attr">9:49</span></span></span><br><span class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></span><br><span class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">isELIgnored</span>=<span class="string">"false"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>查询出所有的账户信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;list&#125;"</span> <span class="attr">var</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    $&#123;account.name&#125;</span><br><span class="line">    $&#123;account.money&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190601105034370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>能正常运行，执行成功</p>
<p><strong>以上框架整合完毕，但是只是执行查询操作，如果想进行插入更新操作，还需要配置事务</strong><br>在刚才applicationContext.xml文件中已经声明过，在这里重复声明：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring框架声明式事务管理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* zzu.servlice.impl.*ServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>保存更新操作<br>index.jsp中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>测试保存操作<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"account/saveAccount"</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"保存"</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>AccountController.java中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/saveAccount"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        accountService.saveAccount(account);</span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">"/account/findAll"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>到此，经过测试，三个框架都能正常运行，框架整合完毕。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器化</title>
    <url>/2019/01/02/Docker%E5%AE%B9%E5%99%A8%E5%8C%96/</url>
    <content><![CDATA[<h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1. Docker简介"></a>1. Docker简介</h1><h2 id="1-1-什么是Docker"><a href="#1-1-什么是Docker" class="headerlink" title="1.1 什么是Docker"></a>1.1 什么是Docker</h2><ul>
<li>从传统意思上来讲也是一种虚拟化技术。    </li>
</ul>
<ul>
<li>Docker项目的目标是实现一种轻量级的操作系统解决方案。Docker的基础是Linux容器LXC等技术。Docker方便了环境的部署和安装。</li>
</ul>
<a id="more"></a>

<p><strong>Docker的优点：</strong>  </p>
<ul>
<li>如果使用Docker 只需要把别人安装好的镜像拉去下来就可以直接使用，上手方便。</li>
</ul>
<ul>
<li>鼓励使用面向服务的架构，绝大多数的微服务都是通过Docker来进行部署的。</li>
</ul>
<ul>
<li>传统的虚拟机我们需要分配本机的硬件配置资源，在本机上配置虚拟机的数量是有限制的。</li>
</ul>
<ul>
<li>但是使用Docker是共享我们主机的资源。</li>
</ul>
<h2 id="1-2-Docker组件"><a href="#1-2-Docker组件" class="headerlink" title="1.2 Docker组件"></a>1.2 Docker组件</h2><ol>
<li>客户端和服务器端  </li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Docker是一个客服端服务器架构CS架构程序，Docker客户端只需要向Docker服务器或者是守护进程发出请求，服务器或者是守护进程将完成所有工作并返回结果。Docker提供了一套命令行工具以及RESTful API、你可以在任意一台宿主主机上运行Docker守护进程和客户端。<br>&nbsp;&nbsp;&nbsp;&nbsp;Docker守护进程就是Docker的服务端，主要是管理Docker容器的。Docker客户端主要是为了连接Docker的守护进程，通过客户端来进行操作Docker容器。</p>
<ol start="2">
<li>Docker镜像和容器</li>
</ol>
<p>镜像是构建Docker的基石，用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的构建部分。例如我们可以通过一个MySQL镜像来创建多个MySQL容器。<br>镜像相当于我们创建的类，容器相当于我们通过类创建的对象。</p>
<h1 id="2-安装docker"><a href="#2-安装docker" class="headerlink" title="2. 安装docker"></a>2. 安装docker</h1><p>在CentOS下安装Docker<br>（1）首先yum包更新到最新  </p>
<pre><code>Sudo  yum  update</code></pre><p>（2）安装需要的软件包，<br>yum-util 提供 yum-config-，anager功能，另外两个是devicemapper驱动依赖的</p>
<pre><code>Sudo  yum  install -y yum-utils  device-mapper-persistent-data  lvm2</code></pre><p>（3）设置yum源为阿里云</p>
<pre><code>Sudo yum-config-manager  --add-repo  http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre><p>（4）安装docker</p>
<pre><code>Sudo yum install  docker-ce</code></pre><p>（5）安装后查看docker的版本</p>
<pre><code>Docker  -v</code></pre><p><strong>设置USTC的镜像</strong><br> USTC是老牌的Linux镜像服务的提供者了。USTC docker mirror 的优势之一就是不需要注册，值真正的公共服务。<br>编辑该文件：</p>
<pre><code>Vi /etc/docker/daemon.json</code></pre><p>在该文件中输入如下内容：</p>
<pre><code>{
“registry-mirrors”:[“https://docker.mirror.ustc.edu.cn”]
}</code></pre><p>启动Docker</p>
<pre><code>Systemctl start docker</code></pre><p>停止Docker</p>
<pre><code>Systemctl stop docker</code></pre><p>重启docker</p>
<pre><code>Systemctl  restart docker</code></pre><p>查看docker的状态</p>
<pre><code>systemctl status docker</code></pre><p>设置开机自启动</p>
<pre><code>Systemctl  enable  docker</code></pre><h1 id="3-镜像相关的命令"><a href="#3-镜像相关的命令" class="headerlink" title="3. 镜像相关的命令"></a>3. 镜像相关的命令</h1><p>查看镜像   docker  images 可以查看我们已经安装好的镜像</p>
<p>搜索镜像  docker search centos    我们可以基于搜索的结果进行镜像的下载</p>
<p>针对搜索的结果各个属性的名称进行说明<br>Name是仓库名称，<br>DESCRIPTION:镜像描述<br>STARS:用户的评价<br>OFFICIAL：是否是官方提供的镜像。<br>ATTOMATED  是否是docker hub 自动创建流程所创建的</p>
<p><strong>拉取镜像：</strong><br>拉取镜像就是从中央仓库中下载镜像到本地</p>
<pre><code>docker pull 镜像名称</code></pre><p>例如需要下载centos7镜像 </p>
<pre><code>docker pull centos：7</code></pre><p>删除镜像：</p>
<p>按照镜像id进行删除镜像</p>
<pre><code>Docker rmi 镜像ID</code></pre><p>删除所有的镜像</p>
<pre><code>Docker rmi  `docker images -q`  (注意这里不是单引号)</code></pre><p>#4. 容器相关的命令</p>
<pre><code>[root@iZwz92dpr9gpgasbo4gg15Z lib]# docker ps</code></pre><p>可以查看运行中的容器</p>
<p>创建与启动容器</p>
<pre><code>创建容器命令  docker run
-i ：表示运行容器
-t ：表示容器启动后会进入命令行。加入这两个参数后，容器创建就能登录进去，即分配一个伪终端。
--name   ：为创建的容器命名
-v ：表示目录映射</code></pre><p>（1）交互式方式创建容器</p>
<pre><code>Docker run -it --name=容器名称  镜像名称：标签/bin/bash</code></pre><p>创建好后我们可以通过ps命令查看，可以看到启动的容器。</p>
<pre><code>Docker run -i -t --name=mycentos centos:7 /bin/bash

[root@iZwz92dpr9gpgasbo4gg15Z ~]# docker  run -i -t --name=mycentos centos /bin/bash
[root@e4202738a947 /]# ^C
[root@e4202738a947 /]# </code></pre><p>这个时候我们可以发现，前面的名称不一样了，说明我们现在已经进入centos这个容器中了</p>
<p>我们查看目录，也可以发现和宿主机的目录结构一样，说明我们是在宿主机的基础上又虚拟了一台服务器。<br>我们重新打开窗口可以看到</p>
<pre><code>Docker ps 命令
[root@iZwz92dpr9gpgasbo4gg15Z lib]# docker ps
CONTAINER IDIMAGE   COMMAND CREATED STATUS  PORTS   NAMES
e4202738a947centos  &quot;/bin/bash&quot; 4 minutes ago   Up 4 minutesmycentos</code></pre><p>可以对docker的运行状态进行查看。<br>我们在docker虚拟机上运行exit 然后我们就退回到宿主机上了<br>退出宿主机之后，docker是运行还是关着的？然后我们通过ps命令查看，发现容器处于关闭状态。<br>*<em>结论：如果我们通过交互式的命令来创建容器，当我们使用exit命令退出之后，随之的容器也进行自动关闭状态。  *</em></p>
<p>（2）以守护式方式来创建容器</p>
<pre><code>docker run -di --name=容器名称  镜像名称：标签</code></pre><p>登录守护式容器方式：</p>
<pre><code>Docker exec -it 容器名称（或者是容器ID） /bin/bash

[root@iZwz92dpr9gpgasbo4gg15Z ~]# docker run -di --name=mycentos2 centos
4a7d23fda453c40b61138e63753e84833069fd79a9af82de03f6ceab52d50e16
[root@iZwz92dpr9gpgasbo4gg15Z ~]# </code></pre><p>出现字符串说明容器创建成功。<br>我们的命令行还是处于宿主机的状态，这个时候我们通过docker ps命令来查看容器状态</p>
<p><strong>如何进入容器呢？</strong>  </p>
<pre><code>ocker exec -it 容器名称 /bin/bash

Docker exec -it mycentos2  /bin/bash
[root@iZwz92dpr9gpgasbo4gg15Z ~]# docker exec -it mycentos2 /bin/bash
[root@4a7d23fda453 /]# ^C</code></pre><p>这个时候如果我们通过exit命令退出容器之后，然后通过docker ps命令查看所有运行的容器，我们可以发现，容器还是处于运行状态。</p>
<p>这就是两种创建方式的区别</p>
<h2 id="4-1停止与启动容器"><a href="#4-1停止与启动容器" class="headerlink" title="4.1停止与启动容器"></a>4.1停止与启动容器</h2><p>停止容器：</p>
<pre><code>Docker stop 容器名称（或者容器ID）</code></pre><p>启动容器：</p>
<pre><code>docker start 容器名称（或者容器ID） 

[root@iZwz92dpr9gpgasbo4gg15Z ~]# docker ps -a
CONTAINER IDIMAGE   COMMAND CREATED STATUS  PORTS   NAMES
4a7d23fda453centos  &quot;/bin/bash&quot; 8 minutes ago   Up 8 minutesmycentos2
e4202738a947centos  &quot;/bin/bash&quot; 21 minutes ago  Exited (1) 15 minutes ago   mycentos
[root@iZwz92dpr9gpgasbo4gg15Z ~]# docker stop 4a7d23fda453 </code></pre><h2 id="4-2-文件拷贝"><a href="#4-2-文件拷贝" class="headerlink" title="4.2 文件拷贝"></a>4.2 文件拷贝</h2><p>有时候我们需要把文件或者是目录拷贝进容器中，或者是把容器中的文件拷贝出来。<br>文件拷贝进容器命令cp  </p>
<pre><code>docker cp 需要拷贝的文件或者目录  容器名称：容器目录</code></pre><p>也可以将文件从容器中拷贝出来</p>
<pre><code>docker cp 容器名称：容器目录  需要拷贝的文件或目录</code></pre><p>都是在宿主机上户进行操作</p>
<h2 id="4-3-目录挂载"><a href="#4-3-目录挂载" class="headerlink" title="4.3 目录挂载"></a>4.3 目录挂载</h2><p>我们进行上面文件拷贝的时候操作容器中的或者是宿主机中的内容时，有事不是很方便的操作，这个时候我们可以通过目录挂载的方式进行操作。  </p>
<p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机中的某个目录文件从而去影响容器。<br>创建容器  添加-v参数  后边为宿主机目录：容器目录  例如  </p>
<pre><code>Docker run -di -v /usr/local/myhtml :/usr/local/myhtml --name=mycentos3 centos</code></pre><p>注意：如果你共享的是多级目录，可能会出现权限不足的提示<br>这是因为centos中的安全模式selinux把权限禁掉了，我们需要添加参数 –privileged=true 来解决挂载的目录没有权限的问题。</p>
<h2 id="4-4-查看容器IP地址"><a href="#4-4-查看容器IP地址" class="headerlink" title="4.4 查看容器IP地址"></a>4.4 查看容器IP地址</h2><p>我们可以通过以下命令来查看容器运行中的各种数据</p>
<p><code>Docker inspect 容器名称 （容器ID）</code>  </p>
<p>也可以直接执行下面的命令直接输出IP地址</p>
<pre><code>Docker  inspect --format=’{{.NetworkSettings.IPAddress}}’ 容器名称 （容器ID）</code></pre><h2 id="4-5-删除容器"><a href="#4-5-删除容器" class="headerlink" title="4.5 删除容器"></a>4.5 删除容器</h2><p>Docker   rm 容器名称（容器ID）  </p>
<p>如果容器是正在运行中无法进行删除。</p>
<h1 id="5-应用部署"><a href="#5-应用部署" class="headerlink" title="5. 应用部署"></a>5. 应用部署</h1><p>##5.1 MySQL部署<br>（1）拉取MySQL镜像  </p>
<pre><code>Docker pull  centos/mysql-57-centos7</code></pre><p>（2）创建容器</p>
<pre><code>Docker run -di --name=tensquare_mysql -p 33306:3306  -e  MYSQL_ROOT_PASSWORD=123456 mysql</code></pre><ul>
<li>-p ：代表端口映射吗，格式为宿主机映射端口：容器运行端口  </li>
<li>-e ：代表添加环境变量，MYSQL_ROOT_PASSWORD是root用户的登录数据库的密码  </li>
</ul>
<p>（3）进入mysql容器  </p>
<pre><code>Docker exec -it tensquare_mysql /bin/bash</code></pre><p>（4）登录mysql  </p>
<pre><code>Mysql -u root -p</code></pre><p>创建mysql容器：  </p>
<pre><code>[root@iZwz92dpr9gpgasbo4gg15Z local]# docker run -di --name=tensquare_mysql -p 33306:3306  -e  MYSQL_ROOT_PASSWORD=123456 centos/mysql-57-centos7
0babaf900514d06b02ffdec0a51ca1ad32d7e2cb7f8753b804740502ad95c764
[root@iZwz92dpr9gpgasbo4gg15Z local]# docker ps -a</code></pre><p>我们可以通过宿主机的端口映射，通过访问宿主机的方式来进行访问容器</p>
<h2 id="5-2-Tomacat部署"><a href="#5-2-Tomacat部署" class="headerlink" title="5.2 Tomacat部署"></a>5.2 Tomacat部署</h2><p>（1）拉取镜像  </p>
<pre><code>Docker pull tomcat：7-jre7</code></pre><p>（2）创建容器<br>创建容器  -p表示地址映射</p>
<pre><code>Docker run  -di --name=mytomcat  -p 9000:8080
-v /usr/local/webapps:/usr/local/tomcat/webapps  tomcat:7-jre7</code></pre><p>这里为了项目很好的部署我们可以做一个项目映射主机usr/local/webapps映射容器内的usr/local/tomcat/webapps   如果没有文件会自动创建</p>
<h2 id="5-3-Nginx部署"><a href="#5-3-Nginx部署" class="headerlink" title="5.3 Nginx部署"></a>5.3 Nginx部署</h2><p>（1）拉取镜像  </p>
<pre><code>Docker pull nginx</code></pre><p>（3）创建nginx容器</p>
<pre><code>Docker run -di --name=mynginx -p 80:80 nginx</code></pre><h2 id="5-4-Redis部署"><a href="#5-4-Redis部署" class="headerlink" title="5.4  Redis部署"></a>5.4  Redis部署</h2><p>（1）拉取镜像  </p>
<pre><code>Docker pull redis</code></pre><p>（2）创建容器</p>
<pre><code>Docker run -di --name=myredis -p 6379:6379  redis</code></pre><h1 id="6-迁移和备份"><a href="#6-迁移和备份" class="headerlink" title="6. 迁移和备份"></a>6. 迁移和备份</h1><h2 id="6-1-容器保存为镜像"><a href="#6-1-容器保存为镜像" class="headerlink" title="6.1 容器保存为镜像"></a>6.1 容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p>
<pre><code>Docker commit mynginx mynginx_i
mynginx是容器名称 mynginx_i表示镜像名称要保存为的镜像。</code></pre><h2 id="6-2-镜像备份"><a href="#6-2-镜像备份" class="headerlink" title="6.2 镜像备份"></a>6.2 镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar文件。可以在另一台机器上进行部署</p>
<pre><code>Docker save -o  mynginx.tar  mynginx_i  
mynginx_i  表示镜像的名称</code></pre><p>我们在另一台机器上可以进行压缩文件转化为镜像</p>
<pre><code>Docker  load -i mynginx.tar文件名称   这个时候就可以把文件恢复成镜像</code></pre><h1 id="6-Dockerfile"><a href="#6-Dockerfile" class="headerlink" title="6. Dockerfile"></a>6. Dockerfile</h1><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。基础镜像一般是系统级的镜像，比如我们可以在centos镜像的基础上再配置其他的镜像。我们构建镜像一般是在一个镜像的基础上创建另一个镜像。</p>
<ol>
<li>对于开发人员：可以为开发团队提供一个完全一致的开发环境</li>
<li>对于测试人员：可以直接拿开发时所构建的镜像或者通过dockerfile文件构建一个新的镜像开始工作了</li>
<li>对于运维人员：在部署时，可以实现应用的无缝移植</li>
</ol>
<h2 id="6-1-常用命令"><a href="#6-1-常用命令" class="headerlink" title="6.1 常用命令"></a>6.1 常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>FROM image_name.tag</td>
<td>定义了使用哪个基础镜像构建流程</td>
</tr>
<tr>
<td>MAINTAINER  user_name</td>
<td>声明镜像的创建者</td>
</tr>
<tr>
<td>ENV key value</td>
<td>设置环境变量（可以写多条）</td>
</tr>
<tr>
<td>RUN command</td>
<td>是Dikerfile的核心部分（可以写多条）</td>
</tr>
<tr>
<td>ADD source_dir/file dest_dir/file</td>
<td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td>
</tr>
<tr>
<td>COPY source_dir/file dest_dir/file</td>
<td>和ADD相似，但是如果有压缩文件并不能进行压缩</td>
</tr>
<tr>
<td>WORKDIR path_dir</td>
<td>设置工作目录</td>
</tr>
</tbody></table>
<p>下面我们通过dockerfile来构建一个镜像，jdk的镜像 使用的基础镜像是centos7镜像  </p>
<pre><code>首先创建一个文件
[root@iZwz92dpr9gpgasbo4gg15Z ~]# mkdir -p /usr/local/dockerjdk8</code></pre><p> 我们在这个文件下进行dockerfile 来创建一个镜像，并把jdk8的压缩包也放进这个文件下<br>使用ftp上传工具把jdk压缩包放进这个文件夹下</p>
<pre><code>sftp:/usr/local/mytestdocker&gt; put E:\CHDEvaluation.war
然后把jdk压缩包放进dockerjdk8这个文件下</code></pre><p>然后创建文件，这个名称必须是Dockerfile  D是大写的<br>    [root@iZwz92dpr9gpgasbo4gg15Z dockerjdk8]# vi Dockerfile<br>    Dockerfile</p>
<p>我们可以在Dockerfile文件中增加以下内容：</p>
<pre><code>FROM centos:7           #基础镜像
MAINTAINER leikaibo     #作者名称
WORKDIR /usr            
RUN mkdir /usr/local/javatest
ADD jdk-8u191-linux-i586.tar.gz /usr/local/javatest  #把我们上传的文件添加到目录中
# 以下是设置环境变量
ENV JAVA_HOME=/usr/local/javatest/jdk1.8.0_191
ENV JRE_HOME=$JAVA_HOME/jre
ENV CLASSPATH $JAVA_HOME/bin/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH
ENV PATH $JAVA_HOME/bin:$PATH
~   </code></pre><p>然后执行命令</p>
<pre><code>docker build -t=&apos;jdk1.8&apos; .   -t代表指定镜像的名称   .代表去当前目录中去找Dockerfile文件</code></pre><p>执行完之后，我们可以通过docker images来查看镜像</p>
<pre><code>[root@iZwz92dpr9gpgasbo4gg15Z dockerjdk8]# docker images</code></pre><p>REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE<br>jdk1.8                    latest              baa98f17d615        16 seconds ago      599MB<br>nginx                     latest              e445ab08b2be        2 weeks ago         126MB<br>tomcat                    7-jre7              47c156f4d4e3        2 months ago        359MB<br>centos/mysql-57-centos7   latest              e35b3f7a4ea0        4 months ago        452MB<br>centos                    7                   9f38484d220f        4 months ago        202MB<br>centos                    latest              9f38484d220f        4 months ago        202MB</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Docker容器化</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell编程</title>
    <url>/2018/06/01/Shell%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p> <font size=6 face="">Shell编程</font></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Shell是一个命令行解释器,它为用户提供了一个向 Linux内核发送请求以便运行程序的界面系统级程序,用户可以用Shl来启动、挂起、停止甚至是编写一些程序。  </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Shell还是一个功能相当强大的编程语言,易编写,易调试,灵活性较强。Shel是解释执行的脚本语言,在Shel中可以直接调用 Linux系统命令。</p>
<a id="more"></a>


<h1 id="一、Shell基础"><a href="#一、Shell基础" class="headerlink" title="一、Shell基础"></a>一、Shell基础</h1><h2 id="1-第一个脚本"><a href="#1-第一个脚本" class="headerlink" title="1. 第一个脚本"></a>1. 第一个脚本</h2><h3 id="1-输出命令："><a href="#1-输出命令：" class="headerlink" title="1. 输出命令："></a>1. 输出命令：</h3><pre><code>echo 【选项】 【输出内容】  
选项   -e  加上-e表示支持反斜线控制的字符转换</code></pre><h3 id="2-第一个脚本"><a href="#2-第一个脚本" class="headerlink" title="2. 第一个脚本"></a>2. 第一个脚本</h3><pre><code>vi hello.sh  
\#!/bin/Bash  表示写的脚本是shell脚本--主要是声明作用在这里#不是注释
\#leikaibi   这里的#表示注释功能  
echo  -e     “这里写需要打印的内容”  
保存退出</code></pre><h3 id="3-执行脚本"><a href="#3-执行脚本" class="headerlink" title="3. 执行脚本"></a>3. 执行脚本</h3><pre><code>1. 赋予执行权限，chmod 755 hello.sh 命令 赋予脚本hello.sh脚本执行权限。然后通过路径/hello.sh来执行
2. 第二种方式。通过 bash hello.sh 来执行。</code></pre><p>注意：如果运行在Windows下编写的脚本，会提示文件格式错误，这个时候我们就需要对文本中出现的特殊字符进行格式转换，直接在Linux命令行运行<br>dos2unix  【文件名】  这个时候就可以对该文件进行格式转换（如果这个命令没有安装，使用yum -y install dos2unix  进行安装就可以）</p>
<h2 id="2-base的基本功能"><a href="#2-base的基本功能" class="headerlink" title="2. base的基本功能"></a>2. base的基本功能</h2><h3 id="1-历史命令和命令补全功能"><a href="#1-历史命令和命令补全功能" class="headerlink" title="1. 历史命令和命令补全功能"></a>1. 历史命令和命令补全功能</h3><pre><code>history 可以查询所有的历史命令  
history 【选项】【历史命令保存文件】  
vi  .bash_history   可以查看所有的历史命令保存文件  
按一下tab 键进行代码的补全    按两下tab键  可以对所有需要补全的代码进行罗列展示</code></pre><h3 id="2-命令别名与快捷键"><a href="#2-命令别名与快捷键" class="headerlink" title="2. 命令别名与快捷键"></a>2. 命令别名与快捷键</h3><pre><code>alias  别名 =&apos;原命令&apos;   # 设置命令别名  
alias  vi =‘vim’  
这种别名只会临时生效，如果想要别名永久生效  需要更改配置文件

**快捷键**  

Ctrl  + C 强制终止当前的命令  
Ctrl  + L 清屏，相当于clear命令  
Ctrl  + U 删除或者剪切光标之前的命令。如果是输入了一个很长的命令不需要使用退格键一个一个的删除，使用这个快捷键更加的方便。  
Ctrl  + K 删除或者剪切光标之后的内容  
Ctrl  + Y 粘贴Ctrl  + U 或者Ctrl  + K 剪切的内容  
Ctrl  + D 退出当前终端    </code></pre><h3 id="3-输入输出与重定向"><a href="#3-输入输出与重定向" class="headerlink" title="3. 输入输出与重定向"></a>3. 输入输出与重定向</h3><pre><code>输出重定向  

    就是把原本应该输出到屏幕上内容输出到文件保存在文件中</code></pre><p>​<br>​    | 动作        | 命令    |说明|<br>​    | —— |:——–:| :—–:|<br>​    | 标准输出重定向 | 命令 &gt; 文件名 | 以覆盖的方式，把命令的正确输出，输出到制定的文件或者是设备中 |<br>​    |    标准输出重定向  | 命令 &gt;&gt; 文件名     |   以追加的方式，把命令的正确输出，输出到指定的文件或者是设备中 |<br>​    | 标准错误输出重定向 |错误命令 2&gt; 文件名 |    以覆盖的方式，把命令的错误输出，输出到指定的文件或者是设备中。 |<br>​    | 标准错误输出重定向 | 错误命令 2&gt;&gt;文件名     | 以追加的方式，把命令的错误输出，输出到指定的文件或者是设备中。|</p>
<p>​<br>​    例如：执行  ls命令，我们就可以对ls命令输出的内容进行保存。ls &gt;abc  就代表把ls要输出的内容保存到文件abc中，如果是 ls&gt;&gt; abc 就会把输出的内容追加到文件abc中。<br>​     注意：如果命令格式错误，就需要在&gt;前加上2  例如 lst  2&gt; abc<br>​<br>    但是在实际的使用过程中，我们不会提前知道命令格式是正确的还是错误的，所以以上两种命令的用处不大。<br>    ===通常使用的是以下命令，把正确命令和错误命令都可以同时的保存：</p>
<pre><code>| 动作        | 命令    |说明|
| ------ |:--------:| :-----:|
| 正确输出和错误输出同时保存 | 命令 &gt; 文件名 | 以覆盖的方式，把命令的正确输出，输出到制定的文件或者是设备中 |
|    正确输出和错误输出同时保存  | 命令 &gt;&gt; 文件名     |   以追加的方式，把命令的正确输出，输出到指定的文件或者是设备中 |</code></pre><p>​<br>​    <strong>输入重定向</strong><br>​<br>    本来的输入是通过键盘直接输入的，现在我们通过文件的方式来输入，这就是输入重定向。<br>    命令格式：  </p>
<pre><code>wc 【选项】【文件名】  
选项：    -c 统计字节数  
-w 统计单词数  
-l 统计行数  </code></pre><h3 id="4-多命令顺序执行与管道符"><a href="#4-多命令顺序执行与管道符" class="headerlink" title="4. 多命令顺序执行与管道符"></a>4. 多命令顺序执行与管道符</h3><pre><code>命令；命令   多个命令顺序执行，命令之间没有逻辑联系 
命令1  &amp;&amp; 命令2  逻辑与  命令1执行完之后，命令2才会继续往下执行

**管道符**  
命令1 |  命令2   命令1的正确输出作为命令2的操作对象</code></pre><h3 id="5-通配符和特殊符号"><a href="#5-通配符和特殊符号" class="headerlink" title="5. 通配符和特殊符号"></a>5. 通配符和特殊符号</h3><pre><code>？  匹配一个任意字符  
\*   匹配0个或者多个任意字符，也就是 可以匹配任何内容

[ ]  匹配中括号中任意一个字符，例如：[abc] 代表一定匹配一个字符，或者是a，或者是b，或者是c。  
[ - ] 匹配 括号中任意一个字符，- 代表一个范围，例如 [a-z] 代表匹配一个小写的字母  

**Bash中的其他特殊符号**

‘ ’ 单引号，在单引号中的所有的特殊符号   如 “$” “\” 都是没有特殊含义的  
“ ” 双引号  在双引号中特殊符号都是没有特殊含义。但是”$” “\”  是例外的。拥有调用变量的值。    

  例如给变量赋值  name = sc

‘ ’  反引号的作用，反引号括起来的是系统命令。在bash中会优先的执行它。它的作用和$() 作用是一样的，不过推荐使用的是$() ，因为反引号在使用的过程中容易看错。  


\#  在bash中  #开头的代表注释

$  在调用变量的值，如果需要调用变量的的值的时候，需要使用$加变量名  的方式来获取到变量的值。</code></pre><h2 id="3-Bash的变量"><a href="#3-Bash的变量" class="headerlink" title="3. Bash的变量"></a>3. Bash的变量</h2><h3 id="1-用户自定义变量"><a href="#1-用户自定义变量" class="headerlink" title="1. 用户自定义变量"></a>1. 用户自定义变量</h3><pre><code>&amp;emsp;&amp;emsp;在bash中，变量的默认类型都是字符串类型的，如果要进行数值运算，就需要指定变量 类型为数值型。  

**注意：**



- 变量是用等号连接，而且等号左右两端不能有空格
- 变量的值如果有空格，需要使用单引号或者是双引号包括
- 在变量的值中，可以使用  \  转义符
- 如果是把命令的结果作为变量赋值给变量，则需要使用单引号或者是$() 包括命令  

变量的定义：

比如定义一个变量名为name的变量  name =” hello bianliang”,调用的时候，我们可以使用echo来调用   
  echo $name  

![](https://i.imgur.com/VcpmtBC.jpg)

    name=&quot;hello bianliang&quot;
    echo $name
    输出结果：hello bianliang

调用的时候只需要记住，在变量名之前加$符号  
变量查看   set  
变量删除  unset  name  </code></pre><h3 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2. 环境变量"></a>2. 环境变量</h3><pre><code>主要保存的是和系统操作环境相关的数据。  

用户自定义变量只在当前的shell中生效，而环境变量会在当前shell和这个shell的所有子shell中生效，如果把环境变量写入相应的 配置文件中那么这个环境变量就会在所有的shell中生效。

**设置环境变量**

Export 变量名=变量值    #申明变量  

例如我们定义两个变量    
name=lei  
export sex =nan
我们通过set命令查看变量就会查看到两个已经定义好的变量，但是这个时候如果我们再进入一个bash（通过命令bash 进入， 我们可以通过pstree来查看进程数）

env  # 专门的用来查看变量的命令  
Unset  变量名  #  删除环境变量</code></pre><h3 id="3-位置参数变量"><a href="#3-位置参数变量" class="headerlink" title="3. 位置参数变量"></a>3. 位置参数变量</h3><p>这种变量只要是用来向脚本当中传递参数或者是数据的，变量名不能自己定义，变量的作用是固定的，只能更改里面的值</p>
<pre><code>| 位置参数变量        | 作用    |
| ------ |:--------:|
| $n | n在这里代表的是数字，$0 代表命令本身，$1--$9 代表的是第一到第九个参数，十个以上的参数需要用大括号 例如${10} 
| $*   | 这个命令代表命令行中所有的参数，$* 把所有的参数看成一个整体   
| $@  |这个命令也代表的是命令行中所有的参数，不过不同的是$@ 把每个参数区别对待
| $# | 这个命令代表命令行中所有参数的 个数</code></pre><p>我们通过一个简单的例子来查看一个使用方法，我们写一个bash<br>&nbsp;Canshu.sh定义两个参数，然后输出两个参数的和<br>    #!/bin/bash<br>    sum1=$1<br>    sum2=$2<br>    sum=$(($sum1+$sum2))<br>    echo “sum is : $sum”  </p>
<pre><code>然后使用命令echo 给这个sh 赋予执行权限
Chmod  755 canshu.sh</code></pre><p>执行canshu.sh  并向这个sh传入两个参数 11  22  求和<br>[root@iZwz92dpr9gpgasbo4gg15Z sh]# ./canshu.sh 11 22<br><strong>下面通过一个简单的sh来看一个几个位置参数的区别。</strong><br>Canshu2.sh</p>
<pre><code>\#!/bin/bash
echo $#
echo $*
echo $@
赋予执行权限 [root@iZwz92dpr9gpgasbo4gg15Z sh]# chmod 755 canshu2.sh
输出结果：
[root@iZwz92dpr9gpgasbo4gg15Z sh]# ./canshu2.sh 11 22 33 44 55 66
6
11 22 33 44 55 66
11 22 33 44 55 66</code></pre><p> 注意：$* 和$@的区别，具体的区别可以在for  循环中看出<br>$*中的所有参数看成是一个整体，所有在for循环中只会循环一次<br>$@ 中的每个参数都看成是相互独立的，所以$@ 中有几个参数，就会循环几次</p>
<p>例如：<br>    #!/bin/bash</p>
<pre><code>for x in &quot;$*&quot;
do
echo $x
done

for y in &quot;$@&quot;
do
echo $y 
done</code></pre><p>运行结果：<br>    [root@iZwz92dpr9gpgasbo4gg15Z sh]# chmod 755 canshu3.sh<br>    [root@iZwz92dpr9gpgasbo4gg15Z sh]# ./canshu3.sh 1 2 3 4 5<br>    1 2 3 4 5<br>    1<br>    2<br>    3<br>    4<br>    5</p>
<p>###4.预定义变量</p>
<pre><code>| 预定义变量       | 作用    |
| ------ |:--------:|
| $?| 最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令是正确的；如果这个变量的值是非0（具体是哪一个数，由命令自己决定），则证明上一个命令执行不正确了。|
| $$  | 当前进程的进程号|    
| $!  | 后台运行的最后一个进程的进程号(PID)|   </code></pre><p>例如使用echo $?  我们就可以打印出  来看看上一条命令是否正确执行<br>Echo $$  查看当前进程号pid</p>
<p><strong>接受键盘输入</strong><br>Read【选项】【变量名】<br>选项：-p   提示信息—在等待read输入时，输出提示信息<br>-t 秒数   read命令会一直等待用户输入，使用此选项可以指定等待时间<br>-n 字符数： read命令只接受指定的字符数， 就会在执行<br>-s   隐藏输入的数据，适用于机密信息的输入  </p>
<h2 id="4-base的运算符"><a href="#4-base的运算符" class="headerlink" title="4.base的运算符"></a>4.base的运算符</h2><h3 id="1-数值运算和运算符"><a href="#1-数值运算和运算符" class="headerlink" title="1. 数值运算和运算符"></a>1. 数值运算和运算符</h3><p>Declare 声明变量类型<br>    declare 【+/-】【选项】【变量名】<br>    - 给变量设定类型属性<br>    + 取消变量的类型属性<br>    -i 将变量声明为整数型（integer）<br>    -x 将变量声明为环境变量<br>    -p 显示指定变量的被生命的类型  </p>
<p><strong>数值运算：</strong><br>方法一：<br>       aa=11<br>    bb=22<br>    declare -i cc=$aa+$bb  #将变量aa和bb 进行数值运算、<br>方法二：使用expr或者let数值运算工具<br>方法三：使用 $（（运算式）） 或者是 $[运算式]<br>ff =$(($aa+$bb))<br>推荐 使用方法三</p>
<h3 id="2-变量测试和内容替换"><a href="#2-变量测试和内容替换" class="headerlink" title="2.变量测试和内容替换"></a>2.变量测试和内容替换</h3><p>主要的作用是通过判断x的值来判断y是否有值</p>
<p>##5. 环境变量配置文件<br>1.环境变量配置文件简介<br>Source命令<br>Source 配置文件或者  .配置文件  </p>
<p>环境变量配置文件中主要是定义对系统的操作环境生效的系统默认环境变量，<br>比如PATH HISTZIZE  PSI  HOSTNAME等默认环境变量<br>2.环境变量配置文件作用</p>
<pre><code> /etc/下的环境变量对所有的用户都是生效的  
/etc/profile  
/etc/profile.d/*.sh  </code></pre><h1 id="二、Shell编程"><a href="#二、Shell编程" class="headerlink" title="二、Shell编程"></a>二、Shell编程</h1><h2 id="1-基础正则表达式"><a href="#1-基础正则表达式" class="headerlink" title="1. 基础正则表达式"></a>1. 基础正则表达式</h2><p>正则表达式和通配符</p>
<ul>
<li>正则表达式用来在文件中匹配符合条件的字符串,正则是包含匹配。grep、awk、sed等命令可以支持正则表达式。</li>
</ul>
<ul>
<li>通配符用来匹配符合条件的文件名，通配符是完全匹配。ls、find、cp这些命令不支持正则表达式,所以只能使用shell自己的通配符来进行匹配了。  </li>
</ul>
<ul>
<li>通配符匹配的是文件名，正则表达式是指在一个文件中搜索符合要求的字符串</li>
</ul>
<p><strong>基础正则表达式</strong>   </p>
<ul>
<li>前一个字符匹配0次或任意多次<br>. 匹配除了换行符外的任意一个字符<br>^  匹配行首   ^hell 匹配以hello开头的行  </li>
</ul>
<p>在搜索文件时， 我们可以通过grep命令来进行匹配</p>
<pre><code>grep  “aa*” 文件名   # 匹配至少包含一个a的行
grep “s..d” 文件名  # 会匹配在字母s和d之间一定有两个字符的单词</code></pre><h2 id="2-字符截取命令"><a href="#2-字符截取命令" class="headerlink" title="2.字符截取命令"></a>2.字符截取命令</h2><p><strong>Cut字段提取命令</strong><br>cut 【选项】 文件名  </p>
<pre><code>选项：
-f  列号   提取第几列  
-d 分隔符 按照指定分隔符分割列  

注意：一般cut命令不独立使用，都是跟管道符grep命令配合使用  
命令  df -h 查看分区使用率</code></pre><p><strong>Printf命令</strong></p>
<p>格式化打印命令，如果想要学习awk命令  需要先学习printf命令  </p>
<pre><code>输出类型
%ns ：输出字符串  n是数字代表输出几个字符
%ni  输出整数，n是数字指输出几个字符
%m.nf   输出浮点数</code></pre><p>在awk命令输出中支持print和printf命令<br>Print： print命令会在每个输出之后自动加入一个换行符（Linux默认是没有print命令的，只能在awk中使用）<br> Printf命令是标准格式输出命令，并不会自动增加换行符，如果需要换行，需要手动增加换行符。</p>
<p><strong>Awk命令</strong></p>
<p>命令格式</p>
<pre><code>Awk ‘条件1{动作1} 条件2{动作2}...’  文件名</code></pre><p>条件：一般使用条件关系表达式作为条件</p>
<pre><code>X&gt;10  判断变量x是否大于10
X&gt;=10 大于等于
X&lt;=10 小于等于</code></pre><p>动作：<br>    格式化输出<br>    流程控制语句、</p>
<p>例如：</p>
<pre><code>使用awk 命令输出df -h磁盘信息的第一列和第五列第六列
awk &apos;{print $1 &quot;\t&quot; $5 &quot;\t&quot; $6}&apos;
[root@iZwz92dpr9gpgasbo4gg15Z ~]# df -h | awk &apos;{print $1 &quot;\t&quot; $5 &quot;\t&quot; $6}&apos;
Filesystem    Use%    Mounted
/dev/vda1    27%    /
devtmpfs    0%    /dev
tmpfs    0%    /dev/shm
tmpfs    1%    /run
tmpfs    0%    /sys/fs/cgroup
tmpfs    1%    /run/user/0
[root@iZwz92dpr9gpgasbo4gg15Z ~]# </code></pre><p>*<em>BEGIN 命令 *</em></p>
<pre><code>[root@iZwz92dpr9gpgasbo4gg15Z ~]# awk &apos;BEGIN{print{&quot;zhe shi yi ge begin &quot;} {print $1}&apos;
在所有的命令执行之前先执行begin命令</code></pre><p><strong>Sed命令</strong></p>
<ul>
<li>sed命令是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</li>
</ul>
<ul>
<li>Sed是几乎包括在所有的UNIX平台当然也包括Linux的轻量级流编辑器。Sed主要是用来将数据进行选取、替换、删除、新增的命令。  </li>
</ul>
<ul>
<li>和vi的区别，vi只能用来修改文件中的内容。Sed不仅能修改文件而且还可以直接修改命令的结果。在shell脚本中sed是一个非常重要的编辑器</li>
</ul>
<p><strong>命令格式:</strong><br>Sed  【选项】 ‘ 【动作】’ 文件名</p>
<pre><code>选项：
-n ：一般sed命令会把所有数据都输出到屏幕上，如果加上这个选项，则只会把sed命令处理过的行输出到屏幕上
-e ：允许对输入数据应用多条sed命令编辑
-i  ：用sed修改结果直接修改读取数据的文件，而不是由屏幕直接输出</code></pre><p><strong>动作：</strong></p>
<pre><code>a\: 追加，在当前行后添加一行或者多行。添加多行时，除最后一行外，每行末尾都需要用\ 代表数据完结
Sed ‘2a  zhuijia de neirong’ 文件名    这样我们就在文件中的第二行的后面追加了我们输出的内容
c\ : 行替换
i\: 行插入
Sed ‘2i  charu’ 文件名  在第二行之前插入了一个内容为charu的内容
d\: 删除，删除指定的行
P: 打印，打印指定的行
h 拷贝模板块的内容到内存中的缓冲区。
H 追加模板块的内容到内存中的缓冲区。
g 获得内存缓冲区的内容，并替代当前模板块中的文本。
G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。
l 列表不能打印字符的清单。
n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。
p 打印模板块的行。
P(大写) 打印模板块的第一行。
q 退出Sed。</code></pre><h2 id="3-字符处理命令"><a href="#3-字符处理命令" class="headerlink" title="3.字符处理命令"></a>3.字符处理命令</h2><p>排序命令</p>
<p>Sort  【选项】 文件名</p>
<pre><code>选项
-f ：忽略大小写
-n ：以数值型进行排序，默认的是使用的字符串型进行排序
-r ：反向排序
-t ：指定分隔符，默认的分隔符是制表符
-k n[,m] : 按照指定的字段范围排序，从第n个字段开始，m字段结束，默认是到行尾。</code></pre><p>统计命令wc</p>
<pre><code>Wc 【选项】文件名
选项：
-l  只统计行数
-w 只统计单词数
-m 只统计字符数</code></pre><h2 id="4-条件判断"><a href="#4-条件判断" class="headerlink" title="4.条件判断"></a>4.条件判断</h2><p>按照文件类型进行判断</p>
<pre><code>-b：判断文件是否存在，并且是否为块设备文件
-c：判断该文件是否存在，并且是否是字符设备文件
-d：判断该文件是否存在，并且是否是目录文件
-e：判断该文件是否存在
-f：判断该文件是否存在。并且是否是普通文件</code></pre><p>判断格式： test  -e /root/install.log    可以判断root目录下install.log文件是否存在<br>或者 [ -e /root/install.log] 也可以进行判断</p>
<p>两个文件之间进行比较</p>
<pre><code>文件1 -nt 文件2  ：判断文件1的修改时间是否比文件2的新
文件1 -ot 文件2: ：判断文件1的修改时间是否比文件2的旧
文件1 -ef 文件2  ： 判断文件1是否和文件2的inode号是否一致，可以理解为两个文件                是否是同一个文件。这个判断用于判断硬链接是很好的方法。</code></pre><p><strong>两个整数之间的比较</strong></p>
<pre><code>整数1 -eq 整数2 ：判断整数1是否和整数2相等
整数1 -ne 整数2 ：判断整数2是否和整数2不相等
整数1 -gt 整数2 ：判断整数1是否大于整数2
整数1 -lt 整数2 ：判断整数1是否小于整数2
整数1 -ge 整数2 ：判断整数1是否大于等于整数2
整数1 -le 整数2 ：判断整数1是否小于等于整数2</code></pre><p><strong>字符串的判断</strong></p>
<pre><code>-z 字符串  ：判断字符串是否为空
-n 字符串  ：判断字符串是否为非空
字符串1==字符串2 ：判断字符串1是否和字符串2相等
字符串1！=字符串2：判断字符串1是否和字符串2不相等</code></pre><p><strong>多重条件判断</strong></p>
<pre><code>判断1 -a 判断2 ：逻辑与，判断1和判断2都成立，最终的结果才为真
判断1 -o 判断2 ：逻辑或，判断1和判断2有一个成立，最终的结果就为真
！判断 ： 逻辑非，使原始的判断式取反</code></pre><h2 id="5-流程控制"><a href="#5-流程控制" class="headerlink" title="5.流程控制"></a>5.流程控制</h2><h3 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1.if语句"></a>1.if语句</h3><p>我们在进行判断的时候；<br>[-e /root] 判断root文件是否存在，如果存在我们可以通过命令行 echo $? 返回0 就说明存在，如果返回的是非0，就说明不存在。<br>或者[-e /root] &amp;&amp;echo yes || echo no  </p>
<p><strong>单分支if条件语句</strong><br>    If [条件判断式] ; then<br>    程序<br>    fi</p>
<pre><code>或者
If [ 条件判断式]
then
程序
fi</code></pre><p><strong>注意：</strong><br>是以if 开头 以fi 结尾<br>条件判断式中就是使用test命令判断，所以中括号和条件判断式之间必须有空格<br>then后面跟的是符合条件之后执行的程序，可以放在[] 之后，用；分割，也可以换行写入，就不需要了  </p>
<p><strong>双分支if条件语句</strong></p>
<pre><code>If  [条件判断式]
then
条件成立时，执行的程序
else
条件不成立时，执行的另一个程序
Fi</code></pre><p><strong>多分支if条件语句</strong></p>
<pre><code>If [条件判断1]
then
条件成立时，执行的程序
elif
条件判断2成立时，执行程序2

else
当所有条件都不成立时，最后执行此程序
Fi  </code></pre><h3 id="2-case语句"><a href="#2-case语句" class="headerlink" title="2.case语句"></a>2.case语句</h3><p>case只能判断一种条件关系，而if语句可以判断多种条件关系、  </p>
<pre><code>Case $变量名  in 
“值1”) 
“执行语句”
：：
“值2”)
“执行语句”
...
Esac</code></pre><h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h3><pre><code>语法格式：
For 变量  in 值1  值2 值3 ...

Do 
程序
Done</code></pre>]]></content>
      <categories>
        <category>Linux与Shell编程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2018/05/01/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><a id="more"></a>

<h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><pre><code>mkdir 创建目录  
mkdir -p  可以递归创建  
pwd 显示当前目录  
cd ..  回到上一级目录  
rmdir  删除空目录  
cp -rp  源文件或者是目录  目标目录----复制文件  
touch 创建空文件  
cat  查看文件  
more  分页显示文件内容 -- 按空格或者是f可以一页一页往下翻，按回车一行一行往下翻，按q退出 ，按b返回上一屏  
 less  分页显示内容 , 可以上下翻页。而且输入/  可以进行搜索，搜索完可以进行标记  
ln -s 源文件  目标文件  为文件创建连接，连接类型分为软连接和硬链接</code></pre><h2 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h2><p>find   搜索范围 匹配条件否<br>例如  find /etc -name init 在etc文件夹下搜索init名称的文件</p>
<h2 id="文件压缩和解压缩命令"><a href="#文件压缩和解压缩命令" class="headerlink" title="文件压缩和解压缩命令"></a>文件压缩和解压缩命令</h2><p>gzip 文件 就可以对该文件进行压缩<br>gzip只能压缩文件不能压缩文件夹，而且是不保留源文件的  </p>
<p>打包文件夹：使用  tar -cvf 【压缩后文件名】【目录文件名】<br>.tar.gz 一般是先打包在压缩后的文件名  </p>
<p>我们可以直接使用命令 【】tar -zcf 123.tar.gz 123 直接对文件夹123进行打包并进行压缩  </p>
<p>解压缩：-x 解包 -v显示详细信息 -f 指定解压文件  -z解压缩<br>例如; <strong>tar -zxvf 123.tar.gz</strong></p>
<p><strong>命令详解</strong></p>
<p><strong>tar</strong><br>-c: 建立压缩档案<br>-x：解压<br>-t：查看内容<br>-r：向压缩归档文件末尾追加文件<br>-u：更新原压缩包中的文件<br>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。</p>
<p>-z：有gzip属性的<br>-j：有bz2属性的<br>-Z：有compress属性的<br>-v：显示所有过程<br>-O：将文件解开到标准输出<br>下面的参数-f是必须的<br>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。<br>    <code>tar -cf all.tar *.jpg</code></p>
<p>这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。</p>
<pre><code>tar -rf all.tar *.gif</code></pre><p>这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。</p>
<pre><code>tar -uf all.tar logo.gif</code></pre><p>这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。</p>
<pre><code>tar -tf all.tar</code></pre><p>这条命令是列出all.tar包中所有文件，-t是列出文件的意思</p>
<pre><code>tar -xf all.tar</code></pre><p>这条命令是解出all.tar包中所有文件，-t是解开的意思  </p>
<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg   </p>
<p>tar -czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz  </p>
<p> tar -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2  </p>
<p>tar -cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z  </p>
<p>rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux<br>zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux  </p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>tar -xvf file.tar //解压 tar包<br>tar -xzvf file.tar.gz //解压tar.gz<br>tar -xjvf file.tar.bz2   //解压 tar.bz2<br>tar -xZvf file.tar.Z   //解压tar.Z<br>unrar e file.rar //解压rar<br>unzip file.zip //解压zip  </p>
<p><strong>总结</strong><br>1、<em>.tar 用 tar -xvf 解压<br>2、</em>.gz 用 gzip -d或者gunzip 解压<br>3、<em>.tar.gz和</em>.tgz 用 tar -xzf 解压<br>4、<em>.bz2 用 bzip2 -d或者用bunzip2 解压<br>5、</em>.tar.bz2用tar -xjf 解压<br>6、<em>.Z 用 uncompress 解压<br>7、</em>.tar.Z 用tar -xZf 解压<br>8、<em>.rar 用 unrar e解压<br>9、</em>.zip 用 unzip 解压  </p>
]]></content>
      <categories>
        <category>Linux与Shell编程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>OraclePL/SQL高级编程(块 过程 动态PL/SQL)</title>
    <url>/2018/04/20/2018-04-20-OraclePLSQL%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B(%E5%9D%97-%E8%BF%87%E7%A8%8B-%E5%8A%A8%E6%80%81PLSQL)/</url>
    <content><![CDATA[<h1 id="1-PLsql是什么？"><a href="#1-PLsql是什么？" class="headerlink" title="1.PLsql是什么？"></a>1.PLsql是什么？</h1><p>   PL/SQL(procdure language/sql)  : 是对oracle标准的一个sql语言的扩展，是在oracle数据库上进行编程的语言。<br>  <a id="more"></a></p>
<h1 id="2-为什么要用PL-SQL？"><a href="#2-为什么要用PL-SQL？" class="headerlink" title="2.为什么要用PL/SQL？"></a>2.为什么要用PL/SQL？</h1><p>   （1）SQL语句不能进行模块化编程，  例如淘宝：如果仅用sql语句的话，那么下一个订单可能需要发送好几条SQL语句<br>    这样不方便， 写好一个模块，专门完成下订单的功能，当需要下订单的时候，只需要传入参数，调用模块就可以了<br>     （2）执行速度上：传统的sql，涉及到sql语句的网络传输时间，还有一个是dbms对sql语句的一个编译的时间<br>          效率不高    PLsql：sql语句是写在数据库中的只需要编译一次，并且还是省去了sql语句的网络传输时间，效率比较高<br>   （3）安全性的问题：sql语句如果直接写在程序或者客户端中，在网络传输的过程中会产生一些不安全因素<br>      比如sql注入等。PLSQL：sql语句是写在数据库里面的，不需要网络传输，避免了这个问题<br> （4）传统sql浪费带宽，而plsql节省带宽</p>
<h1 id="PLSQL的缺点"><a href="#PLSQL的缺点" class="headerlink" title="PLSQL的缺点"></a>PLSQL的缺点</h1><p> PL/SQL的一致性不好。（oracle的存储过程，放到其他数据库中不能用，需要重新编写）</p>
<h1 id="4-快速入门："><a href="#4-快速入门：" class="headerlink" title="4.快速入门："></a>4.快速入门：</h1><p>   问题：编写一个过程，往emp表中中插入一条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> prol <span class="keyword">is</span></span><br><span class="line">      <span class="keyword">begin</span> </span><br><span class="line">      <span class="keyword">insert</span> <span class="keyword">into</span> emp(empno,ename,sal,deptno) <span class="keyword">values</span>(<span class="number">1011</span>,<span class="string">'lili'</span>,<span class="number">3000</span>,<span class="number">20</span>);</span><br><span class="line">      <span class="keyword">end</span>;    </span><br><span class="line">      如何调用：exec prol;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结;"></a>总结;</h2><p>  <strong>(1)语法</strong><br>  注意过程中，语句后面需要加分号   语句最后 / 结束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure 过程名(参数1 参数类型1，参数2 参数类型2) is </span><br><span class="line">变量定义</span><br><span class="line">begin</span><br><span class="line">执行部分</span><br><span class="line"> exception</span><br><span class="line">    异常处理部分</span><br><span class="line">  end;</span><br></pre></td></tr></table></figure>

<p>（2）过程调用的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec  过程名（参数1，参数2...）</span><br><span class="line"></span><br><span class="line">问题：创建一个过程：输入一个员工编号，删除emp表中对象的员工记录</span><br><span class="line">create procedure pro2(no number) is</span><br><span class="line">begin</span><br><span class="line">  delete from emp where empno=no;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>

<p> –注意：数据类型不能加长度    –=====  show error  可以查看错误是什么<br> –出现编译错误  show  error 可以查看错误的详细信息  也可以把错误的编号复制到百度上</p>
<h1 id="–5-PL-SQL可以做什么事情？-创建-过程-函数，包（包体）-触发器-gt-gt-基础都是块编程"><a href="#–5-PL-SQL可以做什么事情？-创建-过程-函数，包（包体）-触发器-gt-gt-基础都是块编程" class="headerlink" title="–5.PL/SQL可以做什么事情？  创建 过程  函数，包（包体） 触发器==&gt;&gt;基础都是块编程"></a>–5.PL/SQL可以做什么事情？  创建 过程  函数，包（包体） 触发器==&gt;&gt;基础都是块编程</h1><p>6.PL/SQL块编程<br>（1）注释：单行注释：–<br>                多行注释  /*  */</p>
<p>（2）标识符的命名规范：</p>
<ul>
<li><input disabled="" type="checkbox"> <p>当定义变量的时候，以v_  比如v_ename</p>
</li>
<li><input disabled="" type="checkbox"> <p>当定义常量的时候  以c_开头</p>
</li>
<li><input disabled="" type="checkbox"> <p>当定义游标的时候，用_cursor结尾</p>
</li>
<li><input disabled="" type="checkbox"> <p>当定义例外（异常）的时候，用e_开头</p>
<p>​             </p>
<p>（3）块结构</p>
</li>
</ul>
<pre><code>declare(可选)
          声明变量，常量，游标，例外和复杂的数据类型
          begin
            执行部分 ：要执行的PL/SQL语句和SQL语句
          exception
            异常处理部分：主要处理各种错误
          end;</code></pre><p>   案例（只包括执行部分的SQL块）输出一个Hello Worder！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span> </span><br><span class="line">        dbms_output.put_line(<span class="string">'Hello Word'</span>);</span><br><span class="line">      <span class="keyword">end</span>;  </span><br><span class="line">      <span class="keyword">set</span> serveroutput <span class="keyword">on</span></span><br></pre></td></tr></table></figure>
<pre><code>注意（1）dbms_output.put_line(内容)；Oracle 中的输出语句
       --  dbms_output是Oracle所提供的包（类似于JAVA的包）该包中包含了一些过程put_line是dbms_output
       --的一个过程
--包含定义部分和执行部分的PL/SQL块</code></pre><p>案例：根据用户的输入的雇员编号，输出该雇员的名字</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">      V_ename <span class="built_in">varchar2</span>(<span class="number">10</span>);</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">select</span> ename <span class="keyword">into</span> v_ename <span class="keyword">from</span> emp <span class="keyword">where</span> empno=&amp;<span class="keyword">no</span>;</span><br><span class="line">        dbms_output.put_line('姓名是'||v_ename);</span><br><span class="line">      <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<pre><code>--注意：变量的定义：变量名  变量类型 （长度）;
 --select ename into e_ename from emp where empno=&amp;no
 --select....into...from   表示是对变量e_ename赋值
 --empno=&amp;no  符号表示需要从键盘接收一个empno，</code></pre><p>案例：将上述PL/SQL块改为一个过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> (<span class="keyword">replace</span>) <span class="keyword">procedure</span> pro3 (v_empno <span class="built_in">number</span>) <span class="keyword">is</span>      <span class="comment">--(replace)有就替换，没有就创建</span></span><br><span class="line">v_ename emp.ename%<span class="keyword">type</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> ename <span class="keyword">into</span> v_ename <span class="keyword">from</span> emp <span class="keyword">where</span> empno=v_empno;</span><br><span class="line">  dbms_output.put_line('姓名是'||v_ename);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<pre><code> --总结：过程中，变量定义是出现在is和begin之间的，没有declare
--emp.ename%type  表示v_ename 的类型和emp表的ename的数据类型和长度完全相同</code></pre><p>   案例：包含定义部分，执行部分和例外处理部分的PL/SQL块<br>        问题：如果在上述案例输入了不存在的员工编号，这个时候会报错，怎么处理？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">       v_ename emp.ename%<span class="keyword">type</span>;</span><br><span class="line">       <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">select</span> ename <span class="keyword">into</span> v_ename <span class="keyword">from</span> emp <span class="keyword">where</span> empno=&amp;<span class="keyword">no</span>;</span><br><span class="line">         dbms_output.put_line('姓名是'||v_ename);</span><br><span class="line">         exception</span><br><span class="line">           when no_data_found then</span><br><span class="line">             dbms_output.put_line('你输入的编号不存在');</span><br><span class="line">       <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<pre><code> --异常处理的结构基本语法：
 exception
    when 异常名称 then
      /*
      对异常处理的代码
      */
    when 异常名称 then
       /*
      对异常处理的代码
      */
--有些时候，异常还用来做逻辑跳转</code></pre><p>案例：输入员工编号，显示员工姓名，如果我们输入一个不存在的员工编号，就在emp表中插入一条记录<br>              –(1002,’马大哈’)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">declare</span></span><br><span class="line">             v_ename emp,ename%<span class="keyword">type</span>;</span><br><span class="line">             <span class="keyword">begin</span></span><br><span class="line">               <span class="keyword">select</span> ename <span class="keyword">into</span> v_ename <span class="keyword">from</span> emp <span class="keyword">where</span> empno=&amp;<span class="keyword">no</span>;</span><br><span class="line">               dbms_output.put_line('姓名是'||v_ename);</span><br><span class="line">               exception</span><br><span class="line">                 when no_data_found then</span><br><span class="line">                   <span class="keyword">insert</span> <span class="keyword">into</span> emp(empno,ename)<span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'马大哈'</span>);</span><br><span class="line">              <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">             v_ename emp.ename%<span class="keyword">type</span>;</span><br><span class="line">             v_ename emp.empno%type:=&amp;no;</span><br><span class="line">             <span class="keyword">begin</span></span><br><span class="line">               <span class="keyword">select</span> ename <span class="keyword">into</span> v_ename <span class="keyword">from</span> emp <span class="keyword">where</span> empno=v_empno;</span><br><span class="line">               dbms_output.put_line('姓名是'||v_ename);</span><br><span class="line">               exception</span><br><span class="line">                 when no_data_found then</span><br><span class="line">                   <span class="keyword">insert</span> <span class="keyword">into</span> emp(empno,ename)<span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'马大哈'</span>);</span><br><span class="line">              <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>  变量的赋值：在PL/SQL中变量的赋值是用 ：=  例如v_ename emp.ename%type:=’JONE’;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">       v_emp emp%rowtype;</span><br><span class="line">       <span class="keyword">begin</span> </span><br><span class="line">         <span class="keyword">select</span> *<span class="keyword">into</span> v_emp <span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7839</span>;</span><br><span class="line">         dbms_output.put_line('姓名是'||v_emp.ename||'工资是'||v_emp.sal);</span><br><span class="line">       <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<pre><code>--总结一下：%rowtype表示记录类型，v_ename emp%rowtype 
  --使用：v_emp.ename(字段名)</code></pre><h1 id="7-过程的进一步讲解"><a href="#7-过程的进一步讲解" class="headerlink" title="7.过程的进一步讲解"></a>7.过程的进一步讲解</h1><p>–（1）过程中，不但可以指定输入参数，也可以指定输出参数<br>      create procedure 过程名(参数1 参数类型1，参数2 参数类型2) is<br>      变量定义<br>      begin<br>        执行部分<br>      exception<br>        异常处理部分<br>      end;      </p>
<pre><code>--注意1：过程可以指定多个输入和输出参数，分别是参数 in 参数类型：参数 out 参数类型
--注意2：如果没有指明的情况下，默认的是in（即输入参数）</code></pre><p>  编写一个过程，可以输入员工的姓名，新的工作，可以修改雇员的工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro4(<span class="keyword">name</span> <span class="keyword">in</span> <span class="built_in">varchar2</span>,new_sal <span class="keyword">in</span> <span class="built_in">number</span>) <span class="keyword">is</span></span><br><span class="line">   <span class="keyword">begin</span></span><br><span class="line">     <span class="keyword">update</span> emp <span class="keyword">set</span> sal=new_sal <span class="keyword">where</span> ename=<span class="keyword">name</span>;</span><br><span class="line">   <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>一下是我在学习的过程中，具体的案例，结合案例对PLSQL的流程控制做进一步的说明</p>
<h1 id="PL-SQL的流程控制"><a href="#PL-SQL的流程控制" class="headerlink" title="PL/SQL的流程控制"></a>PL/SQL的流程控制</h1><p>–案例1：编写一个存储过程，输入一个雇员姓名，如果该员工工资低于2000，给该员工工资增加10%</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> updateSal(spName <span class="built_in">varchar2</span>) <span class="keyword">is</span></span><br><span class="line">v_sal emp.sal%<span class="keyword">type</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> sal <span class="keyword">into</span> v_sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename=spName;</span><br><span class="line">  if v_sal&lt;2000 then</span><br><span class="line">    <span class="keyword">update</span> emp <span class="keyword">set</span> sal=sal*<span class="number">1.1</span> <span class="keyword">where</span> ename=spName;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">exec updateSal('SMITH');</span><br></pre></td></tr></table></figure>

<pre><code>总结：if...then...end if;如果if后面的条件满足，则执行then后面的语句</code></pre><p>–案例2：编写一个存储过程，输入一个雇员姓名，若奖金非空，在原基础上加100，若奖金为0或空，把奖金设为200</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> updateComm(spName <span class="built_in">varchar2</span>) <span class="keyword">is</span></span><br><span class="line">v_comm emp.comm%<span class="keyword">type</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> nvl(comm,<span class="number">0</span>) <span class="keyword">into</span> v_comm <span class="keyword">from</span> emp <span class="keyword">where</span> ename=spName;</span><br><span class="line">  if v_comm=0 then</span><br><span class="line">    <span class="keyword">update</span> emp <span class="keyword">set</span> comm=<span class="number">200</span> <span class="keyword">where</span> ename=spName;</span><br><span class="line">  else</span><br><span class="line">    <span class="keyword">update</span> emp <span class="keyword">set</span> comm=comm+<span class="number">100</span> <span class="keyword">where</span> ename=spName;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<pre><code>总结：if...then...else...end if;如果if后条件成立，执行then后面语句，否则执行else后面语句</code></pre><p>–案例3：编写一个存储过程，如果职位是president,工资+1000，manager，+500,其它岗位+200</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> updateSal1(spName <span class="built_in">varchar2</span>) <span class="keyword">is</span></span><br><span class="line">v_job emp.job%<span class="keyword">type</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> job <span class="keyword">into</span> v_job <span class="keyword">from</span> emp <span class="keyword">where</span> ename=spName;</span><br><span class="line">  if v_job='PERSIDENT' then</span><br><span class="line">    <span class="keyword">update</span> emp <span class="keyword">set</span> sal=sal+<span class="number">1000</span> <span class="keyword">where</span> ename=spName;</span><br><span class="line">  elsif v_job='MANAGER' then</span><br><span class="line">    <span class="keyword">update</span> emp <span class="keyword">set</span> sal=sal+<span class="number">500</span> <span class="keyword">where</span> ename=spName;</span><br><span class="line">  else</span><br><span class="line">    <span class="keyword">update</span> emp <span class="keyword">set</span> sal=sal+<span class="number">200</span> <span class="keyword">where</span> ename=spName;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<pre><code>总结：if 条件1 then 执行语句1 elsif 条件2 then 执行语句2 else 执行语句3 end if;</code></pre><p>–案例4：创建一张表users，循环插入10条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">users</span>(<span class="keyword">id</span> <span class="built_in">number</span>(<span class="number">3</span>),<span class="keyword">name</span> <span class="built_in">varchar2</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> insertTable(spName <span class="built_in">varchar2</span>) <span class="keyword">is</span></span><br><span class="line">v_num <span class="built_in">number</span>:=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">loop</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span> <span class="keyword">values</span>(v_num,spName);</span><br><span class="line">    v_num:=v_num+1;</span><br><span class="line">    exit when v_num=11;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<pre><code>总结：loop...end loop:首先定义一个循环变量，其次在loop和end loop之间一定要写退出循环的条件，否则就是死循环。</code></pre><p>–案例5:编写一个存储过程，可以输入用户名，并循环往users表中添加10条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> insertTable1(spName <span class="built_in">varchar2</span>) <span class="keyword">is</span></span><br><span class="line">v_num <span class="built_in">number</span>:=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">while</span> v_num&lt;=<span class="number">20</span> <span class="keyword">loop</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span> <span class="keyword">values</span>(v_num,spName);</span><br><span class="line">    v_num:=v_num+1;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<pre><code>--总结：while 循环条件 loop 执行内容;循环控制语句;end loop;  注意：必须有退出循环的条件，否则是死循环</code></pre><p>–案例6：使用for循环实现案例5功能</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> insertTable2(spName <span class="built_in">varchar2</span>) <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">21.</span><span class="number">.30</span> <span class="keyword">loop</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span> <span class="keyword">values</span>(i,spName);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<pre><code>总结：for 循环变量 in 21..30(序列，表示21到30的一个序列)loop...end loop;</code></pre><p>–案例7：用三种循环语句实现1+2+…+100</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_counter <span class="built_in">number</span>:=<span class="number">1</span>;</span><br><span class="line">v_sum number:=0;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">loop</span></span><br><span class="line">    v_sum:=v_sum+v_counter;</span><br><span class="line">    v_counter:=v_counter+1;</span><br><span class="line">    exit when v_counter=101;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">  dbms_output.put_line('和是：'||v_sum);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_counter <span class="built_in">number</span>:=<span class="number">1</span>;</span><br><span class="line">v_sum number:=0;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">while</span> v_counter&lt;=<span class="number">100</span> <span class="keyword">loop</span></span><br><span class="line">    v_sum:=v_sum+v_counter;</span><br><span class="line">    v_counter:=v_counter+1;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">  dbms_output.put_line('和是：'||v_sum);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_sum <span class="built_in">number</span>:=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span> <span class="keyword">loop</span></span><br><span class="line">    v_sum:=v_sum+i;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">  dbms_output.put_line('和是：'||v_sum);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>


<p>–案例8：case语句，从键盘接受一个输入，如果输入A，输出优秀，输入B，输出良好，输入C输出中等，其它情况，输出不及格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_grade <span class="built_in">char</span>(<span class="number">2</span>):=&amp;grade;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">case</span> v_grade</span><br><span class="line">    <span class="keyword">when</span> <span class="string">'A'</span> <span class="keyword">then</span></span><br><span class="line">      dbms_output.put_line(<span class="string">'优秀'</span>);</span><br><span class="line">    when 'B' then</span><br><span class="line">      dbms_output.put_line('良好');</span><br><span class="line">    when 'C' then</span><br><span class="line">      dbms_output.put_line('中等');</span><br><span class="line">    else</span><br><span class="line">      dbms_output.put_line('不及格');</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>–总结：case 变量 when 值1 then 操作1；when 值2 then 操作2;…else 操作; end case;</p>
<h1 id="2-动态SQL"><a href="#2-动态SQL" class="headerlink" title="2.动态SQL:"></a>2.动态SQL:</h1><p>动态SQL：编译期间SQL 语句是不确定的，并且在运行时允许发生变化<br>–应用场合：要执行一个DDL语句时;需要增加程序的灵活性时;使用包DBMS_SQL动态执行SQL语句时<br>–案例1：编写pl/sql块，创建一张test001(id number(2),name varchar2(10));</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">execute</span> <span class="keyword">immediate</span> <span class="string">'create table test001(id number(2),name varchar2(10))'</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>总结：PLSQL块中不能直接执行DDL语句，所以可以用动态sql去执行<br>–execute immediate sql语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">stmt <span class="built_in">varchar2</span>(<span class="number">200</span>):=<span class="string">'create table test002(id number(2),name varchar2(10))'</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">execute</span> <span class="keyword">immediate</span> stmt;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>


<p>–案例2：编写一个pl/sql块，往test001中插入一条记录，要求值是从键盘输入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_id test001.id%<span class="keyword">type</span>:=&amp;<span class="keyword">id</span>;</span><br><span class="line">v_name test001.name%type:=&amp;name;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">execute</span> <span class="keyword">immediate</span> <span class="string">'insert into test001 values(:1,:2)'</span> <span class="keyword">using</span> v_id,v_name;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>–总结：execute immediate sql语句 using 值1，值2，…;<br>–:1,:2：需要用到变量的地方用:1,:2来代替</p>
<p>–案例3：查询test001，从键盘接收id，输出其姓名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_id test001.id%<span class="keyword">type</span>:=&amp;<span class="keyword">id</span>;</span><br><span class="line">v_name test001.name%type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">execute</span> <span class="keyword">immediate</span> <span class="string">'select name from test001 where id=:1'</span> <span class="keyword">into</span> v_name <span class="keyword">using</span> v_id;</span><br><span class="line">  dbms_output.put_line('姓名是：'||v_name);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<pre><code> 总结：execute immediate sql语句 into 变量1 using 变量2;

(1)sql语句中没有select...into...
(2)where id=:1:1是占位符，表示这个地方在运行的时候需要有一个值替代</code></pre><p>–案例4：从键盘输入一个员工编号，查询该员工的姓名和工资，如果工资小于2000元，那么给他增加500，返回增加后的工资。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_empno emp.empno%<span class="keyword">type</span>:=&amp;<span class="keyword">no</span>;</span><br><span class="line">v_ename emp.ename%type;</span><br><span class="line">v_sal   emp.sal%type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> ename,sal <span class="keyword">into</span> v_ename,v_sal <span class="keyword">from</span> emp <span class="keyword">where</span> empno=v_empno;</span><br><span class="line">  if v_sal&lt;2000 then</span><br><span class="line">    <span class="keyword">execute</span> <span class="keyword">immediate</span> <span class="string">'update emp set sal=sal+500 where empno=:1 returning sal into :2'</span> <span class="keyword">using</span> v_empno <span class="keyword">returning</span> <span class="keyword">into</span> v_Sal;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">  dbms_output.put_line('新工资是：'||v_Sal);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<pre><code>总结：execute immediate sql语句 using 变量1 returning into 变量2;
update emp set sal=sal+500 where empno=:1 returning sal into :2 意思是更新sal,返回更新后的工资。</code></pre><p>–案例5：从键盘接受一个员工编号，删除该员工信息</p>
<pre><code>declare
v_empno emp.empno%type:=&amp;no;
begin
  execute immediate &apos;delete from emp where empno=:num&apos; using v_empno;
end;</code></pre><p>总结：占位符在这里可以是:num形式</p>
<h1 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3.异常处理"></a>3.异常处理</h1><p>–案例1：编写一个PL/SQL块，查询emp表中员工的工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_sal emp.sal%<span class="keyword">type</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> sal <span class="keyword">into</span> v_sal <span class="keyword">from</span> emp;</span><br><span class="line">exception</span><br><span class="line">  when too_many_rows then</span><br><span class="line">    dbms_output.put_line('找到多条记录！');</span><br><span class="line">  when others then</span><br><span class="line">    dbms_output.put_line('未知异常！');</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<pre><code>用户抛出异常。</code></pre><p>案例2：从键盘输入一个empno,查询该员工的工资，如果工资小于2000，报异常。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_sal emp.sal%<span class="keyword">type</span>;</span><br><span class="line">v_empno emp.empno%type:=&amp;no;</span><br><span class="line">myexp exception;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">select</span> sal <span class="keyword">into</span> v_sal <span class="keyword">from</span> emp <span class="keyword">where</span> empno=v_empno;</span><br><span class="line">  if v_sal&lt;2000 then</span><br><span class="line">    raise myexp;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">exception</span><br><span class="line">  when myexp then</span><br><span class="line">    dbms_output.put_line('工资太少了，该加工资了！');</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<pre><code>总结：（1）declare中预定义一个异常;(2)在执行部分，触发异常raise myexp;（3）在exception中处理异常。</code></pre><p>​<br>​<br>​      </p>
]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库实例和数据库、系统用户的区别</title>
    <url>/2018/03/12/2018-03-12-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E4%BE%8B%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%81%E7%B3%BB%E7%BB%9F%E7%94%A8%E6%88%B7%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><h3 id="（1）为什么要使用数据库？"><a href="#（1）为什么要使用数据库？" class="headerlink" title="（1）为什么要使用数据库？"></a>（1）为什么要使用数据库？</h3><p>淘宝网订单数据保存什么地方的？文件，数据库<br>文件保存数据不方便：<br>（1）安全性问题<br>（2）不利于查询和管理<br>（3）不利于海量数据的存储<br>（4）文件在程序中不容易控制</p>
<a id="more"></a>

<h3 id="（2）什么是数据库？"><a href="#（2）什么是数据库？" class="headerlink" title="（2）什么是数据库？"></a>（2）什么是数据库？</h3><p>数据库：数据的仓库，数据库是一个软件，是专家们设计出来的便于进行数据管理的软件。可以类比图书馆：图书馆：存放图书的   数据库：存放数据的</p>
<p>  数据库</p>
<ul>
<li>磁盘上存储的数据的集合 </li>
<li>在物理上表现为数据文件、日志文件和控制文件等 </li>
<li>在逻辑上以表空间形式存在</li>
<li>必须首先创建数据库，然后才能使用Oracle<h3 id="（3）数据库的三层结构"><a href="#（3）数据库的三层结构" class="headerlink" title="（3）数据库的三层结构"></a>（3）数据库的三层结构</h3></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190105214844564.png" alt="在这里插入图片描述"></p>
<h3 id="（4）主流数据库"><a href="#（4）主流数据库" class="headerlink" title="（4）主流数据库"></a>（4）主流数据库</h3><p>微软：sqlserver 和 access(小巧，免费，不占资源，数据量不大，系统功能不多，安全性要求不高的时候，可以使用)</p>
<p>Mysql:MySQL（开源的）较轻量级的数据库</p>
<p>Ibm:db2(主要做海量数据的存储和处理)</p>
<p>Oracle:Oracle 大型数据库，比较安全，服务好</p>
<p>Sysbase:(专注于Linux下的开发，金融领域用比较多)</p>
<h3 id="（5）项目中如何去选择数据库？"><a href="#（5）项目中如何去选择数据库？" class="headerlink" title="（5）项目中如何去选择数据库？"></a>（5）项目中如何去选择数据库？</h3><p>1.项目标的是什么？<br>2.功能要求</p>
<p>3.安全性和稳定的要求</p>
<p>4.多少人用？（考虑并发）</p>
<p>5.操作系统（Linux/Unix/Windows/MacOS）</p>
<p><strong>Oracle的服务：</strong><br>必须开启的服务：OracleService<SID>   OracleOraDb11g_home1TNSListener</p>
<p>如果使用企业管理器，还需启动：OracleDBConsoleorcl</p>
<h2 id="2-数据库和数据库实例的概念"><a href="#2-数据库和数据库实例的概念" class="headerlink" title="2.数据库和数据库实例的概念"></a>2.数据库和数据库实例的概念</h2><p><strong>数据库</strong></p>
<p>磁盘上存储的数据的集合<br>在物理上表现为数据文件、日志文件和控制文件等<br>在逻辑上以表空间形式存在<br>必须首先创建数据库，然后才能使用Oracle</p>
<p><strong>数据库实例</strong></p>
<p>每个启动的数据库都对应一个数据库实例，由这个实例来访问和控制数据库</p>
<ul>
<li>为了运行数据库，Oracle系统所运行的所有进程和分配的内存结构的组合体</li>
<li>注意：数据库：磁盘上，永久的 数据库实例：内存中的，临时的。</li>
<li>数据文件，控制文件，日志文件，表空间：</li>
</ul>
<p><strong>数据文件</strong></p>
<ul>
<li>扩展名是.DBF，用于存储数据库数据的文件</li>
<li>数据库表和数据文件不存在一对一对应关系</li>
</ul>
<p><strong>l控制文件</strong></p>
<ul>
<li>扩展名是.CTL，是数据库启动及运行所必需的文件</li>
<li>默认包含3个控制文件，各个控制文件内容相同</li>
</ul>
<p><strong>l日志文件</strong></p>
<ul>
<li>扩展名是.LOG，它记录了对数据的所有更改信息</li>
<li>多个日志文件组之间循环使用</li>
</ul>
<p><strong>l表空间</strong></p>
<ul>
<li>每个Oracle数据库都是由若干个表空间构成，用户在数据库中建立的所有内容都被存储到表空间中</li>
<li>创建数据库时会自动创建若干表空间</li>
<li>每个Oracle数据库都是由若干个表空间构成，用户在数据库中建立的所有内容都被存储到表空间中</li>
</ul>
<p>创建数据库时会自动创建若干表空间：SYSAUX  SYSTEMTEMP  USER  UNDO,分别对应Oradata目录下的5个DBF文件。</p>
]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库中的函数、视图和索引</title>
    <url>/2018/02/20/2018-02-20-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E3%80%81%E8%A7%86%E5%9B%BE%E5%92%8C%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h1 id="1-Oracle函数"><a href="#1-Oracle函数" class="headerlink" title="1. Oracle函数"></a>1. Oracle函数</h1><p>Oracle SQL 提供了用于执行特定操作的专用函数。这些函数大大增强了 SQL 语言的功能。函数可以接受零个或者多个输入参数，并返回一个输出结果。 Oracle 数据库中主要使用两种类型的函数：</p>
<a id="more"></a>

<p><strong>1. 单行函数：</strong><br>对每一个函数应用在表的记录中时，只能输入一行结果，返回一个结果，比如： MOD(x,y)返回 x 除以 y 的余数（ x 和 y 可以是两个整数，也可以是表中的整数列）。常用的单行函数有：对每一个函数应用在表的记录中时，只能输入一行结果，返回一个结果，比如： MOD(x,y)返回 x 除以 y 的余数（ x 和 y 可以是两个整数，也可以是表中的整数列）。<br><strong>常用的单行函数有：</strong><br> 字符函数：对字符串操作。<br> 数字函数：对数字进行计算，返回一个数字。<br> 转换函数：可以将一种数据类型转换为另外一种数据类型。<br> 日期函数：对日期和时间进行处理。</p>
<p><strong>2. 聚合函数：</strong><br>聚合函数同时可以对多行数据进行操作，并返回一个结果。比如 SUM(x)返回结果集中 x 列的总合。聚合函数同时可以对多行数据进行操作，并返回一个结果。比如 SUM(x)返回结果集中 x 列的总合。</p>
<h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><p>字符函数接受字符参数，这些参数可以是表中的列，也可以是一个字符串表达式。下表<br>列出了常用的字符函数。<br><img src="https://img-blog.csdnimg.cn/20190107170825907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190107170852730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h2><p>数字函数接受数字参数，参数可以来自表中的一列，也可以是一个数字表达式。</p>
<p><img src="https://img-blog.csdnimg.cn/20190107170921696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>说明：</strong></p>
<ol>
<li><p>ROUND(X[,Y])，四舍五入。<br>在缺省 y 时，默认 y=0；比如： ROUND(3.56)=4。<br>y 是正整数，就是四舍五入到小数点后 y 位。 ROUND(5.654,2)=5.65。<br>y 是负整数，四舍五入到小数点左边|y|位。 ROUND(351.654,-2)=400。</p>
</li>
<li><p>TRUNC(x[,y])，直接截取，不四舍五入。<br>在缺省 y 时，默认 y=0；比如： TRUNC (3.56)=3。<br>y 是正整数，就是四舍五入到小数点后 y 位。 TRUNC (5.654,2)=5.65。<br>y 是负整数，四舍五入到小数点左边|y|位。 TRUNC (351.654,-2)=300。</p>
</li>
</ol>
<h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><p>日期函数对日期进行运算。常用的日期函数有：<br>1.SYSDATE:显示系统当前日期</p>
<pre><code>例：select sysdate from dual</code></pre><ol start="2">
<li><p>ADD_MONTHS(date,n)，在某一个日期 date 上，加上指定的月数 n，返回计算后的新日期。date 表示日期， n 表示要加的月数。</p>
<p>例：select add_months(sysdate, 6) six_month_later from dual;</p>
<ol start="3">
<li>LAST_DAY(date)，返回指定日期当月的最后一天。<br>例：select last_day(sysdate) from dual;</li>
</ol>
</li>
</ol>
<p>4.NEXT_DAY(date,char)：返回date日期的下一个周几，周几是由char决定的。</p>
<pre><code>例：select NEXT_DAY(SYSDATE, ‘星期三’) from dual;</code></pre><p>Char:中文环境中用中文，英文环境中用英文。<br>5.MONTHS_BETWEEN(DATE1,DATE2):计算date1和date2两个日期间的间隔。注意是date1-date2</p>
<pre><code>例：select months_between(sysdate, ’17-1月-17’) from dual;</code></pre><p>例：计算emp表中职员入职多少个月。</p>
<ol start="3">
<li>ROUND(d[,fmt])，返回一个以 fmt 为格式的四舍五入日期值， d 是日期， fmt 是格式<br>模型。默认 fmt 为 DDD，即月中的某一天。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果 fmt 为“YEAR”则舍入到某年的 1 月 1 日，即前半年舍去，后半年作为下一年。</span><br><span class="line">如果 fmt 为“MONTH”则舍入到某月的 1 日，即前月舍去，后半月作为下一月。</span><br><span class="line">例：select round(to_date(‘2009-09-25’, ‘yyyy-mm-dd’), ‘MONTH’) round_date from dual;</span><br><span class="line">例：select round(to_date(‘2009-09-25’, ‘yyyy-mm-dd’), ‘YEAR’) round_date from dual;</span><br><span class="line">例：select round(to_date(‘2009-09-25’, ‘yyyy-mm-dd’)) round_date from dual;</span><br></pre></td></tr></table></figure>

<p>与 ROUND 对应的函数是TRUNC(d[,fmt])对日期的操作， TRUNC 与 ROUND 非常相似，只<br>是不对日期进行舍入，直接截取到对应格式的第一天。</p>
<pre><code>例：select TRUNC(to_date(‘2009-09-25’, ‘yyyy-mm-dd’), ‘MONTH’) trunc_date from dual;
例：select TRUNC (to_date(‘2009-09-25’, ‘yyyy-mm-dd’), ‘YEAR’) trunc_date from dual;
例：select TRUNC (to_date(‘2009-09-25’, ‘yyyy-mm-dd’)) trunc_date from dual;</code></pre><ol start="4">
<li>EXTRACT(fmt FROM d)，提取日期中的特定部分。<br>fmt 为： YEAR、MONTH、DAY、HOUR、MINUTE、SECOND。其中 YEAR、MONTH、DAY可以为 DATE 类型匹配，也可以与TIMESTAMP 类型匹配；但HOUR、MINUTE、SECOND 必须与 TIMESTAMP 类型匹配。<br>例：EXTRACT 函数示例</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select sysdate “date”,</span><br><span class="line">Extract(year from sysdate) “year”</span><br><span class="line">Extract(month from sysdate) “month”</span><br><span class="line">Extract(day from sysdate) “day”</span><br><span class="line">Extract(hour from systimestamp) “hour”</span><br><span class="line">Extract(minute from systimestamp) “minute”</span><br><span class="line">Extract(second from systimestamp) “second”</span><br><span class="line">From dual;</span><br></pre></td></tr></table></figure>

<h2 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h2><p>转换函数将值从一种数据类型转换为另外一种数据类型。常用的转换函数有：</p>
<ol>
<li><p>TO_CHAR(d|n[,fmt])<br>把日期和数字转换为制定格式的字符串。 fmt 是格式化字符串，日期的格式化字符串前<br>面已经学习过。<br>代码演示：TO_CHAR 对日期的处理<br>SQL&gt; SELECT TO_CHAR(SYSDATE,’YYYY”年”MM”月”DD”日” HH24:MI:SS’) “date” FROM DUAL;</p>
</li>
<li><p>TO_DATE(x [,fmt])<br>将一个格式字符串转换成日期</p>
</li>
<li><p>NVL(x,value)<br>如果 x 为空，返回 value，否则返回 x。<br>案例 7：对工资是 2000 元以下的员工，如果没有发奖金，每人奖金 100 元。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码演示：NVL 函数</span><br><span class="line">SQL&gt; SELECT ENAME,JOB,SAL,NVL(COMM,100) FROM EMP WHERE SAL&lt;2000;</span><br><span class="line">ENAME JOB SAL NVL(COMM,100)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>NVL2(x,value1,value2)<br>如果 x 非空，返回 value1，否则返回 value2。<br>案例 8：对 EMP 表中工资为 2000 元以下的员工，如果没有奖金，则奖金为 200 元，如<br>果有奖金，则在原来的奖金基础上加 100 元。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码演示：NVL2 函数</span><br><span class="line">SQL&gt; SELECT ENAME,JOB,SAL,NVL2(COMM,comm+100,200) &quot;comm&quot;</span><br><span class="line">2 FROM EMP WHERE SAL&lt;2000;</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>COALESCE(expr1[,expr2[,expr3]]…)<br>返回参数列表中第一个非空的表达式的结果。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：select ename,sal,comm,COALESCE(sal+comm,sal)salary FROM emp WHERE deptno=30;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>LNNVL(condition)：通常用在where子句中，返回那些不满足condition条件或者判断条件为NULL的记录。所有LNNVL也可以认为是is null 或is not true。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：获取奖金数小于500的员工的信息</span><br><span class="line">Select ename,comm from emp where lnnvl(comm&gt;=500);</span><br></pre></td></tr></table></figure>


<p><strong>1.DECODE(expr, search1,result[, search2, result2…][, default])</strong><br>DECODE用于比较参数expr的值，如果匹配到哪一个search条件，就返回对应的result结果。可以有多组search和result的对应关系，如果任何一个search条件都没有匹配到，返回最后default的值。Default参数是可选的，如果没有提供default参数值，当没有匹配到时，返回NULL。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：查询职员表，根据职员的职位计算奖金，当职位分别是MANAGER,ANALYST,SALESMAN时，奖励金额分别是薪水的1.2倍，1.1倍，1.05倍。如果不是这三个职位，则奖励金额为领取薪水值</span><br><span class="line">Select ename,job,sal, decode(job,’MANAGR’,sal*1.2, ‘ANALYST’,sal*1.1,’SALESMAN’,</span><br><span class="line">sal*1.05,sal)bonus from emp;</span><br></pre></td></tr></table></figure>




<h2 id="总结：函数可以嵌套使用"><a href="#总结：函数可以嵌套使用" class="headerlink" title="总结：函数可以嵌套使用"></a>总结：函数可以嵌套使用</h2><p>–==========字符函数：处理字符串========</p>
<h3 id="第一组"><a href="#第一组" class="headerlink" title="第一组"></a>第一组</h3><p>–ascii chr</p>
<pre><code>select ascii(&apos;a&apos;) from dual;
select char(97) from dual;</code></pre><p>–lower upperinitcap<br>–求大写A 的ascii</p>
<pre><code>select ascii (upper(&apos;a&apos;)) from dual;</code></pre><p>–求小写a的ascii</p>
<pre><code>select ascii (lower(&apos;A&apos;)) from dual;</code></pre><p>–Initcap</p>
<p>select initcap(ename) from emp;</p>
<h3 id="第二组"><a href="#第二组" class="headerlink" title="第二组"></a>第二组</h3><p>–ltrim rtrim trim<br>–注意事项  Ltrimrtrim  是字符级别的截取，在截取的时候，按照字符去匹配</p>
<pre><code>select  Ltrim(&apos;ellen&apos;,&apos;e&apos;) from dual;
select rtrim(&apos;ellenellneen&apos;,&apos;ne&apos;) from dual;
select trim(&apos;ne&apos;,from &apos;ellenellneen&apos;) from dual;</code></pre><p>–会报错，，trim的截取集只能是一个字符</p>
<pre><code>select trim(&apos;   ellen&apos;) from dual;
--去空格--</code></pre><h3 id="第三组"><a href="#第三组" class="headerlink" title="第三组"></a>第三组</h3><p>–Lpad  rpad  字符串补位函数</p>
<p>左补齐</p>
<pre><code>select lpad(&apos;hao&apos;,2,&apos;ni&apos;) from dual;
select lpad(&apos;hao&apos;,5,&apos;ni&apos;) from dual;
select lpad(&apos;hao&apos;,10,&apos;ni&apos;) from dual;</code></pre><p>右补齐</p>
<pre><code>select rpad (&apos;ni&apos;,1,&apos;hao&apos;) from dual;
select rpad (&apos;ni&apos;,5,&apos;hao&apos;) from dual;
select rpad (&apos;ni&apos;,10,&apos;hao&apos;) from dual;</code></pre><h3 id="其他组"><a href="#其他组" class="headerlink" title="其他组"></a>其他组</h3><p>–concat<br>–字符串连接：和连接运算符作用一致</p>
<pre><code>select concat (&apos;Dear&apos;,ename) from emp;</code></pre><p>–legth：查询emp员工表中员工姓名为5个字符的员工信息</p>
<pre><code>select *from emp where length(ename)=5;</code></pre><p>–substr:求子串</p>
<pre><code>select substr(&apos;Hello word&apos;,3) from dual;
select substr(&apos;Hello word&apos;,3,5) from dual;</code></pre><p>–replace:字符串替换</p>
<pre><code>select replace(&apos;shelly&apos;,&apos;el&apos;,&apos;en&apos;) from dual;</code></pre><p>可以分组去记</p>
<p>–===============数学函数===================</p>
<p>–sign :求符号</p>
<pre><code>select sign(-5) from dual;</code></pre><p>–ceil:  求上整</p>
<pre><code>select ceil(5.6) from dual;</code></pre><p>–floor  求下整</p>
<pre><code>select floor(5.6) from dual;</code></pre><p>–round   四舍五入</p>
<pre><code>select round(3.14) from dual
select round(3.14,1) from dual
select round(3.1415926,4) from dual
select round(356,-2) from dual   --一般是不用的</code></pre><p>–trunc：截断</p>
<pre><code>select trunc(3.1415926,4) from dual;
select trunc(356,-2) from dual</code></pre><p>–=============日期函数======================</p>
<pre><code>--sysdatesystimestamp（比sysdate）更精确

select sysdate from dual;

--add_months(date,1)1表示月份

select add_months(sysdate,1) from dual;

--month_between(date,date)

select months_between(sysdate,hiredate) from emp;
select month_between(sysdate,add_months(sysdate,1)) from dual;</code></pre><p>​<br>    –last_day(date)<br>    select last_day(sysdate) from dual;<br>    select last_day(‘08-2月-2018’)from dual;</p>
<pre><code>--next_day(date,char)
select next_day(sysdate,&apos;星期二&apos;) from dual;</code></pre><p>–round   四舍五入–trunc：截断也可以对日期进行操作</p>
<pre><code>select trunc(sysdate,&apos;MONTH&apos;) from dual;
select round(sysdate,&apos;MONTH&apos;) from dual;

select round(date&apos;2018-01-16&apos;,&apos;MONTH&apos;) from dual;</code></pre><p>—extract:</p>
<pre><code>select extract(year from sysdate) as 年,
extract(month from sysdate) as 月,
extract (day from sysdate) as 日,
extract (hour from systimestamp) as 时,
extract (minute from systimestamp) as 分,
extract(second from systimestamp) as 秒
from dual;</code></pre><p>–===========转换函数================</p>
<p>to_char   to_date<br>–nvl   nvl2<br>–问题：对emp表中的员工奖金为空，那么给200元奖金，如果奖金不为空，那么在原有奖金基础上加100</p>
<pre><code>update emp set comm=nvl2(comm,comm+100,200);</code></pre><p>–问题：查询emp表中所有员工的月收入</p>
<pre><code>select ename，sal+nvl(comm,0) as 月收入 from emp;
select ename,coalesec(sal+comm,sal) as 月收入 from emp;</code></pre><p>–decode<br>–案例：按照职位提升工资，如果是MANAGER，工资是原来的1.5倍，如果是ANALYST工资是原来的1.2倍<br>–如果是SALERSMAN工资是原来的1.1倍，默认情况下，工资是原来的1.05倍</p>
<pre><code>update emp01 set sal=decode(job,&apos;MANAGER&apos;,sal*1.5,&apos;ANALYST&apos;,sal*1.2
,&apos;SALERMAN&apos;，sal*1.1,sal*1.05)</code></pre><h1 id="2-数据库中的视图"><a href="#2-数据库中的视图" class="headerlink" title="2. 数据库中的视图"></a>2. 数据库中的视图</h1><h2 id="（1）什么是视图？"><a href="#（1）什么是视图？" class="headerlink" title="（1）什么是视图？"></a>（1）什么是视图？</h2><p>视图是一张虚表，就是对select查询的结果给取了一个名字。select查询的表称为基表<br>视图不会存储数据，数据存储在基表中，视图只是保存一个映射关系</p>
<pre><code>create view test as select ename,sal,job from emp;</code></pre><h2 id="（2）视图的作用"><a href="#（2）视图的作用" class="headerlink" title="（2）视图的作用"></a>（2）视图的作用</h2><pre><code>1.简化复杂查询
2.限制数据访问</code></pre><p> –简化复杂查询<br>–举例：查询每个部门的员工人数和部门名称</p>
<pre><code>select d.dname,count(*)
from dept d,emp e
where d.deptno=e.deptno
group by d.dname;</code></pre><p>可以创建视图存储上述结果</p>
<pre><code>create view numEmp as
select d.dname,count(*) co
from dept d,emp e
where d.deptno=e.deptno
group by d.dname;


问题：查询人数大于3的部门的名称和员工信息
select *from numEmp where co&gt;3;</code></pre><p><strong>–创建视图的时候，如果遇到select语句中有聚合函数，需要给聚合函数别名</strong></p>
<pre><code>   --限制数据访问举例
  create user hope identified by 123456;
  grant connect to hope;
  grant select on scott.emp to hope; --现在是可以看见整张表

create view empSimple as
select empno,ename,job,mgr,hiredate,deptno
from emp;</code></pre><p>–注意事项：<br>（1）对于视图的查询和表的查询是一样的<br> （2）视图中不包含数据，视图只是一个映射关系<br>（3）当基表发生改变时，视图也会随之改变</p>
<h3 id="（3）怎么创建和删除视图"><a href="#（3）怎么创建和删除视图" class="headerlink" title="（3）怎么创建和删除视图"></a>（3）怎么创建和删除视图</h3><p>语法：</p>
<pre><code>create view 视图名(可以起别名) as
select...from ...【with read only】
--with  read only 表示视图是一个只读视图，只能查询，不能修改</code></pre><p><strong>–分类：简单视图（创建视图的时候可以指定一个别名）</strong></p>
<pre><code>create view v_emp(“工号”,“姓名“) as
select empno,ename from emp;</code></pre><p> ‘</p>
<pre><code>create or replace view v_emp(&quot;编号&quot;,&quot;姓名‘) as
select empno,ename from emp with read only;</code></pre><p>注意事项：别名，要么没有引号，要是有引号就必须是双引号 “ “**</p>
<p>question：能不能对视图进行DML操作insert update delete？<br>    能，但是不是所用的视图都能进行DML操作<br>    牵扯到视图的分类<br>（1）非只读的简单视图可以进行DML操作，事实上是对基表的操作</p>
<pre><code>create or replace view test
   as select empno,ename from emp;

       insert into test values(1010,&apos;sheely&apos;)可以看到基表里面多了一条记录          
       是不是所有的简单视图都可以进行DML操作呢？不是的          
        create or replace view test
       as select ename,sal from emp;        
       insert into test values(&apos;haloo&apos;,5000)执行不了，不允许插入
       原因是：违反了基表的主键约束

       结论：针对视图的DML操作，不能违反基表的约束，所以并不是所有的简单的都可以</code></pre><p>（2）带有with read only  和复杂视图　　连接视图不能进行ＤＭＬ操作</p>
<p>-修改视图 replace： 没有就创建，有的话就修改</p>
<h3 id="视图的分类"><a href="#视图的分类" class="headerlink" title="视图的分类"></a>视图的分类</h3><p>简单视图：简单查询语句（不涉及到连接和聚合函数）</p>
<p>复杂视图：牵扯到聚合函数，但是不涉及到表连接</p>
<p>连接视图：涉及到表连接的视图</p>
<p>–连接视图举例：</p>
<pre><code>CREATE view  emp_dept as
select e.*,d.*
where e.deptno=d.deptno;</code></pre><h2 id="（4）什么是索引？"><a href="#（4）什么是索引？" class="headerlink" title="（4）什么是索引？"></a>（4）什么是索引？</h2><p>类比图书的目录：索引是一种加快数据访问速度的机制<br>索引需要占用磁盘空间的，维护索引需要资源开销，所以索引并不是越多越好</p>
<p>索引的分类：<br>（1）单列索引<br>（2）复合索引</p>
<p>–单列索引</p>
<pre><code>create index idx_ename on emp(ename)
语法：create index 索引名on 表名(字段名1，字段名2)</code></pre><p>–复合索引</p>
<pre><code>create index idx_ename_deptno on emp(ename,deptno);</code></pre><p>–唯一索引</p>
<pre><code>create unique index idx_ename on emp(ename);
--注意;在某一字段上创建一个唯一索引，自动会在该字段创建一个唯一约束
--删除：drop index 索引名
drop  index idx_ename;</code></pre><p>’</p>
<pre><code>--重建  alter index idx_ename rebuild;</code></pre><p><strong>注意事项：如果定义了主键约束和唯一约束，那么Oracle会再自动的创建一个唯一索引</strong></p>
<p>+++++++原创博文，转载请注明出处。+++++++++</p>
]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库的基本操作添加/修改约束以及表结构的修改序列</title>
    <url>/2018/02/19/2018-02-10-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C--%E6%B7%BB%E5%8A%A0%E4%BF%AE%E6%94%B9%E7%BA%A6%E6%9D%9F%E4%BB%A5%E5%8F%8A%E8%A1%A8%E7%BB%93%E6%9E%84%E7%9A%84%E4%BF%AE%E6%94%B9&amp;%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h1 id="1-约束"><a href="#1-约束" class="headerlink" title="1.约束"></a>1.约束</h1><h3 id="表的约束"><a href="#表的约束" class="headerlink" title="表的约束"></a>表的约束</h3><p>往表中插入数据的时候，可能出现一些问题，比如：重复插入数据，内容不对（性别）<br>——-如何保证数据库表中数据的完整性和一致性呢？约束<br><strong>常见的约束：</strong><br>主键（primary key），外键（foreign key）,唯一（unique）,非空（not null）,默认（default）,用户自定义（check）</p>
<a id="more"></a>

<h1 id="2-约束分类"><a href="#2-约束分类" class="headerlink" title="2. 约束分类"></a>2. 约束分类</h1><p>—–常见的约束有：    </p>
<ul>
<li>主键约束（primary key），</li>
<li>外键约束（foreign），</li>
<li>唯一（unique），非空（not null）</li>
<li>默认（default）</li>
<li>用户自定义约束（check）<h2 id="2-1-primary-key-主键约束"><a href="#2-1-primary-key-主键约束" class="headerlink" title="2.1 primary key 主键约束"></a>2.1 primary key 主键约束</h2></li>
</ul>
<p>什么是主键约束？  主键约束就是给表定义一个主键，什么是主键？？<br>主键只要是用来保证表记录的唯一非空的。</p>
<p>主键（PRIMARY KEY ）约束：唯一的标识表中的每一行，不能重复，不能为空。 创建主键或唯一约束后，ORACLE 会自动创建一个与约束同名的索引（UNIQUENES 为UNIQUE 唯一索引）。需要注意的是：每个表只能有且有一个主键约束。</p>
<pre><code>什么是主键约束？主键约束就是给表定义一个主键，什么是主键？
--主键主要是用来保证表记录的唯一非空的。</code></pre><p>建表的时候添加主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(stuno <span class="built_in">number</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,stuname <span class="built_in">varchar2</span>(<span class="number">10</span>),age <span class="built_in">number</span>(<span class="number">2</span>),addr <span class="built_in">varchar</span>(<span class="number">50</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'zhang'</span>,<span class="number">18</span>,<span class="string">'luoyang'</span>);</span><br></pre></td></tr></table></figure>
<p>再次插入相同记录，违法主键约束，不允许插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL&gt; insert into student values(1001,'zhang',18,'luoyang');</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'zhang'</span>,<span class="number">18</span>,<span class="string">'luoyang'</span>)</span><br><span class="line">ORA<span class="number">-00001</span>: 违反唯一约束条件 (SYS.SYS_C0010797)</span><br></pre></td></tr></table></figure>
<p>如果主键为null也不允许插入，同样是违反了主键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL&gt; insert into student values(null,'zhang',18,'luoyang');</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'zhang'</span>,<span class="number">18</span>,<span class="string">'luoyang'</span>)</span><br></pre></td></tr></table></figure>
<p>创建一张课程表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(cno <span class="built_in">number</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,cname <span class="built_in">varchar2</span>(<span class="number">20</span>),cscore <span class="built_in">number</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<p>–创建一张成绩表：学号和课程号共同作为一个主键，称为联合主键<br>一张表只能有一个主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(sno <span class="built_in">number</span>(<span class="number">4</span>),cno <span class="built_in">number</span>(<span class="number">4</span>),score <span class="built_in">number</span>(<span class="number">5</span>,<span class="number">2</span>)，<span class="keyword">constraint</span> pk_score primary <span class="keyword">key</span> (sno,cno));</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> course;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(cno <span class="built_in">number</span>(<span class="number">4</span>) <span class="keyword">constraint</span> pk_course primary <span class="keyword">key</span> ,cname <span class="built_in">varchar2</span>(<span class="number">20</span>),cscore <span class="built_in">number</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<pre><code>特别说明：不推荐大家使用复合主键。</code></pre><h2 id="2-2-unique-唯一"><a href="#2-2-unique-唯一" class="headerlink" title="2.2 unique 唯一"></a>2.2 unique 唯一</h2><p>唯一（UNIQUE ）约束：在表中每一行中所定义的这列或这些列的值都不能相同。必须保证唯一性。否则就会违法约束条件。用于指定列的值不能重复，可以为  null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">举例：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user2(<span class="keyword">id</span> <span class="built_in">number</span> <span class="keyword">unique</span>,<span class="keyword">name</span> <span class="built_in">varchar2</span>(<span class="number">30</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user2 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">111</span>);//id 输入重复的值是会报错</span><br><span class="line">注意：oracle 中 中 unique  可以为 null ，而且允许多行为 nul</span><br></pre></td></tr></table></figure>
<p><strong>唯一约束：</strong></p>
<p>–问题：student(sno,sname,age,addr,idcard)主键：sno，idcard(身份证号)：可以为空，但是如果写的话要求唯一<br>–创建唯一约束：</p>
<ol>
<li>(1)创建唯一约束方法一</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">sno <span class="built_in">number</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</span><br><span class="line">sname <span class="built_in">varchar2</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">age <span class="built_in">number</span>(<span class="number">3</span>),</span><br><span class="line">addr <span class="built_in">varchar2</span>(<span class="number">50</span>),</span><br><span class="line">idcard <span class="built_in">number</span>(<span class="number">18</span>) <span class="keyword">unique</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>2)创建唯一约束方法二</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">sno <span class="built_in">number</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</span><br><span class="line">sname <span class="built_in">varchar2</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">age <span class="built_in">number</span>(<span class="number">3</span>),</span><br><span class="line">addr <span class="built_in">varchar2</span>(<span class="number">50</span>),</span><br><span class="line">idcard <span class="built_in">number</span>(<span class="number">18</span>) <span class="keyword">constraint</span> uk_idcard <span class="keyword">unique</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>（3）创建唯一约束方法三</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">sno <span class="built_in">number</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</span><br><span class="line">sname <span class="built_in">varchar2</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">age <span class="built_in">number</span>(<span class="number">3</span>),</span><br><span class="line">addr <span class="built_in">varchar2</span>(<span class="number">50</span>),</span><br><span class="line">idcard <span class="built_in">number</span>(<span class="number">18</span>),<span class="keyword">constraint</span> uk_idcard <span class="keyword">unique</span>(idcard));</span><br></pre></td></tr></table></figure>
<h2 id="2-3-not-null-非空"><a href="#2-3-not-null-非空" class="headerlink" title="2.3 not null 非空"></a>2.3 not null 非空</h2><p>非空（NOT NULL ）约束：顾名思义，所约束的列不能为 NULL 值。否则就会报错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">举例：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user1(<span class="keyword">id</span> <span class="built_in">number</span>,<span class="keyword">name</span> <span class="built_in">varchar2</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user1 <span class="keyword">values</span>(<span class="number">001</span>,<span class="string">''</span>);//会报错</span><br></pre></td></tr></table></figure>
<p>–非空约束和默认约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">sno <span class="built_in">number</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,   <span class="comment">--主键约束</span></span><br><span class="line">sname <span class="built_in">varchar2</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--非空约束</span></span><br><span class="line">age <span class="built_in">number</span>(<span class="number">3</span>) <span class="keyword">default</span> <span class="number">18</span>,    <span class="comment">--默认约束</span></span><br><span class="line">addr <span class="built_in">varchar2</span>(<span class="number">50</span>),</span><br><span class="line">idcard <span class="built_in">number</span>(<span class="number">18</span>) <span class="keyword">unique</span>);   <span class="comment">--唯一约束</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4-foreign-key-外键约束-references"><a href="#2-4-foreign-key-外键约束-references" class="headerlink" title="2.4 foreign key 外键约束 references"></a>2.4 foreign key 外键约束 references</h2><p><strong>外键（FOREIGN KEY ）约束</strong>：用来维护从表（Child Table）和主表（Parent Table）之间的引用完整性.能够维护数据库的数据一致性，数据的完整性。防止错误的垃圾数据入库； 用于定义主表和从表之间的关系，外键约束要定义在从表上，主表则必需具有主键约束或是 e unique  约束，当定义外键约束后，要求外键列数据必需在<br><strong>主表的主键列存在或是为  null</strong></p>
<p>外键约束  外键  在另外一张表中是主键<br>student(sno sname,age,addr.udcard)  主键sno<br>course （cno，cname ccouse）主键sno<br>score （sno cno score）主键（sno ，cno）  外键：一个是sno  一个是cno<br>——–外键是做什么用的？如果student中没有学号1001学生信息，那么score中也不应该有该学生成绩<br>            在score插入数据的时候，如果学生student中不存在对应学号或者课程表中不存在对应课程   则不允许插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">class</span>(<span class="keyword">id</span> <span class="built_in">number</span> primary <span class="keyword">key</span>,<span class="keyword">name</span> <span class="built_in">varchar2</span>(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stus(<span class="keyword">id</span> <span class="built_in">number</span> primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar2</span>(<span class="number">36</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">classid <span class="built_in">number</span> <span class="keyword">references</span> <span class="keyword">class</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line">特别说明：froeign key  外键的细节</span><br><span class="line">1 、外键指向主键列；</span><br><span class="line">2 、外键可以指向 unique  列；</span><br><span class="line">3 、建表时先建主表，再建从表；删除表先删从表，再删主表。</span><br><span class="line">4 、外键列属性值要与主键或 unique  列属性值的类型保持一致</span><br><span class="line">5 、外键列的值，必需在主键列中存在。但外键列的值允许为 null</span><br></pre></td></tr></table></figure>
<h3 id="外键约束："><a href="#外键约束：" class="headerlink" title="**外键约束："></a>**外键约束：</h3><p><strong>外键：在另外一张表中是主键**</strong></p>
<p>–student(sno,sname,age,addr,idcard)  主键：sno<br>–course(cno,cname,cscore)  主键：cno<br>–score(sno,cno,score)主键： (sno,cno)   外键：sno   外键: cno</p>
<p>外键做什么用？如果student表中没有1001学生信息，那么score表中也不应该有该学生的成绩。</p>
<p>往成绩表插入数据的时候，如果学生表中不存在对应的学号，或者课程表中不存在对应的课程，则不允许插入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">sno <span class="built_in">number</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</span><br><span class="line">sname <span class="built_in">varchar2</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">age <span class="built_in">number</span>(<span class="number">3</span>),</span><br><span class="line">addr <span class="built_in">varchar2</span>(<span class="number">50</span>),</span><br><span class="line">idcard <span class="built_in">number</span>(<span class="number">18</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(</span><br><span class="line">cno <span class="built_in">number</span>(<span class="number">4</span>)primary <span class="keyword">key</span>,</span><br><span class="line">cname <span class="built_in">varchar2</span>(<span class="number">20</span>),</span><br><span class="line">cscore <span class="built_in">number</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<p><strong>1.创建外键约束的第一种方式</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">stuno <span class="built_in">number</span>(<span class="number">4</span>) <span class="keyword">references</span> student(sno),   <span class="comment">--创建第一个外键约束</span></span><br><span class="line">couno <span class="built_in">number</span>(<span class="number">4</span>) <span class="keyword">references</span> course(cno),    <span class="comment">--创建第二个外键约束</span></span><br><span class="line">score <span class="built_in">number</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">constraint</span> pk_score primary <span class="keyword">key</span>(stuno,couno));  <span class="comment">--创建一个主键约束</span></span><br></pre></td></tr></table></figure>
<p><strong>2.创建外键约束的第二种方式</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">stuno <span class="built_in">number</span>(<span class="number">4</span>) <span class="keyword">constraint</span> fk_stuno <span class="keyword">references</span> student(sno),  <span class="comment">--创建第一个外键约束</span></span><br><span class="line">couno <span class="built_in">number</span>(<span class="number">4</span>) <span class="keyword">constraint</span> fk_couno <span class="keyword">references</span> course(cno),   <span class="comment">--创建第二个外键约束</span></span><br><span class="line">score <span class="built_in">number</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">constraint</span> pk_score primary <span class="keyword">key</span>(stuno,couno));</span><br></pre></td></tr></table></figure>
<p><strong>3.创建外键约束的第三种方式</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(stuno <span class="built_in">number</span>(<span class="number">4</span>),</span><br><span class="line">couno <span class="built_in">number</span>(<span class="number">4</span>),</span><br><span class="line">score <span class="built_in">number</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">constraint</span> fk_stuno <span class="keyword">foreign</span> <span class="keyword">key</span>(stuno) <span class="keyword">references</span> student(sno),</span><br><span class="line"><span class="keyword">constraint</span> fk_couno <span class="keyword">foreign</span> <span class="keyword">key</span>(couno) <span class="keyword">references</span> course(cno),</span><br><span class="line"><span class="keyword">constraint</span> pk_score primary <span class="keyword">key</span>(stuno,couno));</span><br></pre></td></tr></table></figure>
<p><strong>外键约束总结</strong><br>    –总结1：在一张表中只能有一个主键，但是可以有多个外键。<br>    –总结2：作为外键的字段名，不一定必须和被参考表一致。<br>    –总结3：定义了外键约束之后，往表中插入一条记录，外键值会参考其父表中主键的值，只有父表中存在该值才能插入成功</p>
<p>–往student表中插入3条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'zhangsan'</span>,<span class="number">19</span>,<span class="string">'henanluoyang'</span>,<span class="number">98765432123456789</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">'lisi'</span>,<span class="number">19</span>,<span class="string">'henanluoyang'</span>,<span class="number">98765432123456789</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1003</span>,<span class="string">'wangwu'</span>,<span class="number">19</span>,<span class="string">'henanluoyang'</span>,<span class="number">98765432123456789</span>);</span><br></pre></td></tr></table></figure>
<p>查看student表中所有内容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<p>查看course表中所有记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> course;</span><br></pre></td></tr></table></figure>
<p>–思考：insert into score values(1003,9997,89);能成功吗？不能，因为course表中不存在课程号为9997的课程</p>
<p>–思考：insert into score values(1003,9998,89);能成功吗？可以，因为1003在student表中存在，9998在course表中存在</p>
<p>–总结4：定义外键约束之后，删除父表中的记录，需要先将相关子表的记录删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> sno=<span class="number">1003</span>; <span class="comment">--删除不掉，提示： 违反完整约束条件 (SYS.SYS_C0010808) - 已找到子记录</span></span><br><span class="line"><span class="comment">--正确的做法：</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> score <span class="keyword">where</span> stuno=<span class="number">1003</span>;  <span class="comment">--先删子记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> sno=<span class="number">1003</span>;  <span class="comment">--后删父记录</span></span><br></pre></td></tr></table></figure>
<h2 id="2-5-check-检查，用户自定义约束"><a href="#2-5-check-检查，用户自定义约束" class="headerlink" title="2.5 check 检查，用户自定义约束"></a>2.5 check 检查，用户自定义约束</h2><p>条件（CHECK ）约束：表中每行都要满足该约束条件。条件约束既可以在表一级定义<br>也可以在列一级定义。在一列上可以定义任意多个条件约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">举例：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user4(<span class="keyword">id</span> <span class="built_in">number</span> primary <span class="keyword">key</span>,</span><br><span class="line">sal <span class="built_in">number</span> <span class="keyword">check</span>(sal&gt;=<span class="number">1000</span> <span class="keyword">and</span> sal&lt;=<span class="number">2000</span>),</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">check</span>(sex <span class="keyword">in</span>(<span class="string">'男'</span>,<span class="string">'女'</span>)));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user4 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1000</span>,<span class="string">' 男'</span>);//sal  列的值不满足 1000 至 至 2000</span><br></pre></td></tr></table></figure>
<p>用户自定义约束(检查约束)<br><strong>check(约束条件)</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">sno <span class="built_in">number</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</span><br><span class="line">sname <span class="built_in">varchar2</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">age <span class="built_in">number</span>(<span class="number">3</span>) <span class="keyword">default</span> <span class="number">18</span> <span class="keyword">check</span>(age <span class="keyword">between</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">45</span>),   <span class="comment">---定义学生年龄默认为18，自定义约束条件为在10到45岁之间</span></span><br><span class="line">addr <span class="built_in">varchar2</span>(<span class="number">50</span>),</span><br><span class="line">idcard <span class="built_in">number</span>(<span class="number">18</span>) <span class="keyword">unique</span>);                               <span class="comment">------身份证号唯一性约束条件</span></span><br></pre></td></tr></table></figure>
<p>定义学生性别必须为男或者女</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">sno <span class="built_in">number</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</span><br><span class="line">sname <span class="built_in">varchar2</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">gender <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">check</span>(gender <span class="keyword">in</span>(<span class="string">'男'</span>,<span class="string">'女'</span>))，                   <span class="comment">-------定义学生性别必须为男或者女</span></span><br><span class="line">age <span class="built_in">number</span>(<span class="number">3</span>) <span class="keyword">default</span> <span class="number">18</span> <span class="keyword">check</span>(age <span class="keyword">between</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">45</span>),</span><br><span class="line">addr <span class="built_in">varchar2</span>(<span class="number">50</span>),</span><br><span class="line">idcard <span class="built_in">number</span>(<span class="number">18</span>) <span class="keyword">unique</span>);</span><br></pre></td></tr></table></figure>
<p>总结：定义了完整性约束之后，表中记录的插入，删除，修改必须符合表的完整性约束条件，<br>                如果违反了完整性约束条件，则不允许操作</p>
<h1 id="二、Oracle修改表结构"><a href="#二、Oracle修改表结构" class="headerlink" title="二、Oracle修改表结构"></a>二、Oracle修改表结构</h1><p><strong>修改表结构</strong></p>
<p>–问题：给student表添加字段regdate类型是date;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> regdate <span class="built_in">date</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> province <span class="built_in">varchar2</span>(<span class="number">350</span>);</span><br></pre></td></tr></table></figure>
<p>删除刚才添加的字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> <span class="keyword">column</span> regdate;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span>(province,regdate);</span><br></pre></td></tr></table></figure>
<p>–修改字段类型和长度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">modify</span> idcard <span class="built_in">char</span>(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">modify</span> idcard <span class="built_in">char</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190106161154130.png" alt="在这里插入图片描述"><br>修改表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">rename</span> <span class="keyword">to</span> stu;</span><br></pre></td></tr></table></figure>
<p>修改字段名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">rename</span> <span class="keyword">column</span> gender <span class="keyword">to</span> sex;</span><br></pre></td></tr></table></figure>
<h3 id="4-给表添加约束"><a href="#4-给表添加约束" class="headerlink" title="4.给表添加约束"></a>4.给表添加约束</h3><p>知识点4：如果建表的时候，没有添加约束，那么建好表之后，如何给表添加约束？<br>drop table stu cascade constraints;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">sno <span class="built_in">number</span>(<span class="number">4</span>),</span><br><span class="line">sname <span class="built_in">varchar2</span>(<span class="number">20</span>),</span><br><span class="line">gender <span class="built_in">char</span>(<span class="number">2</span>)，</span><br><span class="line">age <span class="built_in">number</span>(<span class="number">3</span>),</span><br><span class="line">addr <span class="built_in">varchar2</span>(<span class="number">50</span>),</span><br><span class="line">idcard <span class="built_in">number</span>(<span class="number">18</span>));</span><br></pre></td></tr></table></figure>

<p>–添加主键约束</p>
<pre><code>alter table student add constraint pk_sno primary key(sno);</code></pre><p>–添加唯一约束</p>
<pre><code>alter table student add constraint uk_idcard unique(idcard);</code></pre><p>–添加检查约束</p>
<pre><code>alter table student add constraint ck_age check(age between 18 and 50);</code></pre><p>–添加非空约束</p>
<pre><code>alter table student modify sname not null;</code></pre><p>–添加默认约束</p>
<pre><code>alter table student modify age default 18;
create table score(sno number(4),score number(5,2));</code></pre><p>–添加外键约束<br>alter table score add constraint fk_sno foreign key(sno) references student(sno);</p>
<p>–禁止某个约束</p>
<pre><code>alter table score disable constraint fk_sno;</code></pre><p>–启用某个约束</p>
<pre><code>alter table score enable constraint fk_sno;</code></pre><p>–删除约束</p>
<pre><code>alter table score drop constraint fk_sno;</code></pre><p>–删除student表的主键约束：</p>
<pre><code>alter table student drop primary key;</code></pre><h2 id="5-序列"><a href="#5-序列" class="headerlink" title="5.序列"></a>5.序列</h2><p>–序列是什么？有序的数字组成的一个排列   1 2 3 4 5 6 7<br>–做什么用？序列是一个独立的数据库对象，主要用来生成主键<br>–怎么用?</p>
<p>–创建序列：</p>
<pre><code>create sequence seq01 --seq01序列名
start with 3          --序列的起始值
increment by 1        --步长
maxvalue 9999         --序列的最大值
minvalue 0            --序列的最小值
nocycle               --nocycle(表示序列不循环)|cycle(表示序列循环使用)
cache 20;             --cache 20(为了加快序列的生成速度，每次生成20个值，放到缓存中)|nocache（不往缓存中存放序列值，使用一次，生成一次）</code></pre><p>–currval:返回序列的当前值，不会引起序列自增<br>–nextval：返回序列的下一个值，会引起序列自增<br>–查看序列的下一个值，会引起序列自增<br><code>select seq01.nextval from dual;</code><br>–第一次使用序列的时候，必须使用 序列名.nextval</p>
<p>–查看序列的当前值<br>    select seq01.currval from dual;</p>
<p><strong>–序列的使用：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(seq01.nextval,<span class="string">'zhang'</span>,<span class="string">'男'</span>,<span class="number">18</span>,<span class="string">'河南信阳'</span>,<span class="string">'123456789987654321'</span>);</span><br></pre></td></tr></table></figure>
<p>如果下一个表还要引用这个序列则接着这个序列自动增加。</p>
<p><strong>–注意事项：一个sequence可以供多张表使用的。可能造成主键值的不连续。</strong></p>
<p>–删除序列：<br>drop sequence seq01;</p>
<p><strong>整理不易，转载请注明出处。</strong></p>
]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库中的高级查询以及表连接/内连接/外连接</title>
    <url>/2018/02/18/2018-02-18-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2%E4%BB%A5%E5%8F%8A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E5%86%85%E8%BF%9E%E6%8E%A5%E5%A4%96%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p><strong>主要针对以下问题进行讲解：</strong><br>1.列别名和表别名<br>2.select…from where…group by….having….order by…<br>3.order  by  排序 正序，逆序，单列排序，多列排序<br>4.rownum  rowid  Oracle的伪列<br>5.函数：单行函数（日期函数，字符函数，数学函数，转换函数，其他），多行函数<br>6.聚合函数（max ,min avg,sum,count）<br>7.group by 分组<br>8.having关键字</p>
<a id="more"></a>

<h1 id="1-列别名和表别名"><a href="#1-列别名和表别名" class="headerlink" title="1.列别名和表别名"></a>1.列别名和表别名</h1><h2 id="加类别名"><a href="#加类别名" class="headerlink" title="加类别名"></a>加类别名</h2><p> 语法： 字段名  as 字段别名<br> select ‘dear ‘||ename from emp;<br> 针对表中字段的别名称为列别名</p>
<p> 第一种写法： select ‘dear ‘||ename as 姓名 from emp;<br>                              as 是可以省略的<br> 第二种写法：别名可以加双引号  select ‘dear ‘||ename “姓名” from emp;<br>              双引号可以省略<br>              有一种情况双引号不能省略：别名中有空格，双引号不能省略</p>
<h2 id="表别名"><a href="#表别名" class="headerlink" title="表别名"></a>表别名</h2><pre><code>语法 ： 表名  表别名</code></pre><p>–查询10部门的员工的姓名和工作<br>      select ename,sal,job from emp where deptno=10;<br> –给emp表一个别名 语法 ： 表名  表别名<br> select e.ename,e.sal,e.job from emp e where e.deptno=10;<br> select ename,sal,job from emp e where deptno=10;          一张表可以这样不会出问题，但是多张表后就不可以了。</p>
<pre><code>--规则：一旦给了表别名后，所有字段的使用都要：表别名.字段名
                   --  注意  ：表别名是没有as的</code></pre><h2 id="2-select…from-where…group-by…-having…-order-by…"><a href="#2-select…from-where…group-by…-having…-order-by…" class="headerlink" title="2.select…from where…group by….having….order by…"></a>2.select…from where…group by….having….order by…</h2><pre><code>注意事项：（1）select ...from...必不可少的
               eg：select sysdate from dual;
          （2）该语句的执行顺序，按照这样的顺序where...group by...having...order by...
          （3）这些关键字不能掉换顺序，可以没有，但是如果有的话，是不能掉换顺序的</code></pre><h2 id="3-order-by-排序-正序，逆序，单列排序，多列排序"><a href="#3-order-by-排序-正序，逆序，单列排序，多列排序" class="headerlink" title="3.order  by  排序 正序，逆序，单列排序，多列排序"></a>3.order  by  排序 正序，逆序，单列排序，多列排序</h2><pre><code>   单列排序

问题：查询emp表中员工的姓名，工资，按照工资降序排序
select ename,sal from emp order by sal desc;
问题：查询emp表中员工的姓名，工资，按照工资升序排序
 select ename,sal from emp order by sal asc;
  asc可以省略，默认情况下就是升序排列

  --总结：语法结构：select....from...order by 字段名  asc/desc
          --ASC是升序，desc是降序  如果不写默认是升序</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">问题：查询部门20的员工的姓名和工资，并且按照工资进行降序排序</span><br><span class="line">select  ename,sal from emp where deptno=20 order by sal desc;</span><br><span class="line"></span><br><span class="line">多列排序</span><br><span class="line">--问题：查询emp表中的员工的姓名，部门编号，工资，先按照部门进行升序排列，同部门内部按照工资进行降序排列</span><br><span class="line"> select  ename,deptno,sal from emp where deptno=20 order by deptno asc,sal desc;</span><br></pre></td></tr></table></figure>

<p><strong>多列排序总结：<br>                    （1）多列排序语法   order by 字段名1 asc|desc 字段名2 asc|desc<br>                    （2）多列排序的执行顺序，先按照字段1排序，然后在字段1排序的基础上，然后再按照字段2排序，，，，以此往下</strong></p>
<h2 id="4-rownum-rowid-Oracle的伪列"><a href="#4-rownum-rowid-Oracle的伪列" class="headerlink" title="4.rownum rowid  Oracle的伪列"></a>4.rownum rowid  Oracle的伪列</h2><h3 id="rownum"><a href="#rownum" class="headerlink" title="rownum"></a>rownum</h3><p>  主要是用来做分页过程（web开发中）**</p>
<pre><code> select *from emp;

   select rownum,emp.*from emp;      （emp.*   别名）
--rownum 相当于给查询结果的每一行编一个序列，并没有存储在emp表中
   select rownum ，e.* from emp e where deptno=30;                              
          --可以看出rownum是动态变化的</code></pre><figure class="highlight"><table><tr><td class="code"><pre><span class="line">问题1：查询emp表的前五条记录</span><br><span class="line">           <span class="keyword">select</span>  *<span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">rownum</span>&lt;=<span class="number">5</span>;</span><br><span class="line">     问题2：查询emp表中的3-5条记录</span><br><span class="line">           select  *from emp where rownum&gt;=3 and rownum&lt;=5; 这样是查询不出来的，因为&gt;在rownum是无法使用的</span><br><span class="line">           <span class="keyword">select</span>  <span class="keyword">rownum</span> ro,e.*<span class="keyword">from</span> emp e <span class="keyword">where</span> ro&gt;=<span class="number">3</span> <span class="keyword">and</span> ro&lt;=<span class="number">5</span>;同样解决不了。</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">select</span>  * <span class="keyword">from</span>(<span class="keyword">select</span>  <span class="keyword">rownum</span> ro,e.*<span class="keyword">from</span> emp e) <span class="keyword">where</span> ro&gt;=<span class="number">3</span> <span class="keyword">and</span> ro&lt;=<span class="number">5</span>;   这样就可以使用了（子查询）</span><br><span class="line">             &gt;   &gt;=符号是是不管用的</span><br></pre></td></tr></table></figure>
<pre><code>总结：（1）rownum&lt;2   rownum&lt;=2  rownum=1 这样是可以使用的
                --不能是rownum&gt;2或者是rownum&gt;=2  rownum=2</code></pre><p>​            </p>
<p><strong>–重点</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">问题3：查询emp表中工资最高的前五名的员工姓名，工作，工资</span><br><span class="line">      <span class="keyword">select</span> ename,job,sal <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">rownum</span>&lt;=<span class="number">5</span> <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;   </span><br><span class="line">                                               //查询结果是不正确的，因为只对先进行取前五条，再进行了排序</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">select</span> *<span class="keyword">from</span> (<span class="keyword">select</span> ename,job,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>)x <span class="keyword">where</span> <span class="keyword">rownum</span>&lt;=<span class="number">5</span>; 这样是正确的</span><br><span class="line">要先排序，再取前五行</span><br><span class="line"></span><br><span class="line">问题4：查询emp表中工资最高的3-5名员工的姓名，工作，工资</span><br></pre></td></tr></table></figure>

<pre><code>--分析   --（1）select  ename ,job,sal from emp order by sal desc   --记为x
            --（2）取x得3-5行:select *from (select rownum ro,x.* from x) where ro&gt;=3 and ro&lt;=5;
            --（3）替换 select *from (select rownum ro,x.* from (select  ename ,job,sal from emp order by sal desc)x) where ro&gt;=3 and ro&lt;=5;</code></pre><p>​         </p>
<h3 id="rowid"><a href="#rowid" class="headerlink" title="rowid"></a>rowid</h3><pre><code> **:表示的记录的物理地址，不随记录的在查询结果中的顺序的改变而改变，唯一的且固定的
--并没有写在表结构中**
select rowid,e.*from emp e;

select rowid ,e.* from emp e where ename=&apos;CLARK&apos;;</code></pre><p>​        </p>
<h3 id="聚合函数（max-min-avg-sum-count）"><a href="#聚合函数（max-min-avg-sum-count）" class="headerlink" title="聚合函数（max ,min avg,sum,count）"></a>聚合函数（max ,min avg,sum,count）</h3><pre><code>问题1：求emp表中员工的总数

select  count(*) from emp;   求记录的总数
也可以是这种形式
select count(empno) from emp;

问题2：求emp表中工资最高的那个员工的工资

select max(SAL) FROM EMP;

问题3：求emp表中工资最低的员工的工资

select min(sal) from emp;

问题4：求该公司员工的平均工资
select avg(sal) from emp;

问题5：求该公司每个月一个总开支（工资和奖金）
select sum(sal+comm) from emp;   //此处结果有问题   null和数值不能直接相加
select sum(sal+nvl(comm,0)) from emp; </code></pre><p>   <strong>—补充：nvl(comm,0)  :判断comm是否为null  要是null 返回为0，要不是null 返回comm</strong></p>
<h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><p>语法：sum(distinct|all)<br>参数：all表示对所有的值 (缺省),distinct只对不同的值<br>解释：求总和</p>
<pre><code>示例：
select sum(distinct sal) from emp;
select sum(all sal) from emp;</code></pre><h3 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h3><p>语法：avg(distinct|all)<br>参数：all表示对所有的值 (缺省),distinct只对不同的值<br>解释：求平均值</p>
<pre><code>示例：
select avg(distinct sal) from emp;
select avg(all sal) from emp;</code></pre><h3 id="max"><a href="#max" class="headerlink" title="max"></a>max</h3><p>语法：max(distinct|all)</p>
<p>参数：all表示对所有的值 (缺省),distinct只对不同的值<br>解释：求最大值</p>
<pre><code>示例：
select max(distinct sal) from emp;</code></pre><h3 id="min"><a href="#min" class="headerlink" title="min"></a>min</h3><p>语法：min(distinct|all)<br>参数：all表示对所有的值 (缺省),distinct只对不同的值<br>解释：求最小值</p>
<pre><code>示例：
select min(all sal) from emp;</code></pre><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>语法：count(distinct|all)</p>
<p>参数：all表示对所有的值 (缺省),distinct只对不同的值(相同值只取一次)<br>解释：求记录、数据个数。</p>
<pre><code>示例：
select count(sal) from emp;
select count(distinct sal) from emp;</code></pre><h3 id="group-by-分组"><a href="#group-by-分组" class="headerlink" title=".group by 分组"></a>.group by 分组</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">问题1：求emp表中每个部门的员工的总人数，请列出部门的编号和总人数,和平均工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> deptno,<span class="keyword">count</span>(*),agv(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line">问题2：求部门10的员工的个数，员工的平均工资，请列出部门的编号和总人数，以及平均工资</span><br></pre></td></tr></table></figure>

<pre><code>--group by 使用规则：
         --出现在select后面的字段，除了聚合函数之外，其他字段内容必须出现在group by之后
         --如果不按照上述规则写，报错，不是单组分组函数，使用会出错。报错，不是单组函数或者不是group by表达式</code></pre><p>​<br>  问题3：查询部门10的员工人数和平均工资<br>​     select count(*),avg(sal) from emp where deptno=10;<br>​<br>     –多字段分组的一个问题</p>
<p>  问题4:查询emp表中每个部门，每个职位的员工人数；</p>
<p>  select deptno,job,count(*) from emp group by deptno,job;<br>  –注意：多字段分组，分组的顺序是按照字段的先后顺序来的</p>
<p>  问题5：查询emp表中，每个部门的编号，并且按照部门人数进行降序排序</p>
<p>  select  deptno,count(<em>) from emp group by deptno order by count(</em>) desc;</p>
<h3 id="8-having关键字，主要是和group连用，并且针对聚合函数条件进行二次条件限定的"><a href="#8-having关键字，主要是和group连用，并且针对聚合函数条件进行二次条件限定的" class="headerlink" title="8.having关键字，主要是和group连用，并且针对聚合函数条件进行二次条件限定的"></a>8.having关键字，主要是和group连用，并且针对聚合函数条件进行二次条件限定的</h3><p>  问题6：查询emp表中每个部门的人数，找出人数大于3的部门，并按照总人数降序排列</p>
<p>  select deptno,count(<em>) from emp group by deptno having count(</em>)&gt;3 order by count(*) desc;</p>
<p>注意事项：</p>
<pre><code>注意事项：（1）聚合函数的条件，不能出现在from ，where子句，不能出现在group by 后面，
           聚合函数可以出现在select子句，having子句  order by 子句

   （2）where子句中放的是普通条件，不涉及到聚合函数的条件
   （3）having 子句中不能放普通条件，涉及聚合函数的条件</code></pre><h1 id="高级查询2"><a href="#高级查询2" class="headerlink" title="高级查询2"></a>高级查询2</h1><p>主要针对以下问题进行说明：<br>1.表连接（内连接，外连接（左外连接，右外连接，全外连接））<br>2.表连接：两表连接，三表连接，四表连接<br>3.子查询：单行子查询，多行子查询<br>4.子查询：any all<br>5.视图：什么是视图？视图的作用？怎么创建和删除视图？<br>6.索引：什么是索引？索引的作用？怎么创建合适的索引？创建删除和维护索引语法？</p>
<h2 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h2><pre><code>--1.问题：查询每个员工的部门名称，列出员工姓名和部门名称
select e.ename,d.dname from emp e,dept d where e.deptno=d.deptno</code></pre><p>–表连接中别名的使用：<br>为了避免出现“未明确定义列”的错误，建议使用表别名.字段名的方式引用字段</p>
<p><strong>总结：select…from 表1，表2，表3,… where 连接条件1 and 连接条件2 and …<br>连接条件：e.deptno=d.deptno等值连接的条件，所以这种连接成为等值连接</strong></p>
<h2 id="不等值连接"><a href="#不等值连接" class="headerlink" title="不等值连接"></a>不等值连接</h2><p>非等值连接是指在多个表之间使用非等号连接,查询在多个表中有非等值关联关系的数据。非等值连接操作符包括&gt;、&gt;=、&lt;、&lt;=、&lt;&gt;以及between…and、like、in等。</p>
<pre><code>例：查找每个员工的薪水等级

2. 问题：查询员工表中，每个员工的工资等级，列出员工姓名，工资和工资等级
select e.ename,e.sal,s.grade from emp e,salgrade s
where e.sal between s.losal and s.hisal;</code></pre><h2 id="自连接："><a href="#自连接：" class="headerlink" title="自连接："></a>自连接：</h2><p>自连接是一种特殊的连接，数据的来源是一个表，即关联关系来自于单表中的多个列。比如职员表中的经理列，就参照了本表中职员编码列，即经理也是机构下的职员之一。<br>自连接是通过将表别名虚拟成两个表的方式实现，可以是等值的或不等值的连接。<br>例：查询每个职员经理的名字以及经理的员工编号</p>
<pre><code>--3. 查询所有比自己领导入职早的员工的姓名和上级领导的姓名
select w.ename as 员工姓名,m.ename as 上级领导姓名
from emp w,emp m where w.mgr=m.empno and w.hiredate&lt;m.hiredate;</code></pre><h2 id="内连接："><a href="#内连接：" class="headerlink" title="内连接："></a>内连接：</h2><pre><code>--1.问题：查询每个员工的部门名称，列出员工姓名和部门名称
select e.ename,d.dname from emp e inner join dept d on e.deptno=d.deptno;</code></pre><p><strong>–总结：select…from 表1 inner join 表2 on 连接条件 where 查询条件</strong></p>
<p>–问题：查询部门10中每个员工的工资等级</p>
<pre><code>select e.ename,s.grade from emp e
inner join salgrade s
on e.sal between s.losal and s.hisal             --连接条件
where e.deptno=10;    --查询条件</code></pre><hr>
<pre><code>--问题：查询emp表中部门名称为ACCOUNTING的员工的姓名，和部门位置

select e.ename,d.loc from emp e,dept d

where e.deptno=d.deptno and d.dname=&apos;ACCOUNTING&apos;;

select e.ename,d.loc from emp e inner join dept d

on e.deptno=d.deptno

where d.dname=&apos;ACCOUNTING&apos;;</code></pre><p>–查询高于自己部门平均工资的员工的信息，列出部门平均工资</p>
<pre><code>--（1）获得每个部门的平均工资
select deptno,avg(sal) avg_sal from emp group by deptno;   --x

--(2) 将x表和emp表做表连接
select e.*,x.* from emp e,x where e.deptno=x.deptno and e.sal&gt;x.avg_sal;

--(3)替换x

select e.*,x.* from
emp e,(select deptno,avg(sal) avg_sal from emp group by deptno)x
where e.deptno=x.deptno and e.sal&gt;x.avg_sal;</code></pre><h2 id="内连接和外连接"><a href="#内连接和外连接" class="headerlink" title="内连接和外连接"></a>内连接和外连接</h2><p>针对内连接和外链接，我们通过图表进行详细说明</p>
<p>A表（父母表）：<br><img src="https://img-blog.csdnimg.cn/20190107165131361.png" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190107165141631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190107165151796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190107165211240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190107165225802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/201901071652368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库SQL语言以及常见操作</title>
    <url>/2018/02/16/2018-02-16-%E6%95%B0%E6%8D%AE%E5%BA%93SQL%E8%AF%AD%E8%A8%80%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h1><h2 id="1-sql简介"><a href="#1-sql简介" class="headerlink" title="1.sql简介"></a>1.sql简介</h2><p>SQL：Structured  Query Language<br>Oracle  ： C/S 客户端发起请求，通过网络传递给服务器，服务器对请求进行响应</p>
<a id="more"></a>

<h2 id="2-sql组成"><a href="#2-sql组成" class="headerlink" title="2.sql组成"></a>2.sql组成</h2><h3 id="DDL（数据定义语言）："><a href="#DDL（数据定义语言）：" class="headerlink" title="DDL（数据定义语言）："></a>DDL（数据定义语言）：</h3><p>数据定义语言 DDL( Data Definition Language ) , 是 SQL 语言集中负责数据结构定义及数据库对象定义的语言 , 主要有 create、alter、drop 和 truncate 四种常用语句。对数据结构起作用。<br>       例如 create alter drop 主要针对数据库对象的操作<br>       <strong>注意：DDL语言使用的时候不需要提交，系统会自动提交</strong></p>
<ul>
<li>create 数据库对象的创建</li>
<li>alter 修改数据库对象</li>
<li>drop 删除数据库对象</li>
<li>truncate 清空表数据</li>
</ul>
<h3 id="DML（数据操纵语言）"><a href="#DML（数据操纵语言）" class="headerlink" title="DML（数据操纵语言）"></a>DML（数据操纵语言）</h3><p>数据操纵语言 DML( Data Manipulation Language ) , 用户通过它可以实现对数据表的基本操作 ,即对表中数据的增、删、改。DML对数据起作用。</p>
<ul>
<li>insert 插入操作</li>
<li>update 更新操作</li>
<li>delete 删除操作</li>
<li>select 查询操作<h3 id="DCL（数据控制语言）："><a href="#DCL（数据控制语言）：" class="headerlink" title="DCL（数据控制语言）："></a>DCL（数据控制语言）：</h3></li>
</ul>
<p>控制存取权限  grant revoke<br>数据控制语言DCL（Data Control Language），用来控制存取许可、存取权限等。</p>
<ul>
<li>grant 权限分配</li>
<li>revoke 权限回收<br><strong>TCL（事务控制语言）：</strong></li>
</ul>
<p>commit   rollback savepoint 主要针对的是DML操作的<br>事务控制语言TCL（Transaction Control Language）是用来对 DML操作进行确认的。</p>
<ul>
<li>commit 提交数据</li>
<li>rollback 回滚</li>
</ul>
<p>下面针对每一种语言进行讲解：</p>
<h2 id="3-DML语言"><a href="#3-DML语言" class="headerlink" title="3.DML语言"></a>3.DML语言</h2><p><strong>1）insert 插入</strong><br><strong>第一种插入方式</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">**第一种插入方式**</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建一张emp01表，复制emp表的结构。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp01 <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="number">1</span>=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--往emp01中插入记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--给全部字段插入值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp01 <span class="keyword">values</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1001</span>,<span class="string">'shelly'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="built_in">date</span><span class="string">'1989-12-08'</span>,<span class="number">3000</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p><strong>第二种插入方式</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">给其中几个字段插入值，没有显示的字段默认null</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp01(empno,ename,sal,job,deptno)<span class="keyword">values</span></span><br><span class="line">(<span class="number">1002</span>,<span class="string">'ellen'</span>,<span class="number">4000</span>,<span class="string">'salseman'</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<p>第三种插入方式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp01(empno,ename,job,sal,deptno)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="number">3001</span>,<span class="string">'LILY'</span>,<span class="string">'ANALYST'</span>,<span class="number">3000</span>,<span class="number">30</span> <span class="keyword">from</span> dual;  注：<span class="keyword">select</span>  和 <span class="keyword">from</span> 成对出现，如果<span class="keyword">from</span>后面没有内容就用虚表dual</span><br><span class="line"></span><br><span class="line"><span class="comment">--等价于：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp01(empno,ename,job,sal,deptno)<span class="keyword">values</span></span><br><span class="line"></span><br><span class="line">(<span class="number">3001</span>,<span class="string">'LILY'</span>,<span class="string">'ANALYST'</span>,<span class="number">3000</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--问题：从emp表中复制20部门员工信息，放入到emp01表中</span><br><span class="line"></span><br><span class="line">insert into emp01 select * from emp where deptno=20;</span><br><span class="line"></span><br><span class="line">--问题：往emp01表中插入一条ellen的记录，其余内容跟emp01表一致，empno在原来的基础上加1000</span><br><span class="line">insert into emp01(empno,ename,job,sal,deptno)</span><br><span class="line"></span><br><span class="line">select empno+1000,ename,job,5000,deptno from emp01 where ename=&apos;ellen&apos;;</span><br></pre></td></tr></table></figure>

<p>–一条insert语句插入多条记录</p>
<p>–问题：一条insert语句插入多条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp01(empno,ename,sal,job)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="number">9999</span>,<span class="string">'LILEI'</span>,<span class="number">3500</span>,<span class="string">'MANAGER'</span> <span class="keyword">from</span> dual <span class="keyword">union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="number">9998</span>,<span class="string">'Lucy'</span>,<span class="number">4500</span>,<span class="string">'MANAGER'</span> <span class="keyword">from</span> dual <span class="keyword">union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="number">9997</span>,<span class="string">'hanmeimei'</span>,<span class="number">5500</span>,<span class="string">'MANAGER'</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p><strong>–union：Oracle的集合运算并运算，求并集,使用的时候会去重<br>–union all:求并集运算，不去重</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 9999,&apos;LILEI&apos;,3500,&apos;MANAGER&apos; from dual union</span><br><span class="line"></span><br><span class="line">select 9999,&apos;LILEI&apos;,3500,&apos;MANAGER&apos; from dual union</span><br><span class="line"></span><br><span class="line">select 9999,&apos;LILEI&apos;,3500,&apos;MANAGER&apos; from dual</span><br><span class="line"></span><br><span class="line">select 9999,&apos;LILEI&apos;,3500,&apos;MANAGER&apos; from dual union all</span><br><span class="line"></span><br><span class="line">select 9999,&apos;LILEI&apos;,3500,&apos;MANAGER&apos; from dual union all</span><br><span class="line"></span><br><span class="line">select 9999,&apos;LILEI&apos;,3500,&apos;MANAGER&apos; from dual</span><br></pre></td></tr></table></figure>
<p><strong>需要注意的是：</strong></p>
<p><strong>注意事项：<br>        1.插入记录时，字段的数据类型，长度  小数的精度  都要符合表的结构要求<br>        2.插入数据的个数应该与字段个数一致<br>        3.插入数据时，注意日期的处理格式<br>                第一种 处理格式  date声明字符串是一个日期<br>                第二种  使用默认日期格式<br>                第三种 to_date函数将字符串转换为日期<br>insert into emp01 values(  , , , , , ,)  如果插入的自定义日期  前面要用date修饰一下  说明此处是一个日期</strong> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp01 <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'shelly'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="built_in">date</span><span class="string">'1989-12-08'</span>,<span class="number">3000</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">--使用默认日期格式</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp01 <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'shelly'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="string">'08-12月-1989'</span>,<span class="number">3000</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">--使用to_date将字符串转换为日期</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp01 <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'shelly'</span>,<span class="string">'MANAGER'</span>,<span class="number">7839</span>,<span class="keyword">to_date</span>(<span class="string">'1989-12-08'</span>,<span class="string">'yyyy-mm-dd'</span>),<span class="number">3000</span>,<span class="literal">NULL</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p><strong>（2）delete删除</strong></p>
<p>–删除表中所有数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp01；  但是表还是存在的  删除表是<span class="keyword">drop</span> 语句</span><br></pre></td></tr></table></figure>

<p>–删除表中符合条件的记录<br>   –问题：删除emp01表中部门编号为10的记录<br>–问题：删除emp01表中部门编号为10的员工的信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp01 <span class="keyword">where</span> deptno=<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<pre><code>注意事项：
1、如果不使用where子句，将删除表中所有的数据。(特别注意)
2、delete语句不能删除某一列的值(可使用update)
3、使用delete语句仅删除记录，不删除表本身。如要删除表，使用drop table语句。
4、同insert和update一样，从一个表中删除记录将引起其它表的参照完整性问题（主外键关联关系），在修改数据库数据时，头脑中应始终不要忘记这个潜在的问题。</code></pre><p><strong>删除的几种方法比较：</strong><br>| delete from student where xh=’A001’;   删除一条记录          |<br>| ———————————————————— |<br>| delete from 表名;   删除所有记录，表结构还在，写日志，可以恢复的，速度慢 |</p>
<table>
<thead>
<tr>
<th>truncate table 表名;  删除表中的所有记录，表结构还在，不写日志，无法找回删除的记录，速度快。</th>
</tr>
</thead>
<tbody><tr>
<td>drop table 表名;  删除表的结构和数据</td>
</tr>
<tr>
<td>—-</td>
</tr>
</tbody></table>
<p><strong>（3）update更新</strong></p>
<p>–问题：更新emp01表中员工工资，如果工资小于1500，那么给员工涨1000；</p>
<p>update emp01 set sal=sal+1000 where sal&lt;1500;<br><strong>语法：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> tableName</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> 字段<span class="number">1</span>=值<span class="number">1</span>，字段<span class="number">2</span>=值<span class="number">2</span>，…字段n=值n</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure>

<pre><code>注意事项：
1、update语法可以用新值更新原有表行中的各列；
2、set子句指示要修改哪些列；
3、where子句指定应更新哪些行。如没有where子句，则更新所有的行。</code></pre><p>示例：</p>
<pre><code>--对students中的数据进行修改
--将张三的性别改成女
SQL&gt;update students set sex=&apos;女&apos; where name=&apos;张三&apos;;
--把张三的年级改为2
SQL&gt;update students set gradeid=2 where name=&apos;张三&apos;;
--把所有人的成绩都提高10%
SQL&gt;update students set score = score *1.1;</code></pre><p><strong>（4）select</strong> </p>
<p><strong>简单查询</strong></p>
<p><strong>查询所有列</strong></p>
<p><strong>select * from tableName;</strong>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查询所有员工信息</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<p><strong>查询指定列</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> col1,col2,… <span class="keyword">from</span> tableName;</span><br><span class="line"></span><br><span class="line">查询所有员工的员工号，姓名和工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<p><strong>去重查询（使用关键字distinct）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查询所有员工所在的部门号。</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>


<p><strong>使用算术表达式</strong></p>
<p>算术运算符用于执行数值计算，可以在SQL语句中使用算术表达式，算术表达式由数值数据类型的列名、数值常量和连接它们的算术操作符组成。<br>算术操作符包括加(+)、减(-)、乘(<em>)、除(/)。<br>查询员工的年薪<br>select  empno,ename,sal</em>12 from emp;</p>
<p>**  使用列的别名**</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="string">"姓名"</span>,sal*<span class="number">13</span>+nvl(comm,<span class="number">0</span>)*<span class="number">13</span> <span class="string">"年收入"</span> <span class="keyword">from</span> emp;          </span><br><span class="line"><span class="keyword">select</span> ename 姓名,sal*<span class="number">13</span>+nvl(comm,<span class="number">0</span>)*<span class="number">13</span> 年收入 <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> ename <span class="keyword">as</span> <span class="string">"姓名"</span>,sal*<span class="number">13</span>+nvl(comm,<span class="number">0</span>)*<span class="number">13</span> <span class="keyword">as</span> <span class="string">"年收入"</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<p><strong>PS：oracle在使用别名时，可以用双引号、不使用、使用as来表明别名。但不能使用单引号。</strong></p>
<p><strong>使用nvl函数来处理null</strong><br>nvl是oracle提供的函数，是用于处理null值使用的。<br>语法：nvl(值1,值2)<br>解释：nvl值1为null时则取值2，值1不为null时则取值1原值。<br>select empno,ename,(sal+nvl(comm,0))*13 from emp;</p>
<p><strong>使用连接运算符</strong></p>
<p>连接运算符（||），用于将多个字符串或数据值合并成一个字符串<br>select ename||’年收入’||(sal<em>13+nvl(comm,0)</em>13) “雇员的年收入” from emp;<br>select ename,’部门编号是’||deptno 部门编号 from emp;</p>
<p><strong>使用where子句</strong><br>如果希望只查询一部分行，那么可以通过WHERE子句指定条件。WHERE子句的作用是通过指定条件，使SELECT语句仅仅查询符合条件的行。</p>
<p>在更多情况下，都需要根据指定的条件对数据进行查询。</p>
<p>WHERE子句指定的条件是一个关系表达式，如果关系表达式的结果为真，则条件成立，否则条件不成立。</p>
<p>关系表达式用于比较两个表达式的大小，或者进行模糊匹配，或者将一个表达式的值与一个集合中的元素进行匹配。</p>
<p> <strong>比较运算符</strong></p>
<p>比较运算符用于比较两个表达式的值，操作符包括 =、!=、&lt;、&gt;、&lt;=、&gt;=、BETWEEN…AND、IN、LIKE 和IS NULL等</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">（1）查询工资高于3000的员工信息。</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal&gt;<span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">（2）查询部门号是10的员工信息。</span><br><span class="line"> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">（3）查询工资在2000至3000之间的员工</span><br><span class="line"> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">between</span> <span class="number">2000</span> <span class="keyword">and</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure>

<p>说明：between是指定区间内取值，如：between 2000 and 2500，取2000至2500内的值，同时包含2000和2500</p>
<p><strong>like模糊查询</strong><br>在模糊查询中需要使用通配符。<br><img src="https://img-blog.csdnimg.cn/20190107140452738.png" alt="在这里插入图片描述"></p>
<p>查询员工姓名以S开头的员工信息<br>select * from emp where ename like ‘S%’;</p>
<p>查询员工姓名第三个字符为大写O的所有员工的姓名和工资<br>select ename,sal from emp where ename like ‘__O%’;</p>
<p><strong>在where条件中使用in</strong></p>
<p>in运算符用来与一个集合中的元素进行比较。<br>查询部门10,20的员工姓名及工资。<br>select ename,sal from emp where deptno in (10,20);</p>
<p><strong>在where条件中使用is null</strong></p>
<p>在Oracle中使用IS NULL和IS NOT NULL来判断是否为空了。<br>查询没有上级的员工信息<br>select * from emp where mgr is null;</p>
<h3 id="使用order-by排序查询"><a href="#使用order-by排序查询" class="headerlink" title="使用order by排序查询"></a>使用order by排序查询</h3><p>   Oracle中使用order by子句，对查询结果按照某一列进行排序查询，排序结果有升序（asc）和降序（desc）之分。默认排序结果是升序，即从小到大排序。</p>
<h4 id="单一列排序"><a href="#单一列排序" class="headerlink" title="单一列排序"></a>单一列排序</h4><p>按照工资的从低到高的顺序显示员工信息</p>
<pre><code>select * from emp order by sal asc;</code></pre><p>PS：asc写或不写都是升序排序即从小到大排序，desc则是降序排序从大到小排序。</p>
<h4 id="多列排序"><a href="#多列排序" class="headerlink" title="多列排序"></a>多列排序</h4><p>按照部门号升序而雇员的入职时间降序排列<br>select * from emp order by deptno,hiredate desc;</p>
<h4 id="使用列的别名排序"><a href="#使用列的别名排序" class="headerlink" title="使用列的别名排序"></a>使用列的别名排序</h4><p>select ename,sal*12 年薪 from emp order by 年薪 asc;</p>
<h2 id="TCL语言"><a href="#TCL语言" class="headerlink" title="TCL语言"></a>TCL语言</h2><pre><code>commit     
savepoint 
rollback </code></pre><p>事务是对数据库操作的逻辑单位，在一个事务中可以包含一条或多条DML （数据操纵语言）、DDL （数据定义语言）和DCL （数据控制语言）语句，这些语句组成一个逻辑整体。</p>
<p>事务具有四个属性，这四个属性的英文单词首字母合在一起就是ACID 。这四个属性是：</p>
<ul>
<li>原子性（ Atomicity ）：事务要么全部执行，要么全部不执行，不允许部分执行。</li>
<li>一致性（ Consistency ）：事务把数据库从一个一致状态带入另一个一致状态。</li>
<li>独立性（ Isolation ）：一个事务的执行不受其他事务的影响。</li>
<li>持续性（ Durability ）：一旦事务提交，就永久有效，不受关机等情况的影响。</li>
</ul>
<p>一个事务中可以包含多条DML语句，或者包含一条DDL语句，或者包含一条DCL语句。</p>
<pre><code>用于事务控制的语句有：
COMMIT - 提交并结束事务处理
ROLLBACK -  撤销事务中已完成的工作
SAVEPOINT – 标记事务中可以回滚的点</code></pre><p>创建一个保存点：</p>
<pre><code>savepoint  mark1
rollback  to mark1；   -----回滚到mark1保存点
commit  ---提交  提交后不能再回滚。</code></pre><p><strong>commit操作</strong></p>
<p>示例：银行转账，小明给小红转账500元。</p>
<pre><code>update custom set balance=balance-500 where name=’小明’;
update custom set balance=balance+500 where name=’小红’;
commit;</code></pre><h4 id="rollback操作"><a href="#rollback操作" class="headerlink" title="rollback操作"></a>rollback操作</h4><p>回滚事务有两种方式：完全回滚，即回滚到事务的开始；部分回滚事务，即可以将事务有选择地回滚到中间的某个点。部分回滚是通过设置保存点（ SAVEPOINT ）来实现的。</p>
<pre><code>--部分回滚
…
savepoint 保存点名称;//设置保存点
…
rollback to [savepoint] 保存点名称;//回滚到保存点</code></pre><p>特别注意：设置保存点及回滚操作是配合delete语句使用，用来找回使用delete删除的数据。而通过truncate删除的表数据是无法通过此方法找回的。</p>
<pre><code>建议：

在使用delete删除表数据前使用savepoint设置保存点，防止数据误删除。</code></pre><p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建保存点：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">savepoint</span> mark1 </span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> emp01 <span class="keyword">set</span> sal=sal+<span class="number">500</span> <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> mark1;<span class="comment">--回滚到mark1保存点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>; <span class="comment">--提交</span></span><br></pre></td></tr></table></figure>


<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">SQL&gt;  UPDATE students SET score = score + 5 WHERE score &lt;= 30;</span><br><span class="line">SQL&gt;  SAVEPOINT mark1;</span><br><span class="line">SQL&gt;  DELETE FROM students WHERE id= ‘100001’;</span><br><span class="line">SQL&gt;  SAVEPOINT mark2;</span><br><span class="line">SQL&gt;  ROLLBACK TO mark1;</span><br><span class="line">SQL&gt;  COMMIT;</span><br></pre></td></tr></table></figure>

<p><strong>PS：<br>（1）在一个事务中可以保存多个保存点。<br>（2）一旦回退后，该保存点就消失了，不能再次回退。<br>（3）设置保存点是有资源开销的。<br>（4）一旦提交了事务，则不能回退到任何保存点。</strong></p>
<h2 id="oracle的运算符"><a href="#oracle的运算符" class="headerlink" title="oracle的运算符"></a>oracle的运算符</h2><p><strong>算术运算符：+ - * /</strong></p>
<pre><code>update emp01 set sal=sal+500 where comm is null;</code></pre><p><strong>连接运算符:||</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--问题：查询emp01中员工姓名，在员工姓名前面加上dear</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="string">'Dear '</span>||ename <span class="keyword">from</span> emp01;</span><br></pre></td></tr></table></figure>
<p>–问题：查询每个员工的工资，显示为：ellen的工资是：800</p>
<p>select ename||’的工资是：’||sal from emp01;</p>
<p><strong>比较运算符:</strong>     </p>
<pre><code> &gt; &gt;= &lt; &lt;= &lt;&gt;(!=) = is null  between...and...  inlike

--问题：查询工资大于3000的员工的信息

select * from emp01 where sal&gt;3000;

--问题：查询工资小于2000的员工的信息

select * from emp01 where sal&lt;2000;

--问题：查询部门编号不为20的员工的信息

select * from emp where deptno&lt;&gt;20;

select * from emp where deptno!=20;</code></pre><p><strong>is null用来做空值的比较</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--问题：查询奖金为空的员工的信息</span><br><span class="line"></span><br><span class="line">select * from emp where comm is null;</span><br><span class="line"></span><br><span class="line">--问题：查询奖金不为空的员工的信息</span><br><span class="line"></span><br><span class="line">select * from emp where comm is not null;</span><br></pre></td></tr></table></figure>

<p>–注意：0和null不是一回事</p>
<p><strong>between…and…:包含边界</strong></p>
<pre><code>--问题：查询工资在2000-5000之间的员工的信息

select * from emp where sal between 2000 and 5000;

--等价于：

select * from emp where sal&gt;=2000 and sal&lt;=5000;</code></pre><p><strong>in：后面加的是一个集合</strong></p>
<pre><code>--问题：查询部门10或部门20中的员工的信息

select * from emp where deptno in(10,20);

select * from emp where deptno=10 or deptno=20;</code></pre><p><strong>like：用来进行模糊查询</strong></p>
<p><strong>通配符：</strong></p>
<pre><code>_:表示匹配任意一个字符，必须有一个字符
%：表示匹配0个或者多个字符
[]：表示匹配【】中的任意一个字符</code></pre><hr>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--问题：查询姓名中带有LLEN的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'%LLEN%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--问题：查询姓名以A开头，以N结束的员工的信息；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'A%N'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询员工姓名长度为5的员工的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'_ _ _ _ _'</span>;</span><br></pre></td></tr></table></figure>


<p><strong>逻辑运算符:not and or</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查询emp表中部门10中的MANAGER或者部门20中的CLERK，显示其详细信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">10</span> <span class="keyword">and</span> job=<span class="string">'MANAGER'</span><span class="keyword">or</span> deptno=<span class="number">20</span> <span class="keyword">and</span> job=<span class="string">'CLERK'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询部门10或者20中MANAGER</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> (deptno=<span class="number">10</span> <span class="keyword">or</span> deptno=<span class="number">20</span>) <span class="keyword">and</span> job=<span class="string">'MANAGER'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="keyword">in</span>(<span class="number">10</span>,<span class="number">20</span>) <span class="keyword">and</span> job=<span class="string">'MANAGER'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="8-运算符的优先级"><a href="#8-运算符的优先级" class="headerlink" title="8.运算符的优先级:"></a>8.运算符的优先级:</h2><pre><code>算术运算符&gt;连接运算符&gt;比较运算符&gt;not&gt;and&gt;or</code></pre><p>++++++++转载请注明出处++++++++++</p>
]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Ajax同步请求增加页面等待提示</title>
    <url>/2018/02/16/2018-02-16-%E4%BD%BF%E7%94%A8Ajax%E5%90%8C%E6%AD%A5%E8%AF%B7%E6%B1%82%E5%A2%9E%E5%8A%A0%E9%A1%B5%E9%9D%A2%E7%AD%89%E5%BE%85%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="使用Ajax同步请求增加页面等待提示"><a href="#使用Ajax同步请求增加页面等待提示" class="headerlink" title="使用Ajax同步请求增加页面等待提示"></a>使用Ajax同步请求增加页面等待提示</h1><p>最近在做项目时，有一个需求是批量打印好多个合同，使用AJAX向后台传送数据，等待后台执行后，需要把生成之后的文件地址传送过来。</p>
<p>后台的处理时间比较长，根据合同的多少可能等待时间比较长，会达到10s左右，这个时候如果不加任何的提示，会导致用户因为没有看到是否执行而导致重复的操作，为了增加用户的体验感，，以及项目的完善性，</p>
<p>这个时候就需要增加一个等待页面进行提示。</p>
<a id="more"></a>

<p>我们先来看一个Ajax同步请求与异步请求的区别：</p>
<p>异步和同步：</p>
<p>ajax中   async属性是设置同步和异步，async:false,时表示此时ajax为同步请求，如果不写或者设置成true表示异步请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">                    type : <span class="string">"get"</span>,</span><br><span class="line">                    <span class="keyword">async</span>:<span class="literal">true</span>,</span><br><span class="line">                    url :                       </span><br><span class="line">                    success : <span class="function"><span class="keyword">function</span>(<span class="params">targetPath</span>)</span>&#123;                   </span><br><span class="line">                    &#125;,</span><br></pre></td></tr></table></figure>



<p>当设置成同步时，意味着执行完当前的程序段，才能执行下一段，它属于阻塞模式，其表现在网页上面就是会出现页面假死现象，也就是暂停当前的页面，用户不能操作其它的，必须等待当前请求返回数据，在这个过程中用户看不到任何的提示以及等待提醒。</p>
<p>而使用异步方式请求，页面后再次段程序等待的时候，继续的向下执行，等待执行结束再返回结果，页面不会出现假死现象。</p>
<p>我现在遇到的问题是：点击一个按钮，使用Ajax向后台传送数据，等待后台的执行，由于后台执行时间过长，这个时候页面出现所谓的假死现象，容易引发误操作。</p>
<p>我的思路是：在ajax返回结果之前，增加一个遮罩层的函数显示效果，在执行之后，显示隐藏效果，于是我写了一个遮罩层的函数，准备放到ajax中。</p>
<p>我通过查阅各种帖子发现有类似的描述，说是可以使用ajax的一个属性进行设置</p>
<pre><code>beforeSend: function(){)</code></pre><p>，类似：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//省略了一些参数，这里只给出async 和 beforeSend</span></span><br><span class="line"><span class="keyword">async</span>: <span class="literal">false</span>, <span class="comment">//同步请求，默认情况下是异步（true）</span></span><br><span class="line">beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">'#warning'</span>).text(<span class="string">'正在处理，请稍等！'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>但是设置成这样效果是出不来的，因为beforeSend只有在ajax设置成异步请求时，才会显示出beforeSend中函数的效果。</p>
<p>在这里根据业务需要，ajax是不能改为异步的，因为必须等待文件地址返回后才能继续后面的操作。</p>
<p>除此之外，loading也使用过，还有各种加提示的方法，但是sys为异步时，效果都会无法显示。</p>
<p>在这个时候就需要引入一个JQuery中一个对象deferred，来对ajax进行封装异步函数。</p>
<p>主要使用的是deferred中   $.when的方法使用，主要是对多个deferred对象进行并行化操作，当所有deferred对象都得到解决就执行后面添加的相应回调</p>
<p>具体使用如下：</p>
<p>使用之前需要先进行声明</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">var defer = $.Deferred();</span><br><span class="line">    <span class="selector-tag">function</span> <span class="selector-tag">toGetData</span>() &#123;</span><br><span class="line">        var defer = $.Deferred();</span><br><span class="line">        var checkedIds=$("input[name='backEntrust']:checked");</span><br><span class="line">            if(checkedIds.length==0)&#123;</span><br><span class="line">                <span class="selector-tag">alert</span>("请选中要打印的合同");</span><br><span class="line">                <span class="selector-tag">return</span> <span class="selector-tag">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            var r=confirm("确定打印吗？");</span><br><span class="line">            if (r==true)&#123;        </span><br><span class="line">                var enIds=new Array(checkedIds.length);</span><br><span class="line">                for(var i=0; i&lt;checkedIds.length; i++)&#123;</span><br><span class="line">                    enIds[i] = checkedIds[i].value;</span><br><span class="line">                    &#125;</span><br><span class="line">                   </span><br><span class="line">                 $.ajax(&#123;</span><br><span class="line">                    <span class="selector-tag">type</span> : "<span class="selector-tag">get</span>",</span><br><span class="line">                    <span class="selector-tag">async</span><span class="selector-pseudo">:true</span>,</span><br><span class="line">                    url :"$&#123;pageContext.request.contextPath&#125;/renWuFenPeiService_mergerSample.action?entrustIds="+enIds,</span><br><span class="line">                       </span><br><span class="line">                    <span class="selector-tag">success</span> : <span class="selector-tag">function</span>(<span class="selector-tag">targetPath</span>)&#123;</span><br><span class="line">                        defer.resolve(targetPath)                       </span><br><span class="line">                    &#125;, </span><br><span class="line">                    <span class="selector-tag">error</span> : <span class="selector-tag">function</span>() &#123;</span><br><span class="line">                        alert("样品检测委托单合并失败，请重试。");</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                    &#125;);    </span><br><span class="line">                                                                      </span><br><span class="line">            &#125;<span class="selector-tag">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                window.location.reload();</span><br><span class="line">             &#125; </span><br><span class="line">                             </span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">defer</span><span class="selector-class">.promise</span>();        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    $('#batchPrint').on('click', function() &#123;</span><br><span class="line">        <span class="selector-tag">loading</span>();    显示遮罩层函数</span><br><span class="line">        $.when(toGetData()).done(function(targetPath)&#123;          </span><br><span class="line">           $(".shodow").hide()      </span><br><span class="line">          $("#batchPrinttwo").attr("href","/file/"+targetPath);</span><br><span class="line">          <span class="selector-tag">document</span><span class="selector-class">.getElementById</span>("<span class="selector-tag">batchPrinttwo</span>")<span class="selector-class">.click</span>();</span><br><span class="line">          <span class="selector-tag">loaded</span>();   取消遮罩层函数</span><br><span class="line">        &#125;);    </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>在这段代码中，我们可以看到ajax设置的是异步请求，但是我们需要的是同步请求啊，在这使用了JQuery中的deferred之后，我们想要的显示效果就出来了，我们就可以使用ajax的异同请求，达到同步的效果。</strong></p>
]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库 sqlplus常用命令</title>
    <url>/2018/02/10/2018-02-10-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93-sqlplus%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="Oracle学习思维导图"><a href="#Oracle学习思维导图" class="headerlink" title="Oracle学习思维导图"></a>Oracle学习思维导图</h2><p><img src="https://img-blog.csdnimg.cn/20191030164918181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="sql-plus常用命令"><a href="#sql-plus常用命令" class="headerlink" title="sql*plus常用命令"></a>sql*plus常用命令</h2><p>（1）conn[ect]:切换用户<br>（2）disc[onnect]:断开某个用户和数据库的连接<br>（3）passw[ord]:修改用户密码<br>（4）show user:查看当前用户<br>（5）exit:退出数据库<br>（6）desc[ribe] 表名：查看表结构</p>
<h3 id="交互式命令："><a href="#交互式命令：" class="headerlink" title="交互式命令："></a>交互式命令：</h3><p>（1）&amp;:可以替代变量，而在变量执行的时候，需要用户输入<br>                   Select * from emp where deptno=’&amp;deptno’;<br>                   注意：Oracle中字符串用单引号<br>         （2）ed[it]:编辑指定的.sql文件的   edit C:\a.sql<br>         （3）spool:可以将sqlplus屏幕上的内容输出到指定的文件中<br>                    Spool d:\a.sql<br>                    Select * from emp;<br> 。。。查询结果<br>Spool off</p>
<p><strong>解锁用户和修改密码：</strong><br>（1）sqlplus连接到数据库：sqlplus sys/123456 as sysdba<br>（2）输入解锁语句：alter user scott account unlock;<br>（3）修改密码：alter user scott identified by 654321;<br>        passw【ord】用户名:可以去修改其他用户的密码。<br>         passw:表示修改自己的密码。</p>
]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle中用户权限管理 数据类型和表的创建</title>
    <url>/2018/02/10/2018-02-10-Oracle%E4%B8%AD%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="一，Oracle的用户管理"><a href="#一，Oracle的用户管理" class="headerlink" title="一，Oracle的用户管理"></a>一，Oracle的用户管理</h1><h2 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1. 创建用户"></a>1. 创建用户</h2><p>在 oracle 中要创建一个新的用户使用 create user 语句，一般是具有 <strong>dba(数据库管理员)的权限才能使用。</strong></p>
<a id="more"></a>

<ol>
<li><p>1） 创建用户</p>
<pre><code>命令：create user  用户名 identified by  密码;</code></pre><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建用户：</span></span><br><span class="line"><span class="comment">--语法结构：create user 用户名 identified by 密码 【default tablespace 表空间名】【temporary tablespace temp】</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> hope <span class="keyword">identified</span> <span class="keyword">by</span> <span class="number">123456</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> hope1 <span class="keyword">identified</span> <span class="keyword">by</span> <span class="number">123456</span> <span class="keyword">default</span> <span class="keyword">tablespace</span> <span class="keyword">users</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> hope2 <span class="keyword">identified</span> <span class="keyword">by</span> <span class="number">123456</span> <span class="keyword">default</span> <span class="keyword">tablespace</span> <span class="keyword">users</span> <span class="keyword">temporary</span> <span class="keyword">tablespace</span> temp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2）  给用户修改密码</p>
<p><strong>如果给别人修改密码则需要具有 dba 的权限，或是拥有 alter user 的<br>系统权限命令：alter user  用户名 identified by  新密码</strong></p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--修改用户密码：</span></span><br><span class="line"><span class="comment">--语法结构：alter user 用户名 identified by 密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> hope <span class="keyword">identified</span> <span class="keyword">by</span> <span class="number">654321</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>3） 修改自己的密码</p>
<p>  如果给自己修改密码可以直接使用命令：<strong>password 用户名</strong><br><strong>问题：创建好的用户无法正常登录？</strong></p>
<pre><code>oracle 中用户建立后是无法正常登录的，只有在数据库管理员(DBA)对用户分配相应的权限后，用户才可以登录。</code></pre></li>
</ol>
<h2 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2 删除用户"></a>2 删除用户</h2><p><strong>概述</strong>：一般以 dba 的身份去删除某个用户，如果用其它用户去删除用户则需要具有 drop user 的权限。<br><strong>命令</strong>：drop user 用户名 [cascade]可选参数 cascade<br>        在删除用户时， 注意： 如果要删除的用户，已经创建了表，    那么就需要在删除的时候<br>带一个参数 cascade; Cascade 有级联的作用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--删除用户：</span></span><br><span class="line"><span class="comment">--drop user 用户名【cascade】</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> hope;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> hope <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3-oracle-用户分配权限和角色"><a href="#3-oracle-用户分配权限和角色" class="headerlink" title="3. oracle 用户分配权限和角色"></a>3. oracle 用户分配权限和角色</h2><p>概述：创建的新用户是没有任何权限的，甚至连登录的数据库的权限都没有，需要为其指定相应的权限。给一个用户赋权限使用使令 grant，回收权限使用命令 revoke</p>
<p><strong>赋权限基本语法：grant 权限/角色 to 用户名;<br>回收权限基本语法：revoke 权限/角色 from 用户名;</strong></p>
<pre><code>--权限和角色

--权限指执行特定类型SQL命令或访问其他对象的权利

--系统权限：允许用户执行某些数据库操作

--对象权限：允许用户对某一特定对象执行特定的操作

--角色是具有名称的一组权限的组合

--常用系统预定义角色

--CONNECT：临时用户

--RESOURCE：更为可靠和正式的用户

--DBA：数据库管理员角色，拥有管理数据库的最高权限

--一般情况下，普通用户，有connect和resource的角色就够了。</code></pre><h3 id="3-1-分配权限"><a href="#3-1-分配权限" class="headerlink" title="3.1  分配权限"></a>3.1  分配权限</h3><p>语法：grant create 权限 to 用户名;<br>例如：给小明赋予会话的权限<br>sql&gt; grant create session to xiaoming;<br>–给hope2赋予查询scott的emp表的权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> scott.emp <span class="keyword">to</span> hope2;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">update</span> <span class="keyword">on</span> scott.emp <span class="keyword">to</span> hope2;</span><br></pre></td></tr></table></figure>


<h3 id="3-2-分配角色"><a href="#3-2-分配角色" class="headerlink" title="3.2  分配角色"></a>3.2  分配角色</h3><p>也可以按 角色对用户分配权限<br>语法：grant 角色名 to 用户名;<br>例如：授予小明 resource 角色</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sql&gt; grant resource to xiaoming;</span><br><span class="line"><span class="comment">--赋予权限和角色</span></span><br><span class="line"><span class="comment">--语法结构：grant 角色1,角色2，。。。 to 用户</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span> <span class="keyword">to</span> hope2</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>,<span class="keyword">resource</span> <span class="keyword">to</span> hope2;</span><br></pre></td></tr></table></figure>

<p>撤销角色和权限：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--语法结构：revoke 角色1，角色2，。。。from 用户</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">resource</span> <span class="keyword">from</span> hope2;</span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">connect</span>,<span class="keyword">resource</span> <span class="keyword">from</span> hope2;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-oracle-中权限的概念"><a href="#3-3-oracle-中权限的概念" class="headerlink" title="3.3 oracle  中权限的概念"></a>3.3 oracle  中权限的概念</h3><p>权限分为系统权限与对象权限。</p>
<p>系统权限 ：是数据库管理相关的权限：<br>        <strong>create session(登录权限)<br>        create table(创建表权限)<br>        create index(创建索引权限)<br>        create view(创建视图权限)<br>        create sequence(创建序列权限)<br>        create trriger(创建触发器权限)</strong></p>
<p><strong>对象权限：</strong><br>        是用户操作数据对象相关的权限。<br>        比如对表的增删改查（insert 增、delete 删、update 改、select 查）；</p>
<h3 id="3-4-角色"><a href="#3-4-角色" class="headerlink" title="3.4  角色"></a>3.4  角色</h3><p>在 oracle 中角色分为：预定义角色和自定义角色；</p>
<p>预定义角色：把常用的权限集中起来，形成角色。常见的角色有：dba、connect、resource<br>等；</p>
<p><strong>connnect  角色</strong> ：是授予用户的最基本的权利，能够连接到 oralce 数据库中，并在对其<br>他用户的表有访问权限时，做 SELECT、UPDATE、INSERTT 等操作。Create session–建立<br>会话；Alter session–修改会话；Create view–建立视图。Create sequence–建立序列等权限</p>
<p><strong>resource  角色</strong> ：具有创建表、序列、视图等权限。Create table–建表；Create trigger–<br>建立促发器；Create procedure–建立过程；Create sequence—建立序列；Create type–建立类<br>型等权限；</p>
<p><strong>dba  角色</strong> ：是授予系统管理员的，拥有该角色的用户就能成为系统管理员了，它拥有<br>所有的系统权限。<br>自定义角色：按需定制一定权限形成角色，可以作为预定义角色的补充。来满足用户的<br>需求。 </p>
<h1 id="二，Oracle-数据类型"><a href="#二，Oracle-数据类型" class="headerlink" title="二，Oracle 数据类型"></a>二，Oracle 数据类型</h1><h2 id="1-、-char-size"><a href="#1-、-char-size" class="headerlink" title="1 、 char(size)"></a>1 、 char(size)</h2><p>存放字符串，它最大可以存放 2000  个字符，是定长。可以存储定长的字符串</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">例子：<span class="keyword">create</span> <span class="keyword">table</span> test1(<span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">32</span>));</span><br></pre></td></tr></table></figure>

<pre><code>说明：
test1 表中的 name 字段最多存放 32 个字符，
不足 32 个字符 oracle 会用空格补齐,如果超过会报错。</code></pre><h2 id="2-、-varchar-可以存储变长的字符串（不太常用）"><a href="#2-、-varchar-可以存储变长的字符串（不太常用）" class="headerlink" title="2 、 varchar 可以存储变长的字符串（不太常用）"></a>2 、 varchar 可以存储变长的字符串（不太常用）</h2><p>2—— varchar2(size)<br>存放字符串，它最大可以存放 4000  个字符，是变长。<br>举例说明：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test2(<span class="keyword">name</span> <span class="built_in">varchar2</span>(<span class="number">16</span>));</span><br><span class="line">//test2 表中的 name 字段最多存放 16 个字符，实际有几个字符就占几个字符的空间，如果超过会报错。</span><br></pre></td></tr></table></figure>

<pre><code>注意：如果我们的数据的长度是固定的，比如编号(8 位)，最好使用 char 来存放，因为这样存取的速度
区别：：：
什么时候用char 什么时候用varchar(2); ？？
  当已知字符串的长度的时候用char比较合适，不确定字符串长度时，用varchar2比较合适
-----nchar和nvarchar2可以存储Unicode字符集</code></pre><h2 id="3-、-number-型"><a href="#3-、-number-型" class="headerlink" title="3 、 number  型"></a>3 、 number  型</h2><p>存放整数，也可存放小数，是变长。number(p,s)//p 代表整个位数，s 代表小数位<br><strong>说明：<br>    number(5,2)： 表示一个小数有 5 位有效数，2 位小数。范围-999.99～999.99<br>    如果数值超出了位数限制就会被截取多余的位数。但在一行数据中的这个字段输入 575.316，则真正保<br>    存到字段中的数值是 575.32。<br>    number(5) ： 等价于 number(5,0) 表示一个五位整数，范围-99999～99999。<br>    输入 57523.316，真正保存的数据是 57523<br>    –number  等价于number(38,0)<br>    –number(15)表示可以存储一个15位的整数<br>    –number(22,7)表示可以浮点数，整数部分有15位，小数点后有7位</strong></p>
<pre><code>注意：不建议使用varchar，interger，float，double</code></pre><h2 id="4，日期数据类型，date-类型"><a href="#4，日期数据类型，date-类型" class="headerlink" title="4，日期数据类型，date  类型"></a>4，日期数据类型，date  类型</h2><pre><code>date类型，用于表示时间，( 年/ 月/ 日/ 时/ 分/ 秒) ，是定长。
sysdate：日期函数；显示当前日期
            select systate from dual；    //显示当前日期
 systimestamp:比Date更精确的一个时间
Date：日期类型，存储日期和时间
TimeStamp：比Date更精确的一种日期类型。
默认的日期格式
      ---中文的oracle：日-月-年  比如：‘1998年7月1日’    默认日期格式-&gt; ‘01-7月-1998’
      ---英文的oracle：day-mon-year  比如1998年7月1日  默认日期格式-&gt;&apos;01-JUL-1998&apos;</code></pre><p><strong>与日期相关的函数</strong><br>        to_date(字符串，格式)   :将一个oracle不认识的日期格式转成oracle认识的日期格式返回的是一个日期类型<br>select to_date(‘2018-01-05’,yyyy-mm-dd);</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">举例说明：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test5(birthday <span class="built_in">date</span>);</span><br><span class="line">//添加时个要使用默认格式 <span class="keyword">insert</span> <span class="keyword">into</span> test5 <span class="keyword">values</span>(<span class="string">'11-11 月-11'</span>);</span><br><span class="line">如使用 <span class="keyword">insert</span> <span class="keyword">into</span> test5 <span class="keyword">values</span>(<span class="string">'2011-11-11'</span>);则报错。</span><br><span class="line">说明：oracle 日期有默认格式为：DD-MON-YYYY,日-月-年；如果我们希望使用自己习惯的日期添加，</span><br><span class="line">也可以，但是需要借助 oracle 函数来添加。</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test5 <span class="keyword">values</span>(<span class="keyword">to_date</span>(<span class="string">'2015-5-3'</span>,<span class="string">'yyyy-mm-dd'</span>))</span><br></pre></td></tr></table></figure>
<h2 id="5-、-clob-型"><a href="#5-、-clob-型" class="headerlink" title="5 、 clob  型"></a>5 、 clob  型</h2><p>字符型大对象，它最大可以存放 8TB ，是变长。（nvarchar(4000) 满足不了需求）<br>与字符型的 char/varchar2/nchar/nvarchar2 的使用方式一样。</p>
<h2 id="6-、-blob-型"><a href="#6-、-blob-型" class="headerlink" title="6 、 blob  型"></a>6 、 blob  型</h2><p>二进制数据，可存放图片、声音，它最大可以存放 8TB ，是变长。<br>与字符型的 char/varchar2/nchar/nvarchar2 的使用方式一样。<br>    <strong>说明：一般情况下很少使用数据库来存放媒体类文件，一般只使用数据库来记录媒体类文件的 URL 地址。如果考虑到文件的安全性，可以存放到数据库中来保存。</strong></p>
<h1 id="三、表的操作"><a href="#三、表的操作" class="headerlink" title="三、表的操作"></a>三、表的操作</h1><p><strong>1.创建表：</strong><br>   实际上解决的是表结构的问题，表有几个字段，每个字段的长度是多少。<br>语法：<br>      create table 表的名称（字段名称 1 数据类型, 字段名称 2 数据类型）;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">举例：创建学生表，字段和类型如下所示：</span><br><span class="line">	字段 字段类型 说明</span><br><span class="line">	id  整型 number</span><br><span class="line">	name 字符型  varchar2</span><br><span class="line">	sex  字符型  char（2）</span><br><span class="line">	brithday  日期型  date</span><br><span class="line">	score 小数型  number(3,1)</span><br><span class="line">	resume（简历） 大文本型 clob</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">number</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar2</span>(<span class="number">64</span>),</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>),</span><br><span class="line">brithday <span class="built_in">date</span>,</span><br><span class="line">score <span class="built_in">number</span>(<span class="number">3</span>,<span class="number">1</span>),</span><br><span class="line"><span class="keyword">resume</span> <span class="keyword">clob</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(stuno <span class="built_in">number</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,stuname <span class="built_in">varchar2</span>(<span class="number">10</span>),age <span class="built_in">number</span>(<span class="number">2</span>),addr <span class="built_in">varchar</span>(<span class="number">50</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'zhang'</span>,<span class="number">18</span>,<span class="string">'luoyang'</span>);</span><br></pre></td></tr></table></figure>

<p>删除表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-案例：（-掌握创建约束-）（商店售货系统-）"><a href="#2-6-案例：（-掌握创建约束-）（商店售货系统-）" class="headerlink" title="2.6. 案例：（ 掌握创建约束 ）（商店售货系统 ）"></a>2.6. 案例：（ 掌握创建约束 ）（商店售货系统 ）</h3><p>举例说明：<br>商店售货系统表设计案例 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">现有一个商店的数据库，记录客户及其购物情况，由下面三个表组成：</span><br><span class="line">商品 goods  表：</span><br><span class="line">            商品号 goodsId（主键），商品名 goodsName（非空），</span><br><span class="line">            单价 price（大于零），商品类别 category，供应商 provider；</span><br><span class="line">客户 customer:</span><br><span class="line">           客户号 customerId（主键），姓名 name（非空），住址 address，</span><br><span class="line">           邮箱 email，性别 sex（默认男，<span class="keyword">check</span>），身份证 cardId（唯一）；</span><br><span class="line">购买 purchase ：</span><br><span class="line">            客户号 customerId（外键），商品号 goodsId（外键），</span><br><span class="line">            购买数量 nums（<span class="number">1</span> 到 <span class="number">30</span> 个）；</span><br><span class="line">请用 <span class="keyword">SQL</span>  语言完成下列功能：</span><br></pre></td></tr></table></figure>
<ol>
<li>建表，在定义中要求声明：<br>(1).每个表的主外键；<br>(2).客户的姓名不能为空值；<br>(3).单价必须大于 0，购买数量必须在 1 到 30 之间；<br>(4).邮箱不能够重复；<br>(5).客户的性别必须是 男 或者 女，默认是男；</li>
</ol>
<p>  商品表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">商品 goods  表：</span><br><span class="line">商品编号：goodsId 商品名称：goodsName</span><br><span class="line">单价：price 商品类别：category</span><br><span class="line">供应商：provider</span><br><span class="line">代码：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods(goodsId <span class="built_in">number</span> primary <span class="keyword">key</span>,</span><br><span class="line">goodsName <span class="built_in">varchar2</span>(<span class="number">36</span>),</span><br><span class="line">price <span class="built_in">number</span> <span class="keyword">check</span>(price&gt;<span class="number">0</span>),</span><br><span class="line"><span class="keyword">category</span> <span class="built_in">varchar2</span>(<span class="number">64</span>),</span><br><span class="line">provider <span class="built_in">varchar2</span>(<span class="number">64</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>  客户 表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">      客户 customer  表：</span><br><span class="line">       客户编号：customerId 姓名：name ，</span><br><span class="line">       住址：address 邮箱：email ，</span><br><span class="line">       性别：sex 身份证：idCard</span><br><span class="line">代码：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> customer(customerId <span class="built_in">number</span> primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar2</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">address <span class="built_in">varchar2</span>(<span class="number">64</span>),</span><br><span class="line">email <span class="built_in">varchar2</span>(<span class="number">64</span>) <span class="keyword">unique</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">default</span><span class="string">' 男'</span> <span class="keyword">check</span>(sex <span class="keyword">in</span>(<span class="string">' 男'</span>,<span class="string">' 女'</span>)),</span><br><span class="line">idCard <span class="built_in">varchar2</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>  购买表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">购买 purchase  表：</span><br><span class="line">客户 编 号 ：customerId 商品编号：goodsId</span><br><span class="line">购买数量 ：nums</span><br><span class="line">代码：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> purchase(customerId <span class="built_in">number</span> <span class="keyword">references</span> customer(customerId),</span><br><span class="line">goodsId <span class="built_in">number</span> <span class="keyword">references</span> goods(goodsId),</span><br><span class="line">nums <span class="built_in">number</span> <span class="keyword">check</span>(nums&gt;=<span class="number">1</span> <span class="keyword">and</span> nums&lt;=<span class="number">30</span>),</span><br><span class="line">primary <span class="keyword">key</span>(customerId,goodsId)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle 11g安装步骤与卸载步骤</title>
    <url>/2018/02/10/2018-02-10-Oracle-11g%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4%E4%B8%8E%E5%8D%B8%E8%BD%BD%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h2 id="1-安装步骤"><a href="#1-安装步骤" class="headerlink" title="1.安装步骤"></a>1.安装步骤</h2><p>首先先下载好Oracle安装包（这个就不用说了，上Oracle官网自己找下载入口），将下载好后的两个压缩文件解压至同一文件夹下，</p>
<a id="more"></a>

<p>解压提供的压缩包，看到如下目录：</p>
<p><img src="https://img-blog.csdnimg.cn/20190105212846190.png" alt="在这里插入图片描述"><br>第一个目录是Oracle的安装文件目录<br>第二个目录是32位的PLsql链接64的Oracle需要的客户端文件<br>第三个目录是PLSQL的安装文件，其中包括中文扩展包等</p>
<h1 id="1、Oracle的安装"><a href="#1、Oracle的安装" class="headerlink" title="1、Oracle的安装"></a>1、Oracle的安装</h1><p>步骤一：双击datebase目录下的setup.exe文件，打开安装程序<br><img src="https://img-blog.csdnimg.cn/20190105212933396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>步骤二：不用填写任何东西，直接点击“下一步”。如果有提示，点击“继续”即可<br><img src="https://img-blog.csdnimg.cn/20190105212949213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>步骤三：安装选项按照默认的不变，直接点击“下一步”按钮<br><img src="https://img-blog.csdnimg.cn/20190105213007874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>步骤四：默认选择“桌面类”，点击“下一步”按钮<br><img src="https://img-blog.csdnimg.cn/20190105213024648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>步骤五：查看Oracle的安装目录，可以默认不用修改。这里主要输入全局数据库的管理口令和确认口令。这里密码统一输入orcl。下面的警告可以不用处理，点击“下一步”按钮，直到点击“完成”按钮，Oracle开始安装<br><img src="https://img-blog.csdnimg.cn/20190105213040265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>步骤六：安装成功后，不要急着点击弹出的框的“确定”按钮。因为数据库中某些用户处于锁定状态，需要解锁。因此点击“口令管理”按钮，对下列用户进行解锁，设置口令<br><img src="https://img-blog.csdnimg.cn/20190105213056948.png" alt="在这里插入图片描述"><br>选择口令管理，主要观察一下几个用户：</p>
<ul>
<li>普通用户：Scott用户的密码：tiger</li>
<li>普通管理员：system用户的密码：orcl</li>
<li>超级管理员：sys用户的密码：orcl</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190105213118617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>步骤七：激活账户设置过口令后，点击确定按钮，关闭窗口。整个安装过程结束。打开cmd运行框，输入sqlplus，打开数据库登录窗口。用户名输入scott，密码输入tiger。回车登录进入到数据库，表明数据库一切正常<br><img src="https://img-blog.csdnimg.cn/20190105213138384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="2、Oracle服务介绍"><a href="#2、Oracle服务介绍" class="headerlink" title="2、Oracle服务介绍"></a>2、Oracle服务介绍</h1><p>Oracle安装成功后，因此启动了多个服务，占用内存比较大，因此需要关闭某些不必要的服务。Oracle11g安装后，一共有以下几个服务：<br><img src="https://img-blog.csdnimg.cn/20190105213206104.png" alt="在这里插入图片描述"></p>
<p>具体操作是右键“我的电脑”–“管理”–“服务和应用程序”—“服务”，可以看到上图的Oracle服务。<br>具体每个服务的介绍如下：<br>| Oracle ORCL VSS Writer Service<br>默认手动操作<br>–Oracle卷映射拷贝写入服务，VSS(Volume Shadow Copy Service)能够让存储基础设备(比如磁盘，阵列等)创建高保真的时间点映像，即映射拷贝(shadow copy)。它可以在多卷或者单个卷上创建映射拷贝，同时不会影响到系统的系统能。(非必须启动) |<br>|–|<br>| 默认开启启动 Oracle数据库控制台服务，orcl是Oracle的实例标识，默认的实例为orcl。在运行Enterprise Manager(企业管理器OEM)的时候，需要启动这个服务。(非必须启动)  |<br>|-  OracleJobSchedulerORCL<br>默认自动禁止  Oracle作业调度(定时器)服务，ORCL是Oracle实例标识。(非必须启动)   -|<br>|- OracleMTSRecoveryService<br>默认开机启动 服务端控制。该服务允许数据库充当一个微软事务服务器MTS、COM/COM+对象和分布式环境下的事务的资源管理器。(非必须启动)   -|<br>|- OracleOraDb11g_home1ClrAgent<br>默认手动操作  Oracle数据库.NET扩展服务的一部分。 (非必须启动)-|<br>|-OracleOraDb11g_home1TNSListener 默认开机启动 监听器服务，服务只有在数据库需要远程访问的时候才需要。<br>|- OracleServiceORCL  默认开机启动   数据库服务(数据库实例)，是Oracle核心服务该服务，是数据库启动的基础， 只有该服务启动，Oracle数据库才能正常启动。(必须启动)-| -|</p>
<p><strong>通过以上内容，将除了OracleOraDb11g_home1TNSListener和OracleServiceORCL设置为自动启动外，其他的都设置为手动启动。这样可以给电脑剩下很多的内存空间。</strong></p>
<h1 id="3、PLSQL的安装和链接"><a href="#3、PLSQL的安装和链接" class="headerlink" title="3、PLSQL的安装和链接"></a>3、PLSQL的安装和链接</h1><p>我们这里用的是Oracle 64位，而PLSQL是32位的。下面是我们的操作步骤<br><strong>步骤一：安装PLSQL且破解成功</strong><br>步骤二：假设Oracle的安装目录是D:\app\hp，将installclient_11_2目录拷贝到Oracle安装的目录：D:\app\hp\product中。如下图；<br><img src="https://img-blog.csdnimg.cn/20190105213656526.png" alt="在这里插入图片描述"><br>步骤三：在目录<strong>D:\app\hp\product\11.2.0\dbhome_1\NETWORK\ADMIN中找到两个文件listener.ora和tnsnames.ora，将此两个文件拷贝到D:\app\hp\product\instantclient_11_2\NETWORK\ADMIN<br>（注意NETWORK和ADMIN目录需要自己新建）</strong></p>
<p>步骤四：打开PLSQL客户端后，取消登陆，进入主界面<br>点击工具—首选项—连接。将其中的”注销“更改为”提交“；<br>Oracle主目录名写入：D:\app\hp\product\instantclient_11_2<br>OCI库的目录写入：D:\app\hp\product\instantclient_11_2\OCI.DLL<br>应用–确定–关闭PLSQL_Developer重新运行</p>
<p><img src="https://img-blog.csdnimg.cn/20190105213729667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>步骤五：关闭PLSQL，重新打开PLSQL，然后输入用户名密码scott/tiger，选择数据库为orcl，点击登陆就可以操作数据库了</p>
<p><img src="https://img-blog.csdnimg.cn/20190105213750666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbzExMjAxNzg1MTg=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>数据库的三个常用的用户及默认密码<br>sys:change_on_install<br>system:manager<br>scott:tiger<br> （本机在安装时对初始密码进行更改为123456，scott密码仍未tiger）</p>
<p>Oracle客户端：<br>sqlplus：Oracle自带的<br>sqlplus的启用：<br>(1)Oracle的安装目录中找到sqlplus<br>(2)命令行中输入：sqlplus username/password@ip:port/database sid<br>(3)开始菜单-&gt;运行:输入sqlplus username/password@ip:port/database sid<br>注意：<br>(1)@ip:port：登录远程数据库使用，登录本地数据库可以省略，可以写成：sqlplus username/password<br>(2)database sid:选择数据库的意思。<br>(3)问题:登陆本地数据库：sqlplus username/password@ORCL</p>
<p>注意：<br>在口令管理中，，忘记解锁怎么办？<br>解锁用户和修改密码：<br>（1）sqlplus连接到数据库：sqlplus sys/123456 as sysdba<br>（2）输入解锁语句：alter user scott account unlock;<br>（3）修改密码：alter user scott identified by 654321;<br>        passw【ord】用户名:可以去修改其他用户的密码。<br>         passw:表示修改自己的密码。</p>
<h1 id="4-Oracle的卸载步骤："><a href="#4-Oracle的卸载步骤：" class="headerlink" title="4 Oracle的卸载步骤："></a>4 Oracle的卸载步骤：</h1><p>1.我的电脑右键管理－＞服务停止所有Oracle服务。<br>或者控制面板－＞管理工具－＞服务停止所有Oracle服务<br>2.开始－＞程序－＞Oracle －＞Oracle Installation Products－＞ Universal Installer 卸装所有Oracle产品，但Universal Installer本身不能被删除<br>3.点击卸载产品，选择需要卸载的产品，点击删除按钮<br>4.卸载完成后重启计算机<br>5.运行regedit，删除HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services，滚动这个列表，删除所有Oracle入口。<br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application， 删除所有Oracle入口。</p>
<p>注意，最主要的是最后一步，删除注册表中得在内容。</p>
]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet中读取txt文本文件路径问题</title>
    <url>/2018/02/10/2018-02-10-Servlet%E4%B8%AD%E8%AF%BB%E5%8F%96txt%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在进行javaweb开发中，遇到了一个问题，就是Servlet读取webcontent下的文本文件路径问题，会出现系统找不到文件的各种错误，经过查找问题，发现原来是由于这个项目部署在tomcat上之后，文件的目录结构会发生相应的一些变化，所以说使用常规的获取相对或绝对路径的方式在这个照常使用会导致运行之后，系统提示找不到文件路径的一些错误提示。<br>下面对如何在servlet中读取WEB-INF下的我存放的txt文件进行记录。</p>
<a id="more"></a>

<p>下图为项目路径，而这里要实现的便是使用teacherProduce这一个Servlet来读取WEB-INF目录下的teacher1.txt文件。<br><img src="https://img-blog.csdnimg.cn/20190122091729965.png" alt="在这里插入图片描述"><br>在这里说明一些获取文件路径的问题<br>常规的相对路径在这里无效，在tomcat上部署后目录结构变了<br>要使用getServletContext().getRealPath 来获取文件的路径。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String pathname = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/txt/teacher1.txt"</span>);</span><br></pre></td></tr></table></figure>
<p>需要注意的是：getServletContext().getRealPath只能在servlet中使用。</p>
<p>完整代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">teacherProduce</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		request.setCharacterEncoding(<span class="string">"UTF-8"</span>);		</span><br><span class="line">		<span class="comment">//读取文件</span></span><br><span class="line">		String content = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		String pathname = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/txt/teacher1.txt"</span>);</span><br><span class="line">		</span><br><span class="line">		String encoding = <span class="string">"UTF-8"</span>;</span><br><span class="line">	    File file = <span class="keyword">new</span> File(pathname);	    </span><br><span class="line">	    System.out.println(file);</span><br><span class="line">	    </span><br><span class="line">	    BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">             br = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">             String line = <span class="string">""</span>;</span><br><span class="line">             <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 System.out.println(line);</span><br><span class="line">                 content = content +line;</span><br><span class="line">             &#125;</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">	    		                </span><br><span class="line">        request.setAttribute(<span class="string">"content"</span>, content);	</span><br><span class="line">		</span><br><span class="line">		request.getRequestDispatcher(<span class="string">"/personProduce/personProduce.jsp"</span>).forward(request, response);				</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>plsql中如何创建函数，触发器以及包和变量的使用</title>
    <url>/2018/02/10/2018-02-10-plsql%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0%EF%BC%8C%E8%A7%A6%E5%8F%91%E5%99%A8%E4%BB%A5%E5%8F%8A%E5%8C%85%E5%92%8C%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在数据库的操作中，在编写sql语句的时候，我们可能会用到函数以及触发器等的操作来简化我们的工作。<br>在这片文章中，也和我以前的博文一样，不是纯粹的理论讲解，而是采用的是案例的方式进行笔记的记录说明。还是用到的以前博文中的员工表emp</p>
<a id="more"></a>

<h1 id="1-认识plsql的函数"><a href="#1-认识plsql的函数" class="headerlink" title="1.认识plsql的函数"></a>1.认识plsql的函数</h1><p>问题1 输入雇员姓名返回年薪</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> sp_func(spName <span class="built_in">varchar2</span>) <span class="keyword">return</span> <span class="built_in">number</span> <span class="keyword">is</span></span><br><span class="line"> yearSal <span class="built_in">number</span>(<span class="number">7</span>,<span class="number">2</span>);</span><br><span class="line"> <span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">select</span> sal*<span class="number">12</span>+nvl(comm,<span class="number">0</span>)*<span class="number">12</span> <span class="keyword">into</span> yearSal <span class="keyword">from</span> emp <span class="keyword">where</span> ename=spName;</span><br><span class="line">   return yearSal;</span><br><span class="line"> <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>总结：<br>     语法：</p>
<pre><code>create 【or replace】 function 函数名（参数1 类型1，参数2 类型2） return 返回值类型
                  is 变量、常量和游标的定义；
                 begin
                       执行部分
                    exception
                       异常处理部分（可选）
                  end;</code></pre><p><strong>调用函数的第一种方式</strong></p>
<pre><code>var  income number;                                          --定义全局变量var 变量名  变量类型
call sp_func(&apos;SCOTT&apos;) into:income;   --全局变量赋值：call 函数into：全部变量名
print income;                        --打印全局变量 print 全局变量名</code></pre><p><strong>调用函数的第二种方式</strong></p>
<pre><code>select sp_func(&apos;SCOTT&apos;) from dual;</code></pre><h1 id="2-包"><a href="#2-包" class="headerlink" title="2,包"></a>2,包</h1><p>  包:<br>  主要是一种用来组织和管理过程和函数的一种机制，主要由两部分组成，包规范和包体<br>  包里面主要是声明一下过程和函数，过程和函数的实现放在包体里面</p>
<p>  –创建包：包里面只是声明过程和函数</p>
<p>  问题：创建一个包，包含一个过程，包含一个函数，<br>  过程：输入员工姓名，新的工资，更新员工工资。<br>  函数：输入员工的姓名，计算该员工的收入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">createor <span class="keyword">replace</span> <span class="keyword">package</span> sp_package <span class="keyword">is</span></span><br><span class="line">  <span class="keyword">procedure</span> update_sal(<span class="keyword">name</span> emp.ename%<span class="keyword">type</span>,newSal emp.sal%<span class="keyword">type</span>);</span><br><span class="line">  function annual_income(name emp.ename%type) return number;</span><br><span class="line"> <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>总结<br>       语法：创建包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create 【or replace】 package 包名  is</span><br><span class="line">       过程1声明</span><br><span class="line">       过程2声明</span><br><span class="line">       .......</span><br><span class="line">       函数1声明</span><br><span class="line">       函数2声明</span><br><span class="line">       ....</span><br><span class="line">  end;</span><br></pre></td></tr></table></figure>
<p> 过程的实现放在包体里面，包里面只是声明过程和函数<br>     –创建包体:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">package</span> <span class="keyword">body</span> sp_package <span class="keyword">is</span></span><br><span class="line">                   <span class="keyword">procedure</span> update_sal(<span class="keyword">name</span> emp.ename%<span class="keyword">type</span>,newSal emp.sal%<span class="keyword">type</span>) <span class="keyword">is</span></span><br><span class="line">                     <span class="keyword">begin</span></span><br><span class="line">                       <span class="keyword">update</span> emp <span class="keyword">set</span> sal=newSal <span class="keyword">where</span> ename=<span class="keyword">name</span>;</span><br><span class="line">                     <span class="keyword">end</span>;</span><br><span class="line">                    </span><br><span class="line">                   function annual_income(name emp.ename%type) return number is</span><br><span class="line">                     yearSal number(7,2);</span><br><span class="line">                     <span class="keyword">begin</span></span><br><span class="line">                       <span class="keyword">select</span> sal*<span class="number">12</span>+nvl(comm,<span class="number">0</span>)*<span class="number">12</span> <span class="keyword">into</span> yearSal <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="keyword">name</span>;</span><br><span class="line">                       return yearSal;</span><br><span class="line">                     <span class="keyword">end</span>;</span><br><span class="line">            <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p>创建包体的语法</p>
<pre><code>create 【or replace】 package body 包名 is
       过程1实现体
       过程2实现体
       ....
       函数1实现体
       函数2实现体
end;</code></pre><p>​<br>包中的过程和函数的调用    通过 包名.过程名或者 包名.函数名 来调用的<br>​     </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec sp_package.update_sal(&apos;SCOTT&apos;,4500);</span><br><span class="line"> </span><br><span class="line">var income number;</span><br><span class="line">call sp_package.annual_income(&apos;SCOTT&apos;) into:income;</span><br><span class="line">print income;</span><br><span class="line">select sp_package.annual_income(&apos;SCOTT&apos;) from dual;</span><br></pre></td></tr></table></figure>



<h1 id="PL-SQL变量：标量类型，复合类型，参照类型lob（large-object）类型"><a href="#PL-SQL变量：标量类型，复合类型，参照类型lob（large-object）类型" class="headerlink" title="PL/SQL变量：标量类型，复合类型，参照类型lob（large object）类型"></a>PL/SQL变量：标量类型，复合类型，参照类型lob（large object）类型</h1><p>–标量类型：  变量名【constan】 数据类型【not null】【：=值】|【default 值】;</p>
<p>案例：<br>        定义一个变长的字符串：v_ename varchar2(20);<br>          定义一个小数：v_vearsal number(7,2);<br>          定义一个小数，给初始值为3.14：v_sal number(3,2):=3.14;<br>          定义一个常量PI给默认值为3.14：PI constant number(3,2):=3.14;<br>          定义一个日期类型；v_hiredate date<br>          定义一个布尔类型 v_invid boolean not null default false;</p>
<p>编写一个PL/sql块，输入员工编号，显示雇员的姓名和工资，以及个人所得税（税率为0.05）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">declare</span></span><br><span class="line">         v_tax_rate <span class="keyword">constant</span> <span class="built_in">number</span>(<span class="number">3</span>,<span class="number">2</span>):=<span class="number">0.05</span>;</span><br><span class="line">         v_ename emp.ename%type;</span><br><span class="line">         v_sal emp.sal%type;</span><br><span class="line">         v_personal_tax number(7,2);</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">select</span> ename,sal <span class="keyword">into</span> v_ename,v_sal <span class="keyword">from</span> emp <span class="keyword">where</span> empno=&amp;<span class="keyword">no</span>;</span><br><span class="line">v_personal_tax=v_sal*v_tax_rate;</span><br><span class="line">         dbms_output.put_line('姓名：'||v_ename||'工资是'||v_sal||'个人所得税'||v_personal_tax);</span><br><span class="line">      <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<pre><code>%type :输入标量类型一种，比较灵活  v_ename emp.ename%type;表示v_ename 和emp表中的ename类型一样</code></pre><p>​<br>复合类型：<br> （1）PL/SQL的记录类型：<br> （2）pl/sql的表类型<br> （3）嵌套表类型<br> （4）varray类型</p>
<h2 id="（1）PL-SQL记录类型：-rowtype"><a href="#（1）PL-SQL记录类型：-rowtype" class="headerlink" title="（1）PL/SQL记录类型：%rowtype"></a>（1）PL/SQL记录类型：%rowtype</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">案例：输入一个员工编号，显示该员工的所有信息</span><br><span class="line">      <span class="keyword">declare</span></span><br><span class="line">         v_emp emp%rowtype;</span><br><span class="line">       <span class="keyword">begin</span></span><br><span class="line">         <span class="keyword">select</span> *<span class="keyword">into</span> v_emp <span class="keyword">from</span> emp <span class="keyword">where</span> empno=&amp;<span class="keyword">no</span>;</span><br><span class="line">         dbms_output.put_line('姓名:'||v_emp.ename||'工作:'||v_emp.sal||'奖金:'||v_emp.comm)</span><br><span class="line">       <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>记录类型（自定义的）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">     <span class="keyword">type</span> emp_record_type <span class="keyword">is</span> <span class="built_in">record</span>(<span class="keyword">name</span> emp.ename%<span class="keyword">type</span>,salary emp.sal%<span class="keyword">type</span>,dept emp.deptno%<span class="keyword">type</span>);</span><br><span class="line">     sp_record emp_record_type;</span><br><span class="line">     <span class="keyword">begin</span></span><br><span class="line">       <span class="keyword">select</span> ename,sal,deptno <span class="keyword">into</span> sp_record <span class="keyword">from</span> emp <span class="keyword">where</span> empno=&amp;<span class="keyword">no</span>;</span><br><span class="line">       dbms_output.put_line('姓名：'||sp_record.name||'工资'||sp_record.salary||'部门'||sp_record.dept);</span><br><span class="line">     <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>


<p>​<br>记录类型的语法：<br>​      type 类型名 is record(变量1 数据类型1 ,变量2 数据类型2,….)<br>​      变量名  类型名;<br>​     </p>
<h2 id="PL-SQL的表类型"><a href="#PL-SQL的表类型" class="headerlink" title="PL/SQL的表类型"></a>PL/SQL的表类型</h2><pre><code>--表类型（类似于高级语言中的数组）
--定义表类型时，不定义表的大小
--定义表类型时，需要指定表中的每个数据的类型
--表类型的下标可以为正，可以为负。</code></pre><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">      <span class="keyword">type</span> emp_table_type <span class="keyword">is</span> <span class="keyword">table</span> <span class="keyword">of</span> emp.ename%<span class="keyword">type</span> <span class="keyword">index</span> <span class="keyword">by</span> binary_integer;</span><br><span class="line">      sp_table emp_table_type;</span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">select</span> ename <span class="keyword">into</span> sp_table(<span class="number">-1</span>)<span class="keyword">from</span> emp <span class="keyword">where</span> empno=&amp;<span class="keyword">no</span>;</span><br></pre></td></tr></table></figure>



<p>参照类型：游标</p>
<p>案例：输入一个部门名称，显示该部门所有员工的姓名和工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">type</span> sp_emp_cursor <span class="keyword">is</span> <span class="keyword">ref</span> <span class="keyword">cursor</span>;</span><br><span class="line">test_cursor sp_emp_cursor;</span><br><span class="line">v_ename emp.ename%type;</span><br><span class="line">v_sal emp.sal%type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">open</span> test_cursor <span class="keyword">for</span> <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=&amp;<span class="keyword">no</span>;</span><br><span class="line">  loop</span><br><span class="line">    fetch test_cursor into v_ename,v_sal;</span><br><span class="line">    exit when test_cursor%notfound;</span><br><span class="line">    dbms_output.put_line('姓名：'||v_ename||'；工资：'||v_sal);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">  close test_cursor;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<pre><code>--总结：
    --（1）定义：type 类型名 is ref cursor: 表明sp_cursor  是一个游标类型
    --（2）test_cursor sp_emp_cursor;定义一个游标变量test_cursor，是sp_emp_cursor类型
    --（3）open test_cursor  for  查询语句；
    --（4）fetch 游标变量名into 变量1，变量2；
    --（5）exit when  test_cursor%notfound;   定义循环退出的条件
    --（6）close test_cursor ：游标使用完要关闭游标，关闭游标</code></pre><p><strong>写法2（建议使用这一种写法）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">cursor</span> v_cursor <span class="keyword">is</span> <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=&amp;<span class="keyword">no</span>;</span><br><span class="line">v_ename emp.ename%type;</span><br><span class="line">v_sal emp.sal%type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">open</span> v_cursor;</span><br><span class="line">  loop</span><br><span class="line">    fetch v_cursor into v_ename,v_sal;</span><br><span class="line">    exit when v_cursor%notfound;</span><br><span class="line">    dbms_output.put_line('姓名：'||v_ename||'；工资：'||v_sal);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">  close v_cursor;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>


<p>/*<br>cursor  游标变量名is select 语句<br>          open 游标变量<br>          fetch 游标变量into 变量1，变量2，….<br>close  游标变量</p>
<p>*/</p>
<p>–写法3：用for循环使用游标</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">cursor</span> v_cursor <span class="keyword">is</span> <span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=&amp;<span class="keyword">no</span>;</span><br><span class="line">v_ename emp.ename%type;</span><br><span class="line">v_sal emp.sal%type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> v_cursors <span class="keyword">in</span> v_cursor <span class="keyword">loop</span></span><br><span class="line">    v_ename:=v_cursors.ename;</span><br><span class="line">    v_sal:=v_cursors.sal;</span><br><span class="line">    dbms_output.put_line('姓名：'||v_ename||'；工资：'||v_sal);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>–for循环会自动打开游标和关闭游标</p>
<h1 id="触发器："><a href="#触发器：" class="headerlink" title="触发器："></a>触发器：</h1><p>当用户登录、退出或者是对对象进行操作的时候，或者是进行ddl操作的时候，引起某个存储过程的执行，我们把这样一个隐含调用的存储过程称之为触发器<br>1）我们在开发中，可能会提出这样的问题：<br>–当用户登录的时候，我们希望能够自动记录用户的名字和登录的时间<br>–当用户在周四或非工作日对表进行修改的时候，不允许这样做。<br>–当用户去删除一条记录的时候，希望能够将删除记录自动的备份到另外一张表中</p>
<p><strong>解决方法：触发器</strong><br>触发器分类：<br>dml触发器（insert，update，delete）,<br>ddl触发器，系统事件触发器（登录、退出等操作）</p>
<p> 下面我们通过例子，来具体的讲解<br>案例1：创建一张my_emp表，给该表添加记录，提示“添加一条数据”</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--语句级的触发器：针对update,insert,select只触发一次操作</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> my_emp(<span class="keyword">id</span> <span class="built_in">number</span>(<span class="number">3</span>),<span class="keyword">name</span> <span class="built_in">varchar2</span>(<span class="number">10</span>));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> tri1</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> scott.my_emp</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  dbms_output.put_line(<span class="string">'添加一条数据'</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p>–执行3次</p>
<pre><code>insert into my_emp values(101,&apos;ellen&apos;)</code></pre><p>–案例2：在my_emp表中，修改id为101的员工信息的时候，修改一次提示一次<br>–for each row表明这是一个行级触发器：修改一行，触发一次输出操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> tri2</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">update</span> <span class="keyword">on</span> scott.my_emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  dbms_output.put_line(<span class="string">'修改一条记录'</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>


<p>–创建触发器的语法结构<br>/*<br>create [or replace] trigger trigger_name<br>{befor|after]} {insert|update|delete}<br>on table_name<br>[for each row]<br>[when condition]<br>begin<br>    –触发的操作<br>end;<br>*/</p>
<p>–案例3：在删除my_emp表中的记录的时候，提示’删除一条记录’</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> tri3</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">delete</span> <span class="keyword">on</span> scott.my_emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  dbms_output.put_line(<span class="string">'删除一条记录'</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>


<p>–案例4：在删除my_emp表中的记录的时候，触发报错操作，不让删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> tri4</span><br><span class="line"><span class="keyword">before</span> <span class="keyword">delete</span> <span class="keyword">on</span> scott.my_emp</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  raise_application_error(<span class="number">-20001</span>,<span class="string">'不能删除'</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>/*<br>raise_application_error是oracle给我们提供的存储过程，<br>可以传入两个参数，第一个参数是错误号，-20000–20999之间，<br>第二个参数是报错信息<br>*/</p>
<p>–案例5：为了禁止工作人员在周四删除my_emp表中的员工信息，创建一个触发器完成这个操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> tri5</span><br><span class="line"><span class="keyword">before</span> <span class="keyword">delete</span> <span class="keyword">on</span> scott.my_emp</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'day'</span>)=<span class="string">'星期四'</span> <span class="keyword">then</span></span><br><span class="line">    raise_application_error(<span class="number">-20002</span>,<span class="string">'对不起，周四不允许删除员工信息'</span>);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>


<p>–案例6：禁止工作人员在周四修改员工信息（insert update delete）,不同操作报错信息不同</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> tri6</span><br><span class="line"><span class="keyword">before</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span> <span class="keyword">on</span> scott.my_emp</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> inserting <span class="keyword">then</span></span><br><span class="line">      dbms_output.put_line(<span class="string">'请不要添加'</span>);</span><br><span class="line">      raise_application_error(-20003,'请不要添加');</span><br><span class="line">    when updating then</span><br><span class="line">      raise_application_error(-20004,'请不要修改');</span><br><span class="line">    when deleting then</span><br><span class="line">      raise_application_error(-20005,'请不要删除');</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>–当触发器中同时包含多个触发事件时，为了区分触发事件，可以使用三个条件：updating,deleting,inserting</p>
<p>–案例7：修改员工工资的时候，要求新工资必须比原来工资高，创建一个触发器来解决这个问题，输出新工资和老工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> tri7</span><br><span class="line"><span class="keyword">before</span> <span class="keyword">update</span> <span class="keyword">on</span> scott.emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> :new.sal&lt;:old.sal <span class="keyword">then</span></span><br><span class="line">    raise_application_error(<span class="number">-20006</span>,<span class="string">'新工资不能低于原来工资'</span>);</span><br><span class="line">  else</span><br><span class="line">    dbms_output.put_line('原来的工资是：'||:old.sal||'新的工资：'||:new.sal);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>–:new：update操作完成之后的列的值<br>–:old：update操作完成前的列的值</p>
<p>–案例8：编写一个触发器，当用户删除my_emp的记录的时候，自动将删除的id和name备份到另外一张表中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> my_emp_bak <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> my_emp <span class="keyword">where</span> <span class="number">1</span>=<span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> tir8</span><br><span class="line"><span class="keyword">before</span> <span class="keyword">delete</span> <span class="keyword">on</span> scott.my_emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> my_emp_bak <span class="keyword">values</span>(:old.id,:old.name);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>


<p>–禁用触发器</p>
<pre><code>alter trigger trigger_name disable;</code></pre><p>–启用触发器</p>
<pre><code>alter trigger trigger_name enable;</code></pre><p>–删除触发器</p>
<pre><code>drop trigger trigger_name;</code></pre><p>–编写一个触发器，控制员工的新工资不能低于原来的工资，但是也不能高于原来工资的20%</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> tri9</span><br><span class="line"><span class="keyword">before</span> <span class="keyword">update</span> <span class="keyword">on</span> scott.emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> :new.sal&lt;:old.sal <span class="keyword">or</span> :new.sal&gt;:old.sal*<span class="number">1.2</span> <span class="keyword">then</span></span><br><span class="line">    raise_application_error(<span class="number">-20007</span>,<span class="string">'工资范围不对'</span>);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>


<p>–作业：创建一张学生表stu（id,name,birthdate）,编写一个触发器，要求是：如果学生年龄小于18岁，则不允许插入</p>
<p>–Oracle的系统触发器：主要是针对oracle的系统事件的一个触发器<br>–Oracle定义的常用的系统事件：<br>–ora_client_ip_address:返回客户端的ip<br>–ora_database_name:返回数据库名<br>–ora_login_user:返回登录用户名<br>–ora_sysevent:返回触发器的系统事件名<br>–ora_des_encrypted_password:返回加密后的密码</p>
<p>–案例：为了记录用户登录和退出的时间，可以建立登录和退出的触发器</p>
<pre><code>create table log_table(username varchar2(10),logon_time date,logoff_time date,address varchar2(20));</code></pre><p>–创建登录触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> <span class="keyword">logon</span></span><br><span class="line"><span class="keyword">after</span> <span class="keyword">logon</span> <span class="keyword">on</span> <span class="keyword">database</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> log_table(username,logon_time,address)<span class="keyword">values</span>(ora_login_user,<span class="keyword">sysdate</span>,ora_client_ip_address);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>


<p>–创建退出触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> <span class="keyword">logoff</span></span><br><span class="line"><span class="keyword">before</span> <span class="keyword">logoff</span> <span class="keyword">on</span> <span class="keyword">database</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> log_table(username,logoff_time,address)<span class="keyword">values</span>(ora_login_user,<span class="keyword">sysdate</span>,ora_client_ip_address);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>–系统触发器需要时系统管理员身份才能创建</p>
<p>–ddl触发器：<br>–编写一个触发器，可以记录用户所进行的ddl操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> my_ddl_event(<span class="keyword">event</span> <span class="built_in">varchar2</span>(<span class="number">20</span>),username <span class="built_in">varchar2</span>(<span class="number">10</span>),<span class="built_in">time</span> <span class="built_in">date</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> ddl_tri</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">ddl</span> <span class="keyword">on</span> scott.schema</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> my_ddl_event <span class="keyword">values</span>(ora_sysevent,ora_login_user,<span class="keyword">sysdate</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>


<p>–禁用一张表上所有的触发器：</p>
<pre><code>alter table 表名 disable all triggers;</code></pre><p>–激活一张表上所有的触发器：</p>
<pre><code>alter table 表名 enable all triggers;</code></pre>]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle数据库忘记sys(或system)账户密码</title>
    <url>/2018/01/12/2018-02-10-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BF%98%E8%AE%B0sys(%E6%88%96system)%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h2 id="一、忘记除SYS、SYSTEM用户之外的用户的登录密码。"><a href="#一、忘记除SYS、SYSTEM用户之外的用户的登录密码。" class="headerlink" title="一、忘记除SYS、SYSTEM用户之外的用户的登录密码。"></a>一、忘记除SYS、SYSTEM用户之外的用户的登录密码。</h2><p> 用SYS (或SYSTEM)用户登录: sqlplus sys/password as sysdba<br> 使用如下语句修改用户的密码: alter user user_name identified by newpassword;<br> 注意：密码不能全是数字。并且不能是数字开头。否则会出现：ORA-00988: 口令缺失或无效</p>
<a id="more"></a>

<h2 id="二、忘记SYS用户，或者是SYSTEM用户的密码。"><a href="#二、忘记SYS用户，或者是SYSTEM用户的密码。" class="headerlink" title="二、忘记SYS用户，或者是SYSTEM用户的密码。"></a>二、忘记SYS用户，或者是SYSTEM用户的密码。</h2><p> 如果是忘记SYSTEM用户的密码，可以用SYS用户登录。然后用ALTER USER 命令修改密码：<br> CONN SYS/PASS_WORD AS SYSDBA;<br> ALTER USER SYSTEM IDENTIFIED BY “newpass”;<br> 如果是忘记SYS用户的密码，可以用SYSTEM用户登录。然后用ALTER USER 命令修改密码。<br> CONN SYSTEM/PASS_WORD ;<br> ALTER USER SYSTEM IDENTIFIED BY newpass;</p>
<h2 id="三、如果SYS-SYSTEM用户的密码都忘记或是丢失。"><a href="#三、如果SYS-SYSTEM用户的密码都忘记或是丢失。" class="headerlink" title="三、如果SYS,SYSTEM用户的密码都忘记或是丢失。"></a>三、如果SYS,SYSTEM用户的密码都忘记或是丢失。</h2><p> 可以使用ORAPWD.EXE 工具修改密码。<br> 开始菜单-&gt;运行-&gt;输入‘CMD’,打开命令提示符窗口，输入如下命令：<br> orapwd file=D:\oracle10g\database\pwdctcsys.ora password=newpass<br> 这个命令重新生成了数据库的密码文件。密码文件的位置在ORACLE_HOME目录下的\database目录下。<br> 这个密码是修改sys用户的密码。除sys其他用户的密码不会改变。<br>不过Oracle提供了两种验证方式，一种是OS验证，另一种密码文件验证方式，如果是第一种方式用以下方法修改密码：<br>　　sqlplus /nolog;<br>　　connect / as sysdba<br>　　alter user sys identified by ;<br>　　alter user system identified by ;<br>　　如果是第二种方法就用上述方式修改，也可以下方法修改密码：<br>　　orapwd file=pwdxxx.ora password=你设定的新密码 entries=10<br>　　设定完后，重新启动服务，再次登陆就可以了。</p>
<h2 id="oracle-11g"><a href="#oracle-11g" class="headerlink" title="oracle 11g"></a>oracle 11g</h2><p>在本机安装完Oracle以后，不记得sys用户的密码了，采用如下方法可以修改密码：<br>1.打开cmd，输入sqlplus /nolog，回车；输入“conn / as sysdba”;输入“alter user sys identified by 新密码”，注意：新密码最好以字母开头，否则可能出现错误Ora-00988。有了这个方法后，只要自己对oracle服务器有管理员权限，不记得密码的时候就可以随意修改密码了。<br>2.在命令行执行如下命令：sqlplus “/@服务名 as sysdba”,然后在sqlplus中alter user sys identified by 新密码;<br>alter user system identified by 新密码;<br>3.运行到C盘根目录<br>1)输入：SET ORACLE_SID = 你的SID名称<br>2)输入：sqlplus/nolog<br>3)输入：connect/as sysdba<br>4)输入：alert user sys identified by sys<br>5)输入：alert user system identified by system<br>6)更改完成，密码是Oracle数据库初始密码<br>4.首先,在CMD下输入SQLPLUS/NOLOG然后再在出来的界面中打入CONN/AS SYSDBA,这样就会以本地系统登录的用户为信任用户进入数据库的操作.解决这个问题的方式有两种,一个是：ALTER USER （USERNAME） IDENTIFIED BY “密码”;这个是可以改变USERNAME的密码.当然这个USERNAME必须已经存在的<br>另一种是：CREATE USER (USERNAME) IDENTIFIED BY “密码”;改变用户权限的命令是：GRANT ROLES TO （USERNAME）;以上2种方法都是针对ORACLE 9I的版本 。<br>5.用orapwd.exe命令，可以修改命令。<br>orapwd file=’/oracle/pwdsid.ora’ password=123456这个命令是修改sys用户的密码。你把生成的文件覆盖原来的密码文件。除sys其他用户的密码不会改变。<br>6.su - oracle<br>sqlplus /nolog<br>conn / as sysdba<br>startup (如果数据库不是处于启动状态则启动)<br>alter user sys identified by 123456</p>
<p>然后就可以使用sys用户密码登陆了<br>操作系统认证方式<br>conn / as sysdba<br>alter user sys identified by xxx</p>
<h3 id="一、遇到的问题："><a href="#一、遇到的问题：" class="headerlink" title="一、遇到的问题："></a>一、遇到的问题：</h3><p>1.、忘记除SYS、SYSTEM用户之外的用户的登录密码。</p>
<p>2.、忘记SYS用户，或者是SYSTEM用户的密码。</p>
<p>3.、如果SYS,SYSTEM用户的密码都忘记或是丢失。</p>
<h3 id="二、解决方案："><a href="#二、解决方案：" class="headerlink" title="二、解决方案："></a>二、解决方案：</h3><ol>
<li>忘记除SYS、SYSTEM用户之外的用户的登录密码。</li>
</ol>
<p>用SYS (或SYSTEM)用户登录，使用如下语句修改用户的密码。</p>
<p>CONN SYS/PASS_WORD AS SYSDBA;</p>
<p>ALTER USER SYSTEM IDENTIFIED BY newpass;</p>
<p>注意：密码不能全是数字。并且不能是数字开头。否则会出现：ORA-00988: 口令缺失或无效</p>
<ol start="2">
<li>忘记SYS用户，或者是SYSTEM用户的密码。</li>
</ol>
<p>（1）如果是忘记SYSTEM用户的密码，可以用SYS用户登录。然后用ALTER USER 密令修改密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONN SYS//PASS_WORD AS SYSDBA;</span><br><span class="line">ALTER USER SYSTEM IDENTIFIED BY newpass;</span><br></pre></td></tr></table></figure>
<p>（2）如果是忘记SYS用户的密码，可以用SYSTEM用户登录。然后用ALTER USER 密令修改密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONN SYSTEM//PASS_WORD ;</span><br><span class="line">ALTER USER SYSTEM IDENTIFIED BY newpass;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>如果SYS,SYSTEM用户的密码都忘记或是丢失。这一项尤其重要。可以使用ORAPWD.EXE 工具修改密码。</li>
</ol>
<p>开始菜单-&gt;运行-&gt;输入‘CMD’,打开命令提示符窗口，输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">orapwd file=D:\oracle\product\10.2.0\db_1\database\pwdctcsys.orapassword=newpass</span><br></pre></td></tr></table></figure>

<p>这个命令重新生成了数据库的密码文件。密码文件的位置在ORACLE_HOME目录下的\database目录下。这个密码是修改sys用户的密码。除sys和system其他用户的密码不会改变。</p>
]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
</search>

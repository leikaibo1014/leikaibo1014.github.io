<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雷凯博的博客</title>
  
  <subtitle>记录学习生活中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-08T06:04:58.322Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>雷凯博</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/08/hello-world/"/>
    <id>http://yoursite.com/2019/11/08/hello-world/</id>
    <published>2019-11-08T01:43:04.567Z</published>
    <updated>2019-11-08T06:04:58.322Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MongoDB基本配置</title>
    <link href="http://yoursite.com/2019/01/01/MongoDB%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/01/01/MongoDB入门/</id>
    <published>2019-01-01T03:20:32.000Z</published>
    <updated>2019-11-08T09:21:54.294Z</updated>
    
    <content type="html"><![CDATA[<p>MongDB是一个文档型数据库，里面包含一些术语和概念，我们先来了解一下MongoDB的基本概念，再看一下中间的基本操作</p><a id="more"></a><h2 id="1-1-基础概念"><a href="#1-1-基础概念" class="headerlink" title="1.1 基础概念"></a>1.1 基础概念</h2><p>在mongoDB中是通过数据库、集合、文档、的方式来管理数据、先看一下mongoDB与关系型数据库的一些概念对比：</p><table><thead><tr><th>SQL术语/概念</th><th>MongoDB术语/概念</th><th>解释说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据库行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接（MongDB不支持表连接）</td></tr><tr><td>primary key</td><td>primary</td><td>主键，MongoDB自动在每个集合中添加_id的主键</td></tr></tbody></table><ul><li><ol><li>一个mongodb实例可以创建多个数据库</li></ol></li><li><ol start="2"><li>一个数据库可以创建多个集合</li></ol></li><li><ol start="3"><li>一个集合可以包含多个文档</li></ol></li></ul><h2 id="1-2-连接mongodb"><a href="#1-2-连接mongodb" class="headerlink" title="1.2 连接mongodb"></a>1.2 连接mongodb</h2><p>mongodb的使用方式是客户服务器模式，即使用一个客户端连接mongodb数据库（服务端）。</p><ol><li>命令模式<br>mongodb://[username:password@]host1[:port1][,host2[:port2],…[,hostN[:portN]]][/[database][? options]]</li></ol><p>mongodb:// 固定前缀<br>username：账号，可不填<br>password：密码，可不填<br>host：主机名或ip地址，只有host主机名为必填项。<br>port：端口，可不填，默认27017<br>/database：连接某一个数据库<br>?options：连接参数，key/value对</p><p>例如：<br>    mongodb://localhost 连接本地数据库27017端口<br>    mongodb://root:123456@localhost 使用用户名root密码为123456连接本地数据库27017端口<br>    mongodb://localhost,localhost:27018,localhost:27019，连接三台主从服务器，端口为27017、27018、2701</p><p>我们直接在命令行输入mongo  就可以使用输入命令来操作mongodb数据库了</p><h2 id="1-3-数据库使用"><a href="#1-3-数据库使用" class="headerlink" title="1.3 数据库使用"></a>1.3 数据库使用</h2><ol><li><p>查询数据库</p><p> show dbs   查询全部的数据库<br> db     显示当前数据库</p></li><li><p>创建数据库<br>命令格式  </p><p> use DATABASE_NAME</p><p> 例子：<br> use  test02<br> 执行这一行命令之后，如果有test02数据库则切换到此数据库中，如果没有则创建<br> 这里我们需要注意的是，新创建的数据库不会显示，因为这个数据库中至少需要包含一种集合。</p></li><li><p>删除数据库</p><p> 命令格式</p><p> db.dropDatabase()</p><p> eg：<br> 删除test02数据库<br> 先切换到数据库中  use  test02<br> 在执行删除  db.dropDatabase()  </p></li></ol><h2 id="1-4-集合"><a href="#1-4-集合" class="headerlink" title="1.4 集合"></a>1.4 集合</h2><p>MongoDB中的集合相当于数据库中的表。一个数据库可以创建多个集合，一个集合是将相同类型的文档管理起来。</p><ol><li><p>创建集合</p><p> db.createCollection(name,options)<br> name:新创建的集合名称<br> options：创建参数</p></li><li><p>删除集合</p><p> db.collection.drop()<br> 例子：<br> db.student.drop() 删除student集合</p></li></ol><h2 id="1-5-文档"><a href="#1-5-文档" class="headerlink" title="1.5 文档"></a>1.5 文档</h2><h3 id="1-5-1-插入文档"><a href="#1-5-1-插入文档" class="headerlink" title="1.5.1 插入文档"></a>1.5.1 插入文档</h3><pre><code>mongodb中的文档格式是json格式吗，下边就是一个文档，包括两个key：_id  主键和name{&quot;_id&quot; : ObjectId(&quot;5b2cc4bfa6a44812707739b5&quot;),      &quot;name&quot; : &quot;郑州大学&quot;}</code></pre><p>插入命令：</p><pre><code>db.COLLECTION_NAME.insert(document)`</code></pre><p>每个文档默认以_id作为主键，主键默认类型为ObjectId（对象类型），mongodb会自动生成主键值。  </p><p>例子  </p><pre><code>db.student.insert({&quot;name&quot;:&quot;郑州大学&quot;,&quot;age&quot;:10})</code></pre><p>注意：同一个集合中的文档的key可以不相同！但是建议设置为相同的。 </p><h3 id="1-5-2-更新文档"><a href="#1-5-2-更新文档" class="headerlink" title="1.5.2 更新文档"></a>1.5.2 更新文档</h3><p>命令格式：</p><pre><code>db.collection.update(&lt;query&gt;,&lt;update&gt;,    &lt;options&gt; ) query:查询条件，相当于sql语句的where  update：更新文档内容 options：选项</code></pre><ol><li><p>替换文档</p><p> 将符合条件  “name” “郑州大学” 的第一个文档替换为  {“name”：“郑州大学学生”，“age”：10}</p><pre><code>db.student.update({&quot;name&quot;:&quot;郑州大学&quot;}，{“name”：“郑州大学学生”，“age”：10})</code></pre></li></ol><ol start="2"><li><p>$set修改器<br> 使用$set修改器指定要更新的key，key不存在则创建，存在则更新。 </p><p> 将符合条件 “name”:”郑州大学”的所有文档更新name和age的值。</p><pre><code>db.student.update({&quot;name&quot;:&quot;郑州大学&quot;},{$set:{&quot;name&quot;:&quot;郑州大学学生&quot;,&quot;age&quot;:10}},{multi:true})   multi：false表示更新第一个匹配的文档，true表示更新所有匹配的文档</code></pre></li></ol><h3 id="1-5-3-删除文档"><a href="#1-5-3-删除文档" class="headerlink" title="1.5.3 删除文档"></a>1.5.3 删除文档</h3><p>命令格式：</p><pre><code>db.student.remove(&lt;query&gt;) query：删除条件，相当于sql语句中的where</code></pre><ol><li><p>删除所有文档</p><pre><code>db.student.remove({})</code></pre></li><li><p>删除符合条件的文档</p><p> <code>db.student.remove({&quot;name&quot;:&quot; 郑州大学&quot;})</code></p></li></ol><h3 id="1-5-4-查询文档"><a href="#1-5-4-查询文档" class="headerlink" title="1.5.4 查询文档"></a>1.5.4 查询文档</h3><p>命令格式：</p><pre><code>db.collection.find(query, projection) query：查询条件，可不填 projection：投影查询key，可不写</code></pre><ol><li><p>查询全部</p><p> db.student.find()</p></li><li><p>查询符合条件的记录<br> 查询name等于 “郑州大学”的文档</p><pre><code>db.student.find({&quot;name&quot;,&quot;郑州大学&quot;})</code></pre></li><li><p>投影查询</p><p> 只显示name和age两个key，_id主键不显示</p><p> db.student.find({“name”：“郑州大学”},{name：1，age：1，_id:0})</p></li></ol><h2 id="1-6-用户"><a href="#1-6-用户" class="headerlink" title="1.6 用户"></a>1.6 用户</h2><h3 id="1-6-1-创建用户"><a href="#1-6-1-创建用户" class="headerlink" title="1.6.1 创建用户"></a>1.6.1 创建用户</h3><pre><code>mongo&gt;db.createUser( { user: &quot;&lt;name&gt;&quot;,   pwd: &quot;&lt;cleartext password&gt;&quot;,   customData: { &lt;any information&gt; },  roles: [         { role: &quot;&lt;role&gt;&quot;, db: &quot;&lt;database&gt;&quot; } | &quot;&lt;role&gt;&quot;,         ...    ]} )</code></pre><p>例子：<br>创建root用户，角色为root</p><pre><code>use admin db.createUser(     {        user : &quot;root&quot;,pwd : &quot;123456&quot;,roles:[{role:&quot;root&quot;,db:&quot;admin&quot;}]      }   )</code></pre><p>内置角色如下：</p><pre><code>1. 数据库用户角色：read、readWrite; 2. 数据库管理角色：dbAdmin、dbOwner、userAdmin3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； 4. 备份恢复角色：backup、restore； 5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、 dbAdminAnyDatabase 6. 超级用户角色：root</code></pre><h3 id="1-6-2-认证登录"><a href="#1-6-2-认证登录" class="headerlink" title="1.6.2 认证登录"></a>1.6.2 认证登录</h3><pre><code>如果不配置认证， 我们登陆mongo数据库的时候，是不需要进行账号密码登陆的。   为了安全需要，Mongodb要打开认证开关，即用户连接Mongodb要进行认证。</code></pre><p>1、在mono.conf中设置 auth=true<br>2、重启Mongodb<br>3、使用账号和密码连接数据库</p><p>1）mongo.exe连接</p><p>mongo.exe ‐u root ‐p 123456 ‐‐authenticationDatabase admin</p><p>2）Studio 3T连接</p><pre><code>输入账号密码进行登陆。</code></pre><p>Windows下Mongodb最初未开启认证，如何开启authentication<br>博客分类： mongodb</p><p>cmd-&gt; regedit-&gt; HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services-&gt;MongoDB</p><p>（mongodb注册的名称，我的是MongoDB)</p><p>在它的ImgPath中，我们修改一下，加入 –auth</p><p>如下</p><p>“E:\develop Software\Mongodb\mongodb-win32-x86_64-2.2.3\mongodb-win32-x86_64-2.2.3\bin\mongod.exe” -dbpath “E:\develop Software\Mongodb\mongodb-win32-x86_64-2.2.3\mongodb-win32-x86_64-2.2.3\data\db” –logpath “E:\develop Software\Mongodb\mongodb-win32-x86_64-2.2.3\mongodb-win32-x86_64-2.2.3\data\log\mongodb.log” –auth –service</p><h3 id="1-6-3-查询所有用户"><a href="#1-6-3-查询所有用户" class="headerlink" title="1.6.3 查询所有用户"></a>1.6.3 查询所有用户</h3><p>查询当前库下的所有用户</p><pre><code>show users</code></pre><h3 id="1-6-4-删除用户"><a href="#1-6-4-删除用户" class="headerlink" title="1.6.4 删除用户"></a>1.6.4 删除用户</h3><p>db.dropUser(“用户名”)   </p><pre><code>例子：   删除 test1用户db.dropUser(&quot;test1&quot;)</code></pre><h3 id="1-6-5-修改用户"><a href="#1-6-5-修改用户" class="headerlink" title="1.6.5 修改用户"></a>1.6.5 修改用户</h3><pre><code>语法格式db.updateUser( “&lt;username&gt;”{     customData : { &lt;any information&gt; },     roles : [                   { role: &quot;&lt;role&gt;&quot;, db: &quot;&lt;database&gt;&quot; } | &quot;&lt;role&gt;&quot;,                   ...                 ],      pwd: &quot;&lt;cleartext password&gt;&quot;       },       writeConcern: { &lt;write concern&gt; })</code></pre><p>先创建test1用户</p><pre><code>db.createUser(      {        user:&quot;test1&quot;,        pwd:&quot;test1&quot;,        roles:[{role:&quot;root&quot;,db:&quot;admin&quot;}]      }   )</code></pre><p>修改test1用户的角色为readWriteAnyDatabase</p><pre><code>use admin db.updateUser(&quot;test1&quot;,{roles:[{role:&quot;readWriteAnyDatabase&quot;,db:&quot;admin&quot;}]})</code></pre><h3 id="1-6-6-修改密码"><a href="#1-6-6-修改密码" class="headerlink" title="1.6.6 修改密码"></a>1.6.6 修改密码</h3><pre><code>语法格式db.changeUserPassword(&quot;username&quot;,&quot;newPasswd&quot;)</code></pre><p>例子：<br>修改test1用户的密码为123</p><pre><code>use admin  db.changeUserPassword(&quot;test1&quot;,&quot;123&quot;）</code></pre><p>每一个集合中的不同文档是可以有不同的域，这是比较灵活的，但是有时候为了保证性能，同一个集合中文档，域设置成一样的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongDB是一个文档型数据库，里面包含一些术语和概念，我们先来了解一下MongoDB的基本概念，再看一下中间的基本操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
